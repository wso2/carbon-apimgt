{
  "Admin.Throttling.Application.Throttling.Policy.add.general.details": "General Details",
  "Admin.Throttling.Application.Throttling.Policy.add.quota.limits.details": "Quota Limits",
  "Admin.Throttling.Application.Throttling.policy.table.header.name": "Name",
  "Admin.Throttling.Application.Throttling.policy.table.header.quota": "Quota",
  "Admin.Throttling.Application.Throttling.policy.table.header.quota.policy": "Quota Policy",
  "Admin.Throttling.Application.Throttling.policy.table.header.unit.time": "Unit Time",
  "Admin.Throttling.Blacklist.Throttling.Policy.add.condition.type": "Condition Type",
  "Admin.Throttling.Blacklist.Throttling.policy.table.header.condition.id": "Condition ID",
  "Admin.Throttling.Blacklist.Throttling.policy.table.header.condition.status": "Condition Status",
  "Admin.Throttling.Blacklist.Throttling.policy.table.header.condition.type": "Condition Type",
  "Admin.Throttling.Blacklist.Throttling.policy.table.header.conditional.value": "Conditional Value",
  "Admin.Throttling.Blacklist.policy.add.invert.condition": "Invert Condition:",
  "Admin.Throttling.Custom.Throttling.policy.table.header.description": "Description",
  "Admin.Throttling.Custom.Throttling.policy.table.header.key.template": "Key Template",
  "Admin.Throttling.Custom.Throttling.policy.table.header.name": "Name",
  "Admin.Throttling.Custom.policy.add.siddhi.query": "Siddhi Query:",
  "Admin.Throttling.Custom.policy.add.siddhi.query.description": "The following query will allow 5 requests per minute for an Admin user.",
  "Admin.Throttling.Custom.policy.add.siddhi.query.key.template": "Key Template : $userId",
  "Admin.Throttling.Subscription.Throttling.policy.table.header.name": "Name",
  "Admin.Throttling.Subscription.Throttling.policy.table.header.quota": "Quota",
  "Admin.Throttling.Subscription.Throttling.policy.table.header.quota.policy": "Quota Policy",
  "Admin.Throttling.Subscription.Throttling.policy.table.header.rate.limit": "Rate Limit",
  "Admin.Throttling.Subscription.Throttling.policy.table.header.time.unit": "Time Unit",
  "Admin.Throttling.Subscription.Throttling.policy.table.header.unit.time": "Unit Time",
  "AdminPages.Addons.InlineProgress.message": "Loading...",
  "AdminPages.Addons.InputListBase.textfield.remove.label": "Remove",
  "AdminPages.Addons.ListBase.nodata.message": "No items yet",
  "AdminPages.Addons.ListBase.reload": "Reload",
  "AdminPages.ApiCategories.AddEdit.form.add.successful": "API Category added successfully",
  "AdminPages.ApiCategories.AddEdit.form.edit.successful": "API Category edited successfully",
  "AdminPages.ApiCategories.AddEdit.form.name": "Name",
  "AdminPages.ApiCategories.Delete.form.delete.successful": "API Category deleted successfully",
  "AdminPages.ApiCategories.List.addButtonProps.title": "Add API Category",
  "AdminPages.ApiCategories.List.addButtonProps.triggerButtonText": "Add API Category",
  "AdminPages.ApiCategories.List.empty.content.apicategories": "You can use API categories to group APIs. In previous versions of WSO2 API Manager, the process of grouping APIs was carried out by using tag wise groups. Unlike tag wise grouping API categories do not use a naming convention. Therefore, the admin does not need to take into consideration any naming conventions when using API category based grouping.",
  "AdminPages.ApiCategories.List.empty.title.apicategories": "API Categories",
  "AdminPages.ApiCategories.List.help.link.one": "API Category based Grouping",
  "AdminPages.ApiCategories.List.search.default": "Search by API Category name",
  "AdminPages.ApiCategories.List.title.apicategories": "API Categories",
  "AdminPages.ApiCategories.table.header.category.description": "Description",
  "AdminPages.ApiCategories.table.header.category.name": "Category Name",
  "AdminPages.ApiCategories.table.header.category.number.of.apis": "Number of APIs",
  "AdminPages.ApplicationSettings.Edit.form.edit.successful": "Application owner changed successfully",
  "AdminPages.ApplicationSettings.Edit.form.name": "Application Name",
  "AdminPages.ApplicationSettings.List.empty.content.application.settings": "If required, you can transfer the ownership of your application to another user in your organization. Thereby, when transferring ownership, the new owner will have the required permission to delete or edit the respective application.{breakingLine}{breakingLine}Create an application with Devportal to change ownership.",
  "AdminPages.ApplicationSettings.List.empty.title.change.application.ownership": "Application Ownership Change",
  "AdminPages.ApplicationSettings.List.help.link.one": "Changing the Owner of an Application",
  "AdminPages.ApplicationSettings.List.search.default": "Search by Application Name or Owner",
  "AdminPages.ApplicationSettings.List.title.application.settings": "Application Settings",
  "AdminPages.ApplicationSettings.table.header.application.name": "Application Name",
  "AdminPages.ApplicationSettings.table.header.application.owner": "Owner",
  "AdminPages.BotDetection.Add.form.add.successful": "Email added successfully",
  "AdminPages.BotDetection.Add.form.email": "Email",
  "AdminPages.BotDetection.Add.form.info": "Provide a valid email to receive notifications when a bot attack is detected",
  "AdminPages.BotDetection.Email.Delete.form.delete.successful": "Email removed successfully",
  "AdminPages.BotDetection.Email.List.addButtonProps.title": "Add Email",
  "AdminPages.BotDetection.Email.List.addButtonProps.triggerButtonText": "Add Email",
  "AdminPages.BotDetection.Email.List.analytics.disabled.empty.content": "If you enable WSO2 API Manager Analytics with WSO2 API Manager, you can enable email notifications for all unauthorized API calls that you receive and also view the bot detection data easily via the Admin Portal.{breakingLine}{breakingLine}Follow documentations on help to enable Analytics and get started.",
  "AdminPages.BotDetection.Email.List.analytics.disabled.empty.title": "Analytics disabled!",
  "AdminPages.BotDetection.Email.List.empty.content": "After a Publisher publishes APIs in the API Developer Portal, hackers can invoke the APIs without an access token by scanning the open ports of a system. Therefore, WSO2 API Manager has a bot detection mechanism in place to prevent such attacks by identifying who tried to enter and invoke resources without proper authorization. WSO2 API Manager's bot detection mechanism traces and logs details of such unauthorized API calls and sends notifications in this regard via emails. Thereby this helps Publishers to protect their data from bot attackers and improve the security of their data.{breakingLine}{breakingLine}You can add, delete and see the list of registered emails here.",
  "AdminPages.BotDetection.Email.List.empty.title": "Notification receiving Emails",
  "AdminPages.BotDetection.Email.List.help.link.one": "Enabling email notifications for bot detection",
  "AdminPages.BotDetection.Email.List.help.link.two": "Viewing bot detection data via the Admin Portal",
  "AdminPages.BotDetection.Email.List.search.default": "Search by Email",
  "AdminPages.BotDetection.Email.List.table.header.email": "Email",
  "AdminPages.BotDetection.Email.List.title": "Emails",
  "AdminPages.BotDetection.detected.data.List.analytics.disabled.empty.content": "If you enable WSO2 API Manager Analytics with WSO2 API Manager, you can enable email notifications for all unauthorized API calls that you receive and also view the bot detection data easily via the Admin Portal.{breakingLine}{breakingLine}Follow documentations on help to enable Analytics and get started.",
  "AdminPages.BotDetection.detected.data.List.analytics.disabled.empty.title": "Analytics disabled!",
  "AdminPages.BotDetection.detected.data.List.empty.content.microgateways": "Bot detection is enabled. There is no detected bot data. When a bot attack is detected, you will be informed via email. Set the email to be informed with, {breakingLine}{breakingLine}Bot Detection Data > Configure Emails {breakingLine}{breakingLine}on the left side menu.",
  "AdminPages.BotDetection.detected.data.List.empty.title": "No Bots detected!",
  "AdminPages.BotDetection.detected.data.List.help.link.one": "Enabling email notifications for bot detection",
  "AdminPages.BotDetection.detected.data.List.help.link.two": "Viewing bot detection data via the Admin Portal",
  "AdminPages.BotDetection.detected.data.List.search.default": "Search Bot data",
  "AdminPages.BotDetection.detected.data.List.title": "Detected Data",
  "AdminPages.BotDetection.detected.data.table.header.label.api.method": "API method",
  "AdminPages.BotDetection.detected.data.table.header.label.client.ip": "Client IP",
  "AdminPages.BotDetection.detected.data.table.header.label.headers.set": "Headers Set",
  "AdminPages.BotDetection.detected.data.table.header.label.message.body": "Message Body",
  "AdminPages.BotDetection.detected.data.table.header.label.message.id": "Message ID",
  "AdminPages.BotDetection.detected.data.table.header.label.record.time": "Record Time",
  "AdminPages.BotDetection.detected.data.table.row.empty.message.body.default.message": "Empty Message Body",
  "AdminPages.Microgateway.AddEdit.form.info.add.successful": "microgateway Label added successfully",
  "AdminPages.Microgateway.AddEdit.form.info.edit.successful": "Microgateway Label edited successfully",
  "AdminPages.Microgateway.AddEdit.form.name": "Name",
  "AdminPages.Microgateway.AddEdit.form.save.button.label": "Save",
  "AdminPages.Microgateways.AddEdit.form.info": "To subscribe to this website, please enter youremail address here. We will send updatesoccasionally.",
  "AdminPages.Microgateways.AddEdit.form.label": "Label",
  "AdminPages.Microgateways.Delete.form.delete.confirmation.message": "Are you sure you want to delete this Microgateway Label?",
  "AdminPages.Microgateways.Delete.form.delete.successful": "Microgateway Label deleted successfully",
  "AdminPages.Microgateways.List.addButtonProps.title": "Add Microgateway Label",
  "AdminPages.Microgateways.List.addButtonProps.triggerButtonText": "Add Microgateway Label",
  "AdminPages.Microgateways.List.empty.content.microgateways": "It is possible to create a Microgateway distribution for a group of APIs. In order to group APIs, a label needs to be created and attached to the APIs that need to be in a single group.",
  "AdminPages.Microgateways.List.empty.title": "Microgateway Labels",
  "AdminPages.Microgateways.List.empty.title.microgateways": "Microgateways",
  "AdminPages.Microgateways.List.help.link.one": "Create a Microgateway label",
  "AdminPages.Microgateways.List.help.link.three": "View the Microgateway labels",
  "AdminPages.Microgateways.List.help.link.two": "Assign the Microgateway label to an API",
  "AdminPages.Microgateways.List.search.default": "Search Microgateway by Name, Description or Host",
  "AdminPages.Microgateways.List.title": "Microgateway Labels",
  "AdminPages.Microgateways.List.title.microgateways": "Microgateways",
  "AdminPages.Microgateways.table.header.hosts": "Gateway Host(s)",
  "AdminPages.Microgateways.table.header.label.description": "Description",
  "AdminPages.Microgateways.table.header.label.name": "Label",
  "Apis.Shared.AdminRootErrorBoundary.refresh": "Refresh",
  "Apis.Shared.AdminRootErrorBoundary.refresh.or.try.again.message": "You may refresh the page now or try again later",
  "Apis.Shared.AdminRootErrorBoundary.something.went.wrong.while.rendering.button": "Something went wrong while rendering the",
  "Apis.Shared.AdminRootErrorBoundary.something.went.wrong.while.rendering.heading": "Something went wrong while rendering the",
  "Apis.Shared.AppErrorBoundary.something.went.wrong": "Something went wrong",
  "Apis.Shared.ConfirmDialog.are.you.sure": "Are you sure?",
  "Apis.Shared.ConfirmDialog.cancel": "Cancel",
  "Apis.Shared.ConfirmDialog.ok": "OK",
  "Apis.Shared.ConfirmDialog.please.confirm": "Please Confirm",
  "Apis.Shared.RedirectToLogin.you.will.be.redirected.to": "You will be redirected to {page}",
  "Base.Errors.APINotfound.header": "404 API Not Found!",
  "Base.Errors.APINotfound.message": "Can't find an API associate with the given API ID",
  "Base.Errors.ResourceNotFound.api.list": "API List",
  "Base.Errors.ResourceNotFound.api.product.list": "API Product List",
  "Base.Errors.ResourceNotFound.more.links": "You may check the links below",
  "Base.Errors.ResourceNotfound.default_body": "The page you are looking for is not available",
  "Base.Errors.ResourceNotfound.default_tittle": "Page Not Found",
  "Base.Footer.Footer.product_details": "WSO2 API-M v3.1.0 | © 2020 WSO2 Inc",
  "Base.Header.avatar.Avatar.logout": "Logout",
  "Base.RouteMenuMapping.advanced.throttling.policies": "Advanced Policies",
  "Base.RouteMenuMapping.api.categories": "API Categories",
  "Base.RouteMenuMapping.application.creation": "Application Creation",
  "Base.RouteMenuMapping.application.throttling.policies": "Application Policies",
  "Base.RouteMenuMapping.applications": "Applications",
  "Base.RouteMenuMapping.blacklisted.items": "Blacklist Policies",
  "Base.RouteMenuMapping.bot.detection": "Bot Detection",
  "Base.RouteMenuMapping.bot.detection.data": "Bot Detection Data",
  "Base.RouteMenuMapping.configure.emails": "Configure Emails",
  "Base.RouteMenuMapping.custom.throttling.policies": "Custom Policies",
  "Base.RouteMenuMapping.dashboard": "Admin Dashboard",
  "Base.RouteMenuMapping.microgateways": "Microgateways",
  "Base.RouteMenuMapping.scope.mapping": "Scope Mapping",
  "Base.RouteMenuMapping.settings": "Settings",
  "Base.RouteMenuMapping.subscription.creation": "Subscription Creation",
  "Base.RouteMenuMapping.subscription.throttling.policies": "Subscription Policies",
  "Base.RouteMenuMapping.tasks": "Tasks",
  "Base.RouteMenuMapping.tenant.theme": "Tenant Theme",
  "Base.RouteMenuMapping.throttling.policies": "Rate Limiting Policies",
  "Base.RouteMenuMapping.user.creation": "User Creation",
  "LoginDenied.logout": "Logout",
  "LoginDenied.message": "The server could not verify that you are authorized to access the requested resource.",
  "LoginDenied.retry": "Retry",
  "LoginDenied.title": "Error 403 : Forbidden",
  "TenantTheme.Upload.Theme.browse.files.to.upload": "Browse File to Upload",
  "TenantTheme.Upload.Theme.button.upload": "Upload",
  "TenantTheme.Upload.Theme.drag.and.drop.message": "Drag & Drop files here {break} or {break}",
  "TenantTheme.Upload.Theme.help.link.one": "Tenant theming",
  "TenantTheme.Upload.Theme.info.message": "The theme should be a zip file containing CSSand images compliant with the API Manager theme format",
  "TenantTheme.Upload.Theme.page.heading": "Upload Tenant Theme",
  "Throttling.Advanced.AddEdit.ConditionalGroups.form.description.help": "Description of this group",
  "Throttling.Advanced.AddEdit.add.conditional.group": "Conditional groups",
  "Throttling.Advanced.AddEdit.add.conditional.group.add": "Add Conditional Group",
  "Throttling.Advanced.AddEdit.default.limits": "Default Limits",
  "Throttling.Advanced.AddEdit.form.add": "Add",
  "Throttling.Advanced.AddEdit.form.cancel": "Cancel",
  "Throttling.Advanced.AddEdit.form.dataAmount.name": "Data Bandwidth",
  "Throttling.Advanced.AddEdit.form.description": "Description",
  "Throttling.Advanced.AddEdit.form.description.help": "Description of the throttle policy.",
  "Throttling.Advanced.AddEdit.form.name.help": "Name of the throttle policy.",
  "Throttling.Advanced.AddEdit.form.policyName": "Name",
  "Throttling.Advanced.AddEdit.form.requestCount.name": "Name",
  "Throttling.Advanced.AddEdit.general.details": "General Details",
  "Throttling.Advanced.AddEdit.title.main": "Advanced Throttle Policy - Create New",
  "Throttling.Advanced.AddEdit.unitTime": "Unit Time",
  "Throttling.Advanced.ConditionalGroups.form.description": "Description",
  "Throttling.Advanced.List.add.new.polcy": "Add New Policy",
  "Throttling.Advanced.List.addButtonProps.title": "Add Policy",
  "Throttling.Advanced.List.addButtonProps.triggerButtonText": "Add Policy",
  "Throttling.Advanced.List.custom.action": "Some Action",
  "Throttling.Advanced.List.empty.content": "It is possible to create a Microgateway distribution for a group of APIs. In order to group APIs, a label needs to be created and attached to the APIs that need to be in a single group.",
  "Throttling.Advanced.List.empty.title": "Advanced Throttling Policies",
  "Throttling.Advanced.List.help.link.one": "Introducing Throttling Use-Cases",
  "Throttling.Advanced.List.help.link.two": "Adding a new advanced throttling policy",
  "Throttling.Advanced.List.search.default": "Search by policy name",
  "Throttling.Advanced.List.title.main": "Advanced Throttling Policies",
  "Throttling.Advanced.AddEdit.form.name": "Name",
  "Throttling.Application.Policy..List.search.default": "Search by Application Policy name",
  "Throttling.Application.Policy.List.addButtonProps.title": "Add Policy",
  "Throttling.Application.Policy.List.addButtonProps.triggerButtonText": "Add Policy",
  "Throttling.Application.Policy.List.empty.content.application.policies": "Application-level throttling policies are applicable per access token generated for an application.",
  "Throttling.Application.Policy.List.empty.title.application.policies": "Application Policies",
  "Throttling.Application.Policy.List.help.link.one": "Create an Application Rate Limiting Policy",
  "Throttling.Application.Policy.List.help.link.two": "Setting an Application Rate Limiting Policy",
  "Throttling.Application.Policy.policy.add.success": "Custom Policy added successfully.",
  "Throttling.Application.Policy.policy.delete.error": "Application Throttling Policy could not be deleted.",
  "Throttling.Application.Policy.policy.delete.success": "Application Throttling Policy successfully deleted.",
  "Throttling.Application.Policy.policy.dialog.delete.error": "Application Throttling Policy will be deleted.",
  "Throttling.Application.Policy.policy.edit.success": "Application Rate Limiting Policy edited successfully.",
  "Throttling.Application.Policy.search.default": "Application Rate Limiting Policies",
  "Throttling.Blacklist.Policy.List.addButtonProps.title": "Select Item to Blacklist",
  "Throttling.Blacklist.Policy.List.addButtonProps.triggerButtonText": "Add Policy",
  "Throttling.Blacklist.Policy.List.empty.content.blacklist.policies and abuse by": "By blacklisting requests, you can protect servers from common attacks users.",
  "Throttling.Blacklist.Policy.List.empty.title.blacklist.policies": "Blacklist Policies",
  "Throttling.Blacklist.Policy.List.help.link.one": "Blacklisting requests",
  "Throttling.Blacklist.Policy.List.search.default": "Search by Blacklist Policy name",
  "Throttling.Blacklist.Policy.policy.add.success": "Blacklist Policy added successfully.",
  "Throttling.Blacklist.Policy.policy.delete.error": "Blacklist Policy could not be deleted.",
  "Throttling.Blacklist.Policy.policy.delete.success": "Blacklist Policy successfully deleted.",
  "Throttling.Blacklist.Policy.policy.dialog.delete.error": "Blacklist Policy will be deleted.",
  "Throttling.Blacklist.Policy.policy.update.success": "Condition status has been updated successfully.",
  "Throttling.Blacklist.Policy.search.default": "Blacklist Policies",
  "Throttling.Custom.Policy.List.addButtonProps.title": "Define Custom Policy",
  "Throttling.Custom.Policy.List.addButtonProps.triggerButtonText": "Define Policy",
  "Throttling.Custom.Policy.List.empty.content.custom.policies and abuse by": "Custom throttling allows system administrators to define dynamic rules for specific use cases, which are applied globally across all tenants.",
  "Throttling.Custom.Policy.List.empty.title.custom.policies": "Custom Policies",
  "Throttling.Custom.Policy.List.help.link.one": "Custom Throttling Policy",
  "Throttling.Custom.Policy.List.search.default": "Search by Custom Policy name",
  "Throttling.Custom.Policy.policy.delete.error": "Custom Policy could not be deleted.",
  "Throttling.Custom.Policy.policy.delete.success": "Custom Policy successfully deleted.",
  "Throttling.Custom.Policy.policy.dialog.delete.error": "Custom Policy will be deleted.",
  "Throttling.Custom.Policy.search.default": "Custom Rate Limiting Policies",
  "Throttling.Subscription.AddEdit.enter.desccription": "Enter description",
  "Throttling.Subscription.AddEdit.form.add": "Add",
  "Throttling.Subscription.AddEdit.form.cancel": "Cancel",
  "Throttling.Subscription.AddEdit.general.details": "General Details",
  "Throttling.Subscription.AddEdit.quota.limits": "Quota Limits",
  "Throttling.Subscription.AddEdit.title.main": "Subscription Throttle Policy - Create New",
  "Throttling.Subscription.Billing.Cycle": "Billing Cycle",
  "Throttling.Subscription.Billing.Plan": "Billing Plan",
  "Throttling.Subscription.Currency": "Currency",
  "Throttling.Subscription.Currency.description": "Currency",
  "Throttling.Subscription.Custom.Control": "Custom Attribute",
  "Throttling.Subscription.Fixed.Rate": "Fixed Rate",
  "Throttling.Subscription.Fixed.Rate.description": "Fixed Rate",
  "Throttling.Subscription.GraphQL": "GraphQL",
  "Throttling.Subscription.Max.Complexity": "Max Complexity",
  "Throttling.Subscription.Max.Complexity.desccription": "Max Complexity",
  "Throttling.Subscription.Max.Depth": "Max Depth",
  "Throttling.Subscription.Max.Depth.desccription": "Max Depth",
  "Throttling.Subscription.Monetization.Plan": "Monetization Plan",
  "Throttling.Subscription.Permissions": "Permissions",
  "Throttling.Subscription.Policy..List.search.default": "Search by Subscription Policy name",
  "Throttling.Subscription.Policy.Flag": "Policy Flag",
  "Throttling.Subscription.Policy.List.addButtonProps.title": "Add Policy",
  "Throttling.Subscription.Policy.search.default": "Subscription Throttling Policies",
  "Throttling.Subscription.Properties.Properties.\n                                                                show.add.property.property.name": "Name",
  "Throttling.Subscription.Properties.Properties.add": "Delete",
  "Throttling.Subscription.Properties.Properties.help": "Property name should be unique.",
  "Throttling.Subscription.Properties.Properties.property.value": "Value",
  "Throttling.Subscription.Properties.add": "Add Attribute",
  "Throttling.Subscription.Roles": "Roles",
  "Throttling.Subscription.Stop.quota.reach": "Stop On Quota Reach",
  "Throttling.Subscription.enter.permission": "Enter Permission",
  "UnexpectedError.logout": "Logout",
  "UnexpectedError.message": "Error occured due to invalid request",
  "UnexpectedError.title": "Internal Server Error",
  "app.components.Shared.Banner.back": "Back"
}
