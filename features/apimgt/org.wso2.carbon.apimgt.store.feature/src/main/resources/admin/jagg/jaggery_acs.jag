<html>
    <body>
    Waiting for responses from identity server and validate response and forward to requested URI.
        <%
(function () {
    include("jagg.jag");
    var site = require("/site/conf/site.json");
    var log = new Log();
    var samlResponse = request.getParameter("SAMLResponse");
    var sessionId = session.getId();
    var samlRequest = request.getParameter("SAMLRequest");
    // create a sso relying party js object
    var security = require("sso");
    var ssoRelyingParty = new security.SSORelyingParty(site.ssoConfiguration.issuer);
    var isLogoutResponse = false;
    var isLogoutRequest = false;

    // it means ssoRelyingParty doesn't have SSO properties from site.json
    if (site.ssoConfiguration.idpInit && (ssoRelyingParty.getProperty("idpInitSSOURL") == null || ssoRelyingParty.getProperty("idpInitSSOURL") == "")) {
        var keyStorePassword = site.ssoConfiguration.keyStorePassword;
        var acsURL = site.ssoConfiguration.acsURL;
        var keyStoreAlias = site.ssoConfiguration.identityAlias;
        var keyStoreLocation = site.ssoConfiguration.keyStoreName;
        var signRequests = site.ssoConfiguration.signRequests;
        var CarbonUtils = Packages.org.wso2.carbon.utils.CarbonUtils;

        if (site.ssoConfiguration.keyStorePassword == null || site.ssoConfiguration.keyStorePassword == "") {
            site.ssoConfiguration.keyStorePassword = CarbonUtils.getServerConfiguration().getFirstProperty("Security.KeyStore.Password");
        }

        if (site.ssoConfiguration.identityAlias == null || site.ssoConfiguration.identityAlias == "") {
            site.ssoConfiguration.identityAlias = CarbonUtils.getServerConfiguration().getFirstProperty("Security.KeyStore.KeyAlias");
        }

        if (site.ssoConfiguration.keyStoreName == null || site.ssoConfiguration.keyStoreName == "") {
            site.ssoConfiguration.keyStoreName = CarbonUtils.getServerConfiguration().getFirstProperty("Security.KeyStore.Location");
        }

        if (site.ssoConfiguration.signRequests == null || site.ssoConfiguration.signRequests == "") {
            site.ssoConfiguration.signRequests = "false";
        }

        if (site.ssoConfiguration.nameIdPolicy == null) {
            site.ssoConfiguration.nameIdPolicy = "";
        }
        if (site.ssoConfiguration.loginUserNameAttribute == null) {
            site.ssoConfiguration.loginUserNameAttribute = "";
        }
           
        ssoRelyingParty.setProperty("idpInitSSOURL", site.ssoConfiguration.idpInitSSOURL);
        ssoRelyingParty.setProperty("identityProviderURL", site.ssoConfiguration.identityProviderURL);
        ssoRelyingParty.setProperty("keyStorePassword", String(site.ssoConfiguration.keyStorePassword));
        ssoRelyingParty.setProperty("identityAlias", String(site.ssoConfiguration.identityAlias));
        ssoRelyingParty.setProperty("keyStoreName", String(site.ssoConfiguration.keyStoreName));
        ssoRelyingParty.setProperty("signRequests", String(site.ssoConfiguration.signRequests));
        ssoRelyingParty.setProperty("nameIdPolicy", site.ssoConfiguration.nameIdPolicy);
        ssoRelyingParty.setProperty("assertionEncryptionEnabled", site.ssoConfiguration.assertionEncryptionEnabled);
        ssoRelyingParty.setProperty("loginUserNameAttribute", site.ssoConfiguration.loginUserNameAttribute);
    }

    var isAsssertionEncryptionEnabled = site.ssoConfiguration.assertionEncryptionEnabled;

    // if saml response is not a log out response
    if (samlResponse != null) {
        isLogoutResponse = ssoRelyingParty.isLogoutResponse(samlResponse);
        if (!Boolean(isLogoutResponse)) {
            var MultitenantConstants = Packages.org.wso2.carbon.utils.multitenancy.MultitenantConstants;
            //Validate the saml response schema-check the number of response elements is 1 and check the number of assertions
            //is equal to 1  and check the assertion validity period and check audience restrictions
            var isResponseValid = ssoRelyingParty.validateSAMLResponseSchema(samlResponse);
            if (!Boolean(isResponseValid)) {
                log.error("SAML response schema verification is failed.");
                response.sendRedirect("../site/pages/error-pages/401.html");
                return;
            }

            var fullUserName = ssoRelyingParty.getSAMLResponseNameId(samlResponse);
            var MultitenantUtils = Packages.org.wso2.carbon.utils.multitenancy.MultitenantUtils;
            var domainName = null;
            if (fullUserName != null) {
                domainName = MultitenantUtils.getTenantDomain(fullUserName);
            }
            // relay state value should be a valid value, this value is mapped with request uri.
            var relayState = request.getParameter("RelayState");

            var requestedURI;
            if (site.ssoConfiguration.idpInit == "true" && relayState == null) {
                // means IDP initiated flow with no relay state, redirect to home
                requestedURI = jagg.getHttpsUrl("/");
            } else {
                requestedURI =  ssoRelyingParty.getRelayStateProperty(relayState);
            }

            if (requestedURI == null) {
                log.error("Relaystate value is invalid.");
                response.sendRedirect("../site/pages/error-pages/401.html");
                return;
            }

            // validating the signature
            if (site.ssoConfiguration.responseSigningEnabled === 'true') {

                if (MultitenantConstants.SUPER_TENANT_DOMAIN_NAME !== domainName) {
                    jagg.module("manager").loadTenantRegistry(String(domainName));
                }
                var isSignatureValid = ssoRelyingParty.validateSignature(samlResponse);
                if (!Boolean(isSignatureValid)) {
                    log.error("SAML response signature is verification failed.");
                    response.sendRedirect("../site/pages/error-pages/401.html");
                    return;
                }
            }

            // validating the saml assertion signature
            if (site.ssoConfiguration.assertionSigningEnabled === 'true') {
                if (MultitenantConstants.SUPER_TENANT_DOMAIN_NAME !== domainName) {
                    jagg.module("manager").loadTenantRegistry(String(domainName));
                }
                var isAssertionSignatureValid = ssoRelyingParty.validateAssertionSignature(samlResponse);
                if (!Boolean(isAssertionSignatureValid)) {
                    log.error("SAML assertion signature is verification failed.");
                    response.sendRedirect("../site/pages/error-pages/401.html");
                    return;
                }
            }

            ssoRelyingParty.setSessionAuthenticated(sessionId, samlResponse, session);
            session.put("showLogin", "false");
            session.put("LOGGED_IN_USER", ssoRelyingParty.getLoggedInUser(sessionId));

            var userModule = jagg.module("user");
            var isAllowed = Packages.org.wso2.carbon.apimgt.impl.utils.APIUtil.hasPermission(fullUserName,
                    site.allowedPermission);

            var isSuperTenant = false;
            if (MultitenantConstants.SUPER_TENANT_DOMAIN_NAME == domainName) {
                isSuperTenant = true;
            }
            if (isAllowed) {
                jagg.setUser({
                    username: fullUserName,
                    isSuperTenant: isSuperTenant,
                    cookie: null,
                    userDomain: String(domainName)
                });
                sessionId = session.getId();
                ssoRelyingParty.setSessionAuthenticated(sessionId, samlResponse, session);
                session.put("showLogin", "false");
                session.put("LOGGED_IN_USER", ssoRelyingParty.getLoggedInUser(sessionId));
                userModule.getWorkflowCookieBySAMLToken();
                response.sendRedirect(requestedURI);
            } else {
                response.sendRedirect("../site/pages/error-pages/401.html");
                return;
            }
        } else {
            // if the saml response is log out request from IDP, we log out from web app.
            try {
                ssoRelyingParty.invalidateSessionBySessionId(sessionId);
            } catch (e) {
                log.error("Session has already been invalidated");
            }
            response.sendRedirect("../");
            return;
        }

    }

    // if saml request is a log out request, then invalidate session.
    if (samlRequest != null) {
        isLogoutRequest = ssoRelyingParty.isLogoutRequest(samlRequest);
        if (Boolean(isLogoutRequest)) {
            try {
                ssoRelyingParty.invalidateSessionBySAMLResponse(samlRequest);
            } catch (e) {
                log.error("Session has already been invalidated");
            }
        }
    }

}());
%>
</body>
</html>
