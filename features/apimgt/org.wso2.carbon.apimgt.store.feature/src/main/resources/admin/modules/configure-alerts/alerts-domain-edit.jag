<%
var log = new Log();

var getDomain = function (domainName) {
        try {
        var carbon = require('carbon');
        var process = require('process');
        var realmConfiguration = new org.wso2.carbon.user.core.config.RealmConfigXMLProcessor().
                buildRealmConfigurationFromFile();
        var username = "admin";
        var password = "admin";

        var carbon = require('carbon'),
        conf = carbon.server.loadConfig('api-manager.xml'),
        dasUrl = conf.*::['Analytics'].*::['DASRestApiURL'].text();
        username = conf.*::['Analytics'].*::['DASUsername'].text();
        password = conf.*::['Analytics'].*::['DASPassword'].text();


        var stub = new org.wso2.carbon.event.template.manager.stub.TemplateManagerAdminServiceStub(dasUrl + "/services/TemplateManagerAdminService");
        var client = stub._getServiceClient();
        var options = client.getOptions();
        var authenticator = new org.apache.axis2.transport.http.HttpTransportProperties.Authenticator();
        authenticator.setUsername(username);
        authenticator.setPassword(password);
        authenticator.setPreemptiveAuthentication(true);
        options.setProperty(org.apache.axis2.transport.http.HTTPConstants.AUTHENTICATE, authenticator);
        client.setOptions(options);
        var configInfo = stub.getDomainInfo(domainName);
        return configInfo;

    } catch (ex) {
        var message = "Error occurred while Retrieving Domain Information (Cause:" + ex.message + ")";
        log.error(message);
        return {
            error: true,
            message: message
        };
    }
};

var getDomainConfiguration = function (domainName, configurationName) {
        try {
        var carbon = require('carbon');
        var process = require('process');
        var realmConfiguration = new org.wso2.carbon.user.core.config.RealmConfigXMLProcessor().
                buildRealmConfigurationFromFile();
        var username = "admin";
        var password = "admin";

        var carbon = require('carbon'),
        conf = carbon.server.loadConfig('api-manager.xml'),
        dasUrl = conf.*::['Analytics'].*::['DASRestApiURL'].text();
        username = conf.*::['Analytics'].*::['DASUsername'].text();
        password = conf.*::['Analytics'].*::['DASPassword'].text();

        var stub = new org.wso2.carbon.event.template.manager.stub.TemplateManagerAdminServiceStub(dasUrl + "/services/TemplateManagerAdminService");
        var client = stub._getServiceClient();
        var options = client.getOptions();
        var authenticator = new org.apache.axis2.transport.http.HttpTransportProperties.Authenticator();
        authenticator.setUsername(username);
        authenticator.setPassword(password);
        authenticator.setPreemptiveAuthentication(true);
        options.setProperty(org.apache.axis2.transport.http.HTTPConstants.AUTHENTICATE, authenticator);
        client.setOptions(options);
        var configInfo = stub.getConfiguration(domainName, configurationName);   
        return configInfo;

    } catch (ex) {
        var message = "Error occurred while Retrieving Domain specific Configuration (Cause:" + ex.message + ")";
        log.error(message);
        return {
            error: true,
            message: message
        };
    }
};


var saveConfiguration = function (domainName, templateType, configurationName, description, parametersJson) {
        try {

        var valueSeparator = "::";
        
       
        var ScenarioConfigurationDTO = Packages.org.wso2.carbon.event.template.manager.admin.dto.configuration.xsd.ScenarioConfigurationDTO;
        
        var ParameterDTO = Packages.org.wso2.carbon.event.template.manager.admin.dto.configuration.xsd.ConfigurationParameterDTO;
        
        var scenarioConfigurationDTO = new ScenarioConfigurationDTO();

        scenarioConfigurationDTO.setName(configurationName);
        scenarioConfigurationDTO.setDomain(domainName);
        scenarioConfigurationDTO.setDescription(description);
        scenarioConfigurationDTO.setType(templateType);


        var parameterStrings = parametersJson.split(",");
        var parameters = new Array();

        if (parametersJson.length > 0) {
          for (var i in parameterStrings) {
              var parameterDTO = new ParameterDTO();
              parameterDTO.setName(parameterStrings[i].split(valueSeparator)[0]);
              parameterDTO.setValue(parameterStrings[i].split(valueSeparator)[1]);
              parameters.push(parameterDTO);
          }
        }

        scenarioConfigurationDTO.setConfigurationParameterDTOs(parameters);
        
        var carbon = require('carbon');
        var process = require('process');
        var realmConfiguration = new org.wso2.carbon.user.core.config.RealmConfigXMLProcessor().
                buildRealmConfigurationFromFile();
        var username = "admin";
        var password = "admin";

        var carbon = require('carbon'),
        conf = carbon.server.loadConfig('api-manager.xml'),
        dasUrl = conf.*::['Analytics'].*::['DASRestApiURL'].text();
        username = conf.*::['Analytics'].*::['DASUsername'].text();
        password = conf.*::['Analytics'].*::['DASPassword'].text();


        var stub = new org.wso2.carbon.event.template.manager.stub.TemplateManagerAdminServiceStub(dasUrl + "/services/TemplateManagerAdminService");
        var client = stub._getServiceClient();
        var options = client.getOptions();
        var authenticator = new org.apache.axis2.transport.http.HttpTransportProperties.Authenticator();
        authenticator.setUsername(username);
        authenticator.setPassword(password);
        authenticator.setPreemptiveAuthentication(true);
        options.setProperty(org.apache.axis2.transport.http.HTTPConstants.AUTHENTICATE, authenticator);
        client.setOptions(options);
        var configInfo = stub.saveConfiguration(scenarioConfigurationDTO);
        return configInfo;
    } catch (ex) {
        var message = "Error occurred while Saving Domain Configuration (Cause:" + ex.message + ")";
        log.error(message);
        return {
            error: true,
            message: message
        };
    }
};



%>
