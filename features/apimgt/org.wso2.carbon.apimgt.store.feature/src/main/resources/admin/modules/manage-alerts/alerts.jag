<%
var agent = "admin-dashboard";
var retrieveSavedAlertsTypes = function () {
    var i,api,apis,length, log = new Log();

    var gson = com.google.gson.Gson();
    try {

        var APIUtil = org.wso2.carbon.apimgt.impl.utils.APIUtil;

        var isAnalyticsEnabled = APIUtil.isAnalyticsEnabled();
        if(!isAnalyticsEnabled) {

            return {
                error:true,
                message:"Please enable statistics to see this page"
            };

        }

        var allAlertTypes = APIUtil.getAllAlertTypeByStakeHolder(agent);
        var allAlertTypesJson = JSON.parse(gson.toJson(allAlertTypes));

        var userName = jagg.getUser().username;
        var MultitenantUtils = Packages.org.wso2.carbon.utils.multitenancy.MultitenantUtils;
        var tenantDomain = MultitenantUtils.getTenantDomain(userName);

        if ("carbon.super" == tenantDomain) {
            userName = userName + "@carbon.super";
        }
        
        var allSavedAlertTypes = APIUtil.getSavedAlertTypesIdsByUserNameAndStakeHolder(userName, agent);
        var allSavedAlertTypesJsonObj = JSON.parse(gson.toJson(allSavedAlertTypes));

        return {
            "error": false,
            "allAlertTypeJson": allAlertTypesJson,
            "savedAlertTypeJson": allSavedAlertTypesJsonObj
        };
    } catch (e) {
        log.error(e.message);
        return {
            error:true,
            message:e.message.split(":")[1]
        };
    }
};

var unSubscribe = function (userName){
    var log = new Log();

    try {
        var APIUtil = org.wso2.carbon.apimgt.impl.utils.APIUtil;

        var isAnalyticsEnabled = APIUtil.isAnalyticsEnabled();
        if(!isAnalyticsEnabled) {

            return {
                error:true,
                message:"Please enable statistics to see this page"
            };

        }
        var apiDataPublisher = org.wso2.carbon.apimgt.gateway.alert.AlertTypesPublisher;
        var apiDatapublisherInstance = new apiDataPublisher();

        apiDatapublisherInstance.unSubscribe(userName,agent);

        return {
            error: false
        }

    } catch (e) {

        log.error(e.code);
        return {
            error:true,
            message:e.message.split(":")[1]
        };
    }
};

var saveAlertsTypes  = function (checkedAlertList, emailList,userName,checkedAlertListValues) {


    var log = new Log();

    try {
        var APIUtil = org.wso2.carbon.apimgt.impl.utils.APIUtil;

        var isAnalyticsEnabled = APIUtil.isAnalyticsEnabled();
        if(!isAnalyticsEnabled) {

            return {
                error:true,
                message:"Please enable statistics to see this page"
            };

        }
        var apiDataPublisher = org.wso2.carbon.apimgt.gateway.alert.AlertTypesPublisher;
        var apiDatapublisherInstance = new apiDataPublisher();
        //if it is publisher "p" if it is store agent should be "s"

        apiDatapublisherInstance.saveAndPublishAlertTypesEvent(checkedAlertList, emailList, userName, agent,
                checkedAlertListValues);

        return {
            error: false
        }


    } catch (e) {

        log.error(e.code);
        return {
            error:true,
            message:e.message.split(":")[1]
        };
    }


};

var retrieveSavedEmailList = function () {

    var gson = com.google.gson.Gson();
    var log = new Log();

    try {

        var APIUtil = org.wso2.carbon.apimgt.impl.utils.APIUtil;

        var isAnalyticsEnabled = APIUtil.isAnalyticsEnabled();
        if(!isAnalyticsEnabled) {

            return {
                error:true,
                message:"Please enable statistics to see this page"
            };

        }

        var userName = jagg.getUser().username;
        var MultitenantUtils = Packages.org.wso2.carbon.utils.multitenancy.MultitenantUtils;
        var tenantDomain = MultitenantUtils.getTenantDomain(userName);

        if ("carbon.super" == tenantDomain) {
            userName = userName + "@carbon.super";
        }


        var allSavedEmailList = APIUtil.retrieveSavedEmailList(userName,agent);

        var allSavedEmailListJson = JSON.parse(gson.toJson(allSavedEmailList));

        return {
            "error": false,
            "allSavedEmailListJson": allSavedEmailListJson
        };


    } catch (e) {

        log.error(e.code);
        return {
            error: true,
            message: e.message.split(":")[1]
        };
    }


};


%>