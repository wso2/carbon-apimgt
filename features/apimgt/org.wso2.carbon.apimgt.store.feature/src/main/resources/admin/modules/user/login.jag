<%

include("/jagg/constants.jag");

var login = function (username, password, tenantMode) {
    username = username.trim();
    var result, isSuperTenant, message,
            log = new Log();
    var appName = 'AdminApp';

    try {
        if (tenantMode != 'null' && tenantMode != '' && tenantMode != null) {
            var userDomain = username.split("@")[1];
            if (tenantMode != userDomain) {
                return {
                    error: true,
                    cookie: null,
                    message: "Authentication failed." + username.split("@")[0] + " is not from the tenant domain " + tenantMode
                };
            }
        }


        var xhr = new XMLHttpRequest();
        var store = jagg.module("manager").getAPIStoreObj();
        var endpoint = store.getAuthServerURL() + "AuthenticationAdmin";
        xhr.open("POST", endpoint);
        xhr.setRequestHeader('SOAPAction', 'urn:login');
        xhr.setRequestHeader('Content-Type', 'application/soap+xml');
        var payload = '<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:aut="http://authentication.services.core.carbon.wso2.org"><soap:Header/><soap:Body><aut:login><aut:username>' + username + '</aut:username><aut:password>' + password + '</aut:password><aut:remoteAddress>localhost</aut:remoteAddress></aut:login></soap:Body></soap:Envelope>';
        xhr.send(payload);
        var cookie = (xhr.getAllResponseHeaders());

        var result = xhr.responseText.toString();
        var start = result.indexOf("ns:return");
        var end = result.indexOf("</ns:return");
        var isLogged = result.substring(start, end).split(">")[1];

	//To check if user is allowed we need to pass domain aware user name when we have users coming from secondary user store.
	//Hence in addition to default login call we will log user with authentication admin service via store host object login method.
	//Then use that domain aware user name for permission validation.
	//Fixing https://wso2.org/jira/browse/APIMANAGER-5172
	loginResponse = store.login(username, password, appName);
	if (loginResponse.error) {
        	if (log.isDebugEnabled()) {
        	    	log.debug("Error while authenticating user : " + username);
        	}
        	message = loginResponse.detail.split('!')[1];
        	if (message == null) {
        		message = loginResponse.detail;
        	}
        	return {
        	    	error:loginResponse.error,
        	    	cookie:null,
        	    	message:message
        	};
    	}
    	var isAllowed = isUserAllowed(loginResponse.user);
        if (isAllowed) {
            username = loginResponse.user;
            getWorkflowCookie(username, password);
            var auth = getAuthorizationHeaderCredentials(username, password);

            if (isLogged == 'false') {
                if (log.isDebugEnabled()) {
                    log.debug("Error while authenticating user : " + username);
                }

                message = "Login Failed.";

                return {
                    error: true,
                    cookie: null,
                    message: message
                };
            } else {
                isSuperTenant = tenantMode;
                var sessionCookie = xhr.getResponseHeader("Set-Cookie");//cookie.split(';')[0];
                jagg.setUser({
                    username: username,
                    isSuperTenant: isSuperTenant,
                    cookie: sessionCookie,
                    userDomain: username.split("@")[username.split("@").length -1],
                    auth: auth
                });
                getWorkflowCookie(username, password);

                return {
                    error: false,
                    cookie: sessionCookie
                };
            }
        } else {
            return {
                error: true,
                cookie: null,
                message: "Login Failed."
            };

        }
    }
    catch (e) {
        log.error(e.message);
        return {
            error: true,
            message: e.message.split("Exception:")[2]
        };
    }
};
var loginWithSAMLToken = function (token) {
    var site = require("/site/conf/site.json");
    var security = require("sso");
    var ssoRelyingParty = new security.SSORelyingParty(site.ssoConfiguration.issuer);

    var result,
            log = new Log(),
            manager = jagg.module("manager"),
            store = manager.getAPIStoreObj();


    var encodedToken = ssoRelyingParty.xmlEncode(token);
    var xhr = new XMLHttpRequest();
    var endPoint = manager.getHTTPsURL() + "/services/SAML2SSOAuthenticationService";
    xhr.open("POST", endPoint);

    var payload = '<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:sso="http://sso.saml2.authenticator.identity.carbon.wso2.org" xmlns:xsd="http://dto.sso.saml2.authenticator.identity.carbon.wso2.org/xsd"><soap:Header/><soap:Body><sso:login><sso:authDto><xsd:response>' + encodedToken + '</xsd:response></sso:authDto></sso:login></soap:Body></soap:Envelope>';

    xhr.send(payload);
    var cookie = (xhr.getAllResponseHeaders());

    // var cookieString = cookie.split(";")[0].split(":")[1];
    var cookieString = xhr.getResponseHeader("Set-Cookie");
    var userName = ssoRelyingParty.getSAMLResponseNameId(token);
    if (userName) {
        userName = userName.trim();
    }
    getWorkflowCookie(username, password);

    return {
        error: false,
        username: userName,
        cookie: cookieString
    };
};

var logout = function () {
    //TODO : implement logout
    session.put("createPermitted", null);
    session.put("publishPermitted", null);
    return {
        error: false
    };
};

var getWorkflowCookie = function (username, password) {
    var log = new Log();
    var bpsRuning = false;
    try {
        var xhr = new XMLHttpRequest();
        var site = require("/site/conf/site.json");
        var workFlowServerURL = site.workflows.workFlowServerURL;
        bpsRuning = checkWorkflowServerStatus(workFlowServerURL);
        if (bpsRuning) {
            var endpoint = workFlowServerURL + "AuthenticationAdmin";
            xhr.open("POST", endpoint);
            var payload = '<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:aut="http://authentication.services.core.carbon.wso2.org"><soap:Header/><soap:Body><aut:login><aut:username>' + username + '</aut:username><aut:password>' + password + '</aut:password><aut:remoteAddress>localhost</aut:remoteAddress></aut:login></soap:Body></soap:Envelope>';
            xhr.send(payload);
            var cookie = (xhr.getAllResponseHeaders());
            //session.put("workflowCookie",cookie.split(";")[0].split(":")[1]);
            var sessionCookie = xhr.getResponseHeader("Set-Cookie");
            session.put("workflowCookie", sessionCookie);
        }
    } catch (e) {
        log.error(e.message);

    }
};

/**
 * This method will return the workflow cookie using the SAML2 Token
 */
var getWorkflowCookieBySAMLToken = function () {
    var log = new Log();
    var site = require("/site/conf/site.json");
    var workFlowServerURL = site.workflows.workFlowServerURL;
    var bpsRuning = checkWorkflowServerStatus(workFlowServerURL);
    if (bpsRuning) {
        var clock = new Date();
        var timeNow = clock.getTime();
        if (session.get("workflowCookieLastUpdatedTime") == null) {
            session.put("workflowCookieLastUpdatedTime", timeNow);
        }
        var workflowCookieLastUpdatedTime = session.get("workflowCookieLastUpdatedTime");
        if (((timeNow - workflowCookieLastUpdatedTime) > DEFAULT_COOKIE_REFRESH_INTERVAL) ||
                (session.get("workflowCookie") == null)) {
            var sessionCookie = getAuthCookieBySAMLToken(workFlowServerURL);
            if (sessionCookie != null) {
                session.put("workflowCookie", sessionCookie);
                session.put("workflowCookieLastUpdatedTime", timeNow);
            } else {
                log.error("Error occurred while getting workflow cookie by exchanging the SAML token.");
            }
        }
    }
};

/**
 * Returns an authenticated cookie, for the given Server by exchanging the SAML2 SSO token
 * @param serverUrl
 */
var getAuthCookieBySAMLToken = function (serverUrl) {
    var log = new Log();
    var user = jagg.getUser().username;
    try {
        var site = require("/site/conf/site.json");
        var security = require("sso");
        var ssoRelyingParty = new security.SSORelyingParty(site.ssoConfiguration.issuer);
        var encodedToken = ssoRelyingParty.getSAMLToken(session.getId());
        var xhr = new XMLHttpRequest();
        var endPoint = serverUrl + "SAML2SSOAuthenticationService";
        xhr.open("POST", endPoint);

        var payload = '<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:sso="http://sso.saml2.authenticator.identity.carbon.wso2.org" xmlns:xsd="http://dto.sso.saml2.authenticator.identity.carbon.wso2.org/xsd">' +
                        '<soap:Header/>' +
                        '<soap:Body>' +
                            '<sso:login>' +
                                '<sso:authDto>' +
                                    '<xsd:response>' + encodedToken + '</xsd:response>' +
                                '</sso:authDto>' +
                            '</sso:login>' +
                        '</soap:Body>' +
                      '</soap:Envelope>';

        xhr.setRequestHeader('SOAPAction', 'urn:login');
        xhr.setRequestHeader('Content-Type', 'application/soap+xml');
        xhr.send(payload);
        if (xhr.status == 200) {
            return xhr.getResponseHeader("Set-Cookie");
        } else {
            log.error("Error occurred while getting a cookie for  user :  " + user +
                    " Received Response : " + xhr.responseText);
        }
    } catch (e) {
        log.error("Error while getting a cookie for  user :  " + user + "\n" + e.message);
    }
    return null;
};

var checkWorkflowServerStatus = function (serverUrl) {
    var log = new Log();
    var endpoint;
    var services = "services";
    if (serverUrl.length - serverUrl.lastIndexOf(services) == services.length + 1) {
        serverUrl = serverUrl.substring(0, serverUrl.length - (services.length + 1));
    }
    endpoint = serverUrl + "carbon";
    try {
        var httpClient = new Packages.org.apache.http.impl.client.DefaultHttpClient();
        var httpGet = new Packages.org.apache.http.client.methods.HttpGet(endpoint);
        var response = httpClient.execute(httpGet);
        if (response.getStatusLine().getStatusCode() == 200) {
            return true;
        } else {
            return false;
        }
    } catch (e) {
        if (e.message != null) {
            var errorMessage = e.message;
            var BPSerror = "java.lang.IllegalArgumentException";
            if (errorMessage.indexOf(BPSerror) !== -1) {
                return false;
            }
        }
        log.warn("Not Retrieving Pending Tasks. Check BPS Connectivity. " + e.message);
        return false;
    }
};

var isUserAllowed = function (username) {
    var log = new Log();

    try {
        return Packages.org.wso2.carbon.apimgt.impl.utils.APIUtil.hasPermission(username, site.allowedPermission);
    } catch (e) {
        log.error("Error while checking if user " + username + " has permission to login to admin portal", e);
        return false;
    }
};

var getAuthorizationHeaderCredentials=function(username, password){
    var Base64Utils = Packages.org.apache.axiom.util.base64.Base64Utils;
    var inputString = username + ":" + password;
    var byteArray = [];

    for (var i = 0; i < inputString.length; ++i) {
        byteArray.push(inputString.charCodeAt(i));
    }
    var encodedString = Base64Utils.encode(byteArray);

return encodedString.toString();
}
%>
