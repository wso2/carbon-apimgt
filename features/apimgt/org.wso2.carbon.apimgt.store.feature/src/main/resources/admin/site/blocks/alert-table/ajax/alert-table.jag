<%
include("/jagg/jagg.jag");
var i18n = require("i18n");

var localeResourcesBasePath = "/site/conf/locales/jaggery/";
i18n.init(request,localeResourcesBasePath);

(function () {

    response.contentType = "application/json; charset=UTF-8";
    var mod, obj, result,
            action = request.getParameter("action"),
            site = require("/site/conf/site.json"),
            msg = require("/site/conf/ui-messages.jag")
    allProviders = "__all_providers__";
    if (jagg.getUser() == null) {
        print({
            error: true,
            message: 'timeout'
        });
    } else {
        if (action === "isDataPublishingEnabled") {
            mod = jagg.module("stats");
            result = mod.isDataPublishingEnabled();

            if (result.error == "true") {
                obj = {
                    error: result.error,
                    message: msg.error.backendError(action)
                };
            } else {
                obj = {
                    error: false,
                    usage: result.usage
                }
            }
            print(obj);

        }

        else if (action === "getDataFromTable") {
            mod = jagg.module("stats");
            var provider = jagg.getUser().username;
            var draw = request.getParameter("draw");
            var startindex =  parseInt(request.getParameter("start"));
            var tableName = request.getParameter("tableName");
            var count = parseInt(request.getParameter("entriesPerPage"));
            var searchEntry = request.getParameter("search[value]");
            var sortOrder = (request.getParameter("order[0][dir]"));
            var sortColumn = request.getParameter("order[0][column]");

            if(sortColumn == '0'){
                sortColumn = "alertTimestamp";
            } else if (sortColumn == '3') {
                sortColumn = "severity";
            }

            var MultitenantUtils = Packages.org.wso2.carbon.utils.multitenancy.MultitenantUtils;
            var tenantDomain = MultitenantUtils.getTenantDomain(jagg.getUser().username);


            var sortOrderBool = false;
            if(sortOrder == "desc") {
                sortOrderBool = false;
            } else if (sortOrder == "asc"){
                sortOrderBool = true;
            }

            //composing the search query
            var fullSearchQuery = 'tenantDomain:' + tenantDomain;

            if (searchEntry != "") {
                var lucenePrefix = '';
                if(searchEntry.indexOf(":") == -1){
                    lucenePrefix = 'msg:';
                } else {
                    var index = searchEntry.indexOf(":");
                    lucenePrefix = searchEntry.substring(0,index+1);
                    searchEntry = searchEntry.substring(index+1,searchEntry.length);
                }
                searchEntry = lucenePrefix + '"'  + searchEntry +'"';
                fullSearchQuery += ' AND ' + searchEntry;
            }


            dataResult = mod.getDataFromTable(tableName, tenantDomain, startindex, count, sortColumn, sortOrder);
            countResult = result = mod.getCountFromTable(tableName, tenantDomain);

            parsedDataResult = dataResult;
            
            if (parsedDataResult["status"] == "failed") {
                obj = {
                    "draw":draw,
                    "recordsTotal": countResult,
                    "recordsFiltered": countResult,
                    "data" : []
                };
            } else {
                var type = null;
                if (tableName == "ORG_WSO2_ANALYTICS_APIM_ALERT_UNUSUALIPACCESS") {
                    type = "Unseen Source IP Address";
                } else if (tableName == "ORG_WSO2_ANALYTICS_APIM_ABNORMALREQUESTSPERMINALERTSTREAM") {
                    type = "Abnormal Request Count";
                } else if (tableName == "ORG_WSO2_ANALYTICS_APIM_ABNORMALRESPONSETIMEALERTSTREAM") {
                    type = "Abnormal Response Time";
                } else if (tableName == "ORG_WSO2_ANALYTICS_APIM_ALERT_ABNORMALTIERUSAGEALERT") {
                    type = "Abnormal API Usage";
                } else if (tableName == "ORG_WSO2_ANALYTICS_APIM_TIERLIMITHITTINGALERT") {
                    type = "Tier Crossing";
                } else if (tableName == "ORG_WSO2_ANALYTICS_APIM_ABNORMALBACKENDTIMEALERTSTREAM") {
                    type = "Abnormal Backend Time";
                } else if (tableName == "ORG_WSO2_ANALYTICS_APIM_APIHEALTHMONITORALERTSTREAM") {
                    type = "Health Availability";
                } else if (tableName == "ORG_WSO2_ANALYTICS_APIM_REQUESTPATTERNCHANGEDSTREAM") {
                    type = "Abnormal Resource Access Pattern";
                }

                var arr = new Array(parsedDataResult.length);
                for (i=0; i<parsedDataResult.length ;i++) {

                    arr[i] = new Array(4);

                    arr[i][0] = (new Date(parsedDataResult[i]["values"]["alertTimestamp"])).toString();
                    if (tableName == "ORG_WSO2_ANALYTICS_APIM_ALLAPIMALERTSSTREAM") {
                        type = i18n.localize(parsedDataResult[i]["values"]["type"]);
                        arr[i][1] = '<a class="alertTypeLink">'+type+'</a>';
                    } else {
                        arr[i][1] = type;
                    }
                    arr[i][2] = parsedDataResult[i]["values"];
                    arr[i][3] = parsedDataResult[i]["values"]["severity"];

                }

                obj = {
                    "draw":draw,
                    "recordsTotal": countResult,
                    "recordsFiltered": countResult,
                    "data" :
                    arr
                }
                print(obj);
            }


        }  else {
            print({
                error: true,
                message: msg.error.invalidAction(action)
            });
        }
    }
}());
%>
