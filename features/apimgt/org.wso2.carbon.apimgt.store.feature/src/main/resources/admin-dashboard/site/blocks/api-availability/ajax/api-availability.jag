<%
include("/jagg/jagg.jag");

(function () {

    response.contentType = "application/json; charset=UTF-8";
    var mod, obj, result,
            action = request.getParameter("action"),
            site = require("/site/conf/site.json"),
            msg = require("/site/conf/ui-messages.jag")
    allProviders = "__all_providers__";
    if (jagg.getUser() == null) {
        print({
            error: true,
            message: 'timeout'
        });
    } else {
        if (action === "isDataPublishingEnabled") {
            mod = jagg.module("stats");
            result = mod.isDataPublishingEnabled();

            if (result.error == "true") {
                obj = {
                    error: result.error,
                    message: msg.error.backendError(action)
                };
            } else {
                obj = {
                    error: false,
                    usage: result.usage
                }
            }
            print(obj);

        }

        else if (action === "getDataFromTable") {
            mod = jagg.module("stats");
            var provider = jagg.getUser().username;
            var draw = request.getParameter("draw");
            var startindex =  parseInt(request.getParameter("start"));
            var count = parseInt(request.getParameter("entriesPerPage"));
            var searchEntry = request.getParameter("search[value]");
            var sortOrder = (request.getParameter("order[0][dir]"));

            var tableName = "ORG_WSO2_ANALYTICS_APIM_APIAVAILABILITY";

            var sortOrderBool = false;;
            if(sortOrder == "asc") {
                sortOrderBool = false;
            } else if (sortOrder == "desc"){
                sortOrderBool = true;
            }

            if (searchEntry != "") {
                var lucenePrefix = "api_version:";
                searchEntry = lucenePrefix+ '"'  + searchEntry +'"';
            }


            dataResult = mod.getDataFromTable(tableName, searchEntry, startindex, count, "api_version", sortOrderBool);
            countResult = result = mod.getCountFromTable(tableName, searchEntry);

            parsedDataResult = JSON.parse(dataResult);

            if (parsedDataResult["status"] == "failed") {
                obj = {
                    "draw":draw,
                    "recordsTotal": countResult,
                    "recordsFiltered": countResult,
                    "data" : []
                };
            } else {

                var arr = new Array(parsedDataResult.length);
                for (i=0; i<parsedDataResult.length ;i++) {

                    arr[i] = new Array(3);

                    arr[i][1] = parsedDataResult[i]["values"]["api_version"];
                    arr[i][2] = parsedDataResult[i]["values"]["status"];

                }

                obj = {
                    "draw":draw,
                    "recordsTotal": countResult,
                    "recordsFiltered": countResult,
                    "data" :
                    arr
            }
                print(obj);
            }


        }  else {
            print({
                error: true,
                message: msg.error.invalidAction(action)
            });
        }
    }
}());
%>