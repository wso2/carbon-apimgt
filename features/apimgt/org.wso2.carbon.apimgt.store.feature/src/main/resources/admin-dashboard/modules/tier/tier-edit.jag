<%
var log = new Log();

var addTier = function (tierName, requestCount, unitTime, description, stopOnQuotaReach, tierPlan, attributes) {
    try {
        var provider = jagg.getUser().username;
        var APIProviderImpl = Packages.org.wso2.carbon.apimgt.impl.APIProviderImpl;
        var apiProvider = new APIProviderImpl(provider);

        var tier = constructTierObject(tierName, requestCount, unitTime, description, stopOnQuotaReach, tierPlan,
                        attributes);
        apiProvider.addTier(tier);
        return {
            error: false
        };
    } catch (ex) {
        var errorMessage = "Error occurred while saving tier (Cause:" + ex.message + ")";
        log.error(errorMessage);
        return {
            error: true,
            message: errorMessage
        };
    }
};

var constructTierObject  = function(tierName, requestCount, unitTime, description, stopOnQuotaReached, tierPlan, attributes){
    var Tier = Packages.org.wso2.carbon.apimgt.api.model.Tier;
    var Map = Packages.java.util.HashMap;

    var tier = new Tier(tierName);
    tier.setDescription(description);
    tier.setDisplayName(tierName);
    tier.setRequestCount(requestCount);
    tier.setUnitTime(unitTime*1000);
    tier.setTierPlan(tierPlan);

// We only need to check whether it is false since the default value for the stopOnQuotaReach is "true".
    if(stopOnQuotaReached == "false"){
        tier.setStopOnQuotaReached(false);
    }

    var customAttributesMap = new Map();
    for(var i in attributes){
        var attribute = attributes[i];
        customAttributesMap.put(attribute.name, attribute.value);
    }
    tier.setTierAttributes(customAttributesMap);

    return tier;
}

var updateTierPermissions = function (tierPermission) {
    var result,  length,log = new Log(),
            list = [],
            provider = jagg.module("manager").getAPIProviderObj();
    try {
        result = provider.updateTierPermissions(tierPermission);
        if (log.isDebugEnabled()) {
            log.debug("updateSubscription : " + stringify(apis));
        }

        return {
            error:false,
            update:result
        };
    } catch (e) {
        log.error(e.message);
        return {
            error:e,
            message:e.message.split(":")[1]
        };
    }
};

%>
