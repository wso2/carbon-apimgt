<%
var log = new Log();

var deleteSubscriptionPolicy = function (policyName) {
    try{
        var provider = jagg.getUser().username;
        var APIProviderImpl = Packages.org.wso2.carbon.apimgt.impl.APIProviderImpl;
        var apiProvider = new APIProviderImpl(provider);
	var hasSubscription = apiProvider.hasAttachments(provider,policyName, "sub");

        if(hasSubscription){
            return {
                error: true,
                message: "Policy already has subscriptions "
            };
        }else{
           var subscriptionPolicies = apiProvider.deletePolicy(provider, "sub", policyName);
            return {
                error: false,
                subscriptionPolicies: subscriptionPolicies
            }; 
        }

    } catch (ex) {
        var errorMessage = "Error occurred while deleting policy: " + policyName + " (Cause:" + ex.message + ")";
        log.error(errorMessage);
        return {
            error: true,
            message: errorMessage
        };
    }
};

var getAllSubscriptionPolicies = function () {
    try{
        var provider = jagg.getUser().username;
        var APIProviderImpl = Packages.org.wso2.carbon.apimgt.impl.APIProviderImpl;
        var apiProvider = new APIProviderImpl(provider);

        var subscriptionPolicies = apiProvider.getPolicies(provider,"sub");
        return {
            error: false,
            subscriptionPolicies: subscriptionPolicies
        };
    } catch (ex) {
        var errorMessage = "Error occurred while getting all Subscription policies (Cause:" + ex.message + ")";
        log.error(errorMessage);
        return {
            error: true,
            message: errorMessage
        };
    }
};

var getThrottleTierPermissions = function () {
    var mod, result, obj,log = new Log(),
    provider = jagg.module("manager").getAPIProviderObj();
    try {
        result = provider.getThrottleTierPermissions();
        var arr =result.throttleTierPermissions;
        return {
            error:false,
            tierPermissions:result
        };
    } catch (e) {
        log.error(e.message);
        return {
            error:e,
            message:e.message.split(":")[1]
        };
    }
};
%>
