<%
/*
 * Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

    include("/jagg/jagg.jag");
    include("/site/pages/header.jag");
    (function () {
        var user = jagg.getUser();
        if (!user){
            response.sendRedirect(getRedirectPathForNonAuthenticatedUser());
            return;
        }

        var uri = request.getRequestURI();
        var uriMatcher = new URIMatcher(String(uri));
        var log = new Log("log-analyzer-proxy.jag");
        var serviceInvokers = session.get("serviceInvokers");

        if(serviceInvokers == null) {
            serviceInvokers = require("./js/backend-service-invoker.js").backendServiceInvoker;
            session.put("serviceInvokers", serviceInvokers);
        }

        var constants = require("./js/constants.js");
        var analyticsConfig = Packages.org.wso2.carbon.apimgt.impl.APIManagerAnalyticsConfiguration;
        var analyticsConfigInstance = analyticsConfig.getInstance();
        var method = request.getMethod();
        var targetURL = analyticsConfigInstance.getDasServerUrl() + "/portal/controllers/apis/analytics.jag";
        var payload = request.getContent();
        if(method == undefined){
            log.error("Method Undefined. Target URL: " + targetURL);
            return;
        }
        targetURL = targetURL+"?"+request.getQueryString();
        try{
            switch (method) {
                case constants.HTTP_GET:
                    var responseData = serviceInvokers.XMLHttp.get(
                        targetURL, function (responsePayload) {
                            response.status = 200;
                            response.content =  responsePayload;
                        },
                        function (responsePayload) {
                            response.status = responsePayload.status;
                            response.content =  responsePayload.responseText;
                        });
                break;
                case constants.HTTP_POST:
                    var responseData = serviceInvokers.XMLHttp.post(
                        targetURL, payload, function (responsePayload) {
                            response.status = 200;
                            response.content =  responsePayload;
                        },
                        function (responsePayload) {
                            response.status = responsePayload.status;
                            response.content =  responsePayload.responseText;
                        });
                break;
                case constants.HTTP_PUT:
                    var responseData = serviceInvokers.XMLHttp.put(
                        targetURL, payload, function (responsePayload) {
                            response.status = 200;
                            response.content =  responsePayload;
                        },
                        function (responsePayload) {
                            response.status = responsePayload.status;
                            response.content =  responsePayload.responseText;
                        });
                break;
                case constants.HTTP_DELETE:
                    var responseData = serviceInvokers.XMLHttp.delete(
                        targetURL, function (responsePayload) {
                            response.status = 200;
                            response.content =  responsePayload;
                        },
                        function (responsePayload) {
                            response.status = responsePayload.status;
                            response.content =  responsePayload.responseText;
                        });
                break;
            }
        } catch (e) {
            log.error("Exception occurred while accessing sevices", e);
        }
    }());
%>
