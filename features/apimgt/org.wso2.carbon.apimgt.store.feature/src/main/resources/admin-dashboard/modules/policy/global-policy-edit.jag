<%
var log = new Log();
var i18n = require("i18n");
var localeResourcesBasePath = "/site/conf/locales/jaggery/";
i18n.init(request, localeResourcesBasePath);

var saveGlobalPolicy = function (action, policyName, description, siddhiQuery, keyTemplate) {
    try {
        var provider = jagg.getUser().username;
        var APIProviderImpl = Packages.org.wso2.carbon.apimgt.impl.APIProviderImpl;
        var apiProvider = new APIProviderImpl(provider);

        var policy = constructPolicyObject(provider, policyName, description, siddhiQuery, keyTemplate);

        if (action == "add") {
            apiProvider.addPolicy(policy);
        } else if (action == "update") {
            apiProvider.updatePolicy(policy);
        }
        log.info(policy.toString());
        return {
            error: false
        };
    }catch (ex) {
        var errorMessage = i18n.localize("globalPolicyErrorMessage")+ ex.message + ")";
        log.error(errorMessage);

        if(errorMessage.indexOf("Invalid Execution Plan") > -1){
            errorMessage = i18n.localize("invalidExecutionPlan")
        }else if(errorMessage.indexOf("Key Template Already Exis") > -1){
            errorMessage = i18n.localize("keyTemplateAlreadyExist");
        }

        return {
            error: true,
            message: errorMessage
        };
    }
};

var constructPolicyObject = function (userName, policyName, description, siddhiQuery, keyTemplate) {
    var GlobalPolicy = Packages.org.wso2.carbon.apimgt.api.model.policy.GlobalPolicy;
    var APIUtil = org.wso2.carbon.apimgt.impl.utils.APIUtil;

    var globalPolicy = new GlobalPolicy(policyName);

    globalPolicy.setPolicyName(policyName);
    globalPolicy.setDescription(description);
    globalPolicy.setKeyTemplate(keyTemplate);
    var tenantId = APIUtil.getTenantId(userName);
    globalPolicy.setTenantId(tenantId);
    var MultitenantUtils = Packages.org.wso2.carbon.utils.multitenancy.MultitenantUtils;
    var tenantDomain = MultitenantUtils.getTenantDomain(userName);
    globalPolicy.setTenantDomain(tenantDomain);
    globalPolicy.setSiddhiQuery(siddhiQuery);

    return globalPolicy;

}
%>
