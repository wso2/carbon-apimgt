<%
var log = new Log();

var saveAppPolicy = function (action, policyName, description, defaultQuotaPolicy, defaultRequestCount, defaultBandwidth,
                             defaultBandwidthUnit, defaultUnitTime, defaultTimeUnit, stopOnQuotaReach, tierPlan, attributes) {
    try {
        var provider = jagg.getUser().username;
        var APIProviderImpl = Packages.org.wso2.carbon.apimgt.impl.APIProviderImpl;
        var apiProvider = new APIProviderImpl(provider);

        var policy = constructPolicyObject(provider, policyName, description, defaultQuotaPolicy, defaultRequestCount,
                defaultBandwidth, defaultBandwidthUnit, defaultUnitTime, defaultTimeUnit);

        if (action == "add") {
            apiProvider.addPolicy(policy);
        } else if (action == "update") {
            apiProvider.updatePolicy(policy);
        }
        log.info(policy.toString());
        return {
            error: false
        };
    } catch (ex) {
        var errorMessage = "Error occurred while saving policy (Cause:" + ex.message + ")";
        log.error(errorMessage);
        return {
            error: true,
            message: errorMessage
        };
    }
};

var constructPolicyObject = function (userName, policyName, description, defaultQuotaPolicy, defaultRequestCount, defaultBandwidth,
                                      defaultBandwidthUnit, defaultUnitTime, defaultTimeUnit) {
    var ApplicationPolicy = Packages.org.wso2.carbon.apimgt.api.model.policy.ApplicationPolicy;
    var QuotaPolicy = Packages.org.wso2.carbon.apimgt.api.model.policy.QuotaPolicy;
    var RequestCountLimit = Packages.org.wso2.carbon.apimgt.api.model.policy.RequestCountLimit;
    var BandwidthLimit = Packages.org.wso2.carbon.apimgt.api.model.policy.BandwidthLimit;
    var APIUtil = org.wso2.carbon.apimgt.impl.utils.APIUtil;

    var appPolicy = new ApplicationPolicy(policyName);

    appPolicy.setPolicyName(policyName);
    appPolicy.setDescription(description);

    var tenantId = APIUtil.getTenantId(userName);
    appPolicy.setTenantId(tenantId);

    var MultitenantUtils = Packages.org.wso2.carbon.utils.multitenancy.MultitenantUtils;
    var tenantDomain = MultitenantUtils.getTenantDomain(userName);
    appPolicy.setTenantDomain(tenantDomain);

    var default_quotaPolicy = new QuotaPolicy();

    if (defaultQuotaPolicy == "requestCount") {
        var requestCountLimit = new RequestCountLimit();
        requestCountLimit.setRequestCount(defaultRequestCount);
        requestCountLimit.setUnitTime(defaultUnitTime);
        requestCountLimit.setTimeUnit(defaultTimeUnit);
        default_quotaPolicy.setType(defaultQuotaPolicy);
        default_quotaPolicy.setLimit(requestCountLimit);
    }
    else if (defaultQuotaPolicy == "bandwidthVolume") {
        var bandwidthLimit = new BandwidthLimit();
        bandwidthLimit.setDataAmount(defaultBandwidth);
        bandwidthLimit.setDataUnit(defaultBandwidthUnit);
        bandwidthLimit.setUnitTime(defaultUnitTime);
        bandwidthLimit.setTimeUnit(defaultTimeUnit);
        default_quotaPolicy.setType(defaultQuotaPolicy);
        default_quotaPolicy.setLimit(bandwidthLimit);
    }

    appPolicy.setDefaultQuotaPolicy(default_quotaPolicy);

    return appPolicy;
}
%>
