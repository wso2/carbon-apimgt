<%
var log = new Log();

var getAllDomainsInfo = function () {
        try {
        var carbon = require('carbon');
        var process = require('process');
        var realmConfiguration = new org.wso2.carbon.user.core.config.RealmConfigXMLProcessor().
                buildRealmConfigurationFromFile();
        var username = "admin";
        var password = "admin";

var carbon = require('carbon'),
        conf = carbon.server.loadConfig('api-manager.xml'),
        dasUrl = conf.*::['Analytics'].*::['DASRestApiURL'].text();
        username = conf.*::['Analytics'].*::['DASUsername'].text();
        password = conf.*::['Analytics'].*::['DASPassword'].text();


          var stub = new org.wso2.carbon.event.execution.manager.stub.ExecutionManagerAdminServiceStub(dasUrl + "/services/ExecutionManagerAdminService");

        var client = stub._getServiceClient();
        var options = client.getOptions();
        var authenticator = new org.apache.axis2.transport.http.HttpTransportProperties.Authenticator();
        authenticator.setUsername(username);
        authenticator.setPassword(password);
        authenticator.setPreemptiveAuthentication(true);
        options.setProperty(org.apache.axis2.transport.http.HTTPConstants.AUTHENTICATE, authenticator);
        client.setOptions(options);
        var domainDTOs = stub.getAllDomainsInfo();
        return domainDTOs;
    } catch (ex) {
        var message = "Error occurred while Retrieving Information related to Domains (Cause:" + ex.message + ")";
        log.error(message);
        return {
            error: true,
            message: message
        };
    }
};

%>
