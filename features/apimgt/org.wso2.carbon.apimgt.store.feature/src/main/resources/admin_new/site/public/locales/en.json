{
  "Admin.Throttling.Application.Throttling.Policy.add.general.details": "General Details",
  "Admin.Throttling.Application.Throttling.Policy.add.quota.limits.details": "Quota Limits",
  "Admin.Throttling.Application.Throttling.policy.table.header.name": "Name",
  "Admin.Throttling.Application.Throttling.policy.table.header.quota": "Quota",
  "Admin.Throttling.Application.Throttling.policy.table.header.quota.policy": "Quota Policy",
  "Admin.Throttling.Application.Throttling.policy.table.header.unit.time": "Unit Time",
  "Admin.Throttling.Blacklist.Throttling.Policy.add.condition.type": "Condition Type",
  "Admin.Throttling.Blacklist.Throttling.policy.table.header.condition.id": "Condition ID",
  "Admin.Throttling.Blacklist.Throttling.policy.table.header.condition.type": "Condition Type",
  "Admin.Throttling.Blacklist.policy.add.invert.condition": "Invert Condition:",
  "Admin.Throttling.Custom.Throttling.policy.table.header.description": "Description",
  "Admin.Throttling.Custom.Throttling.policy.table.header.key.template": "Key Template",
  "Admin.Throttling.Custom.Throttling.policy.table.header.name": "Name",
  "Admin.Throttling.Custom.policy.add.siddhi.query": "Siddhi Query:",
  "Admin.Throttling.Custom.policy.add.siddhi.query.description": "The following query will allow 5 requests per minute for an Admin user.",
  "Admin.Throttling.Custom.policy.add.siddhi.query.key.template": "Key Template : $userId",
  "AdminPages.Addons.InlineProgress.message": "Loading...",
  "AdminPages.Addons.ListBase.nodata.message": "No items yet",
  "AdminPages.Addons.ListBase.reload": "Reload",
  "AdminPages.ApiCategories.AddEdit.form.add.successful": "API Category added successfully",
  "AdminPages.ApiCategories.AddEdit.form.info": "Provide a name and a short description to create a new API category",
  "AdminPages.ApiCategories.AddEdit.form.name": "Name",
  "AdminPages.ApiCategories.Delete.form.delete.successful": "API Category deleted successfully",
  "AdminPages.ApiCategories.List.addButtonProps.title": "Add API Category",
  "AdminPages.ApiCategories.List.addButtonProps.triggerButtonText": "Add API Category",
  "AdminPages.ApiCategories.List.empty.content.apicategories": "You can use API categories to group APIs. In previous versions of WSO2 API Manager, the process of grouping APIs was carried out by using tag wise groups. Unlike tag wise grouping API categories do not use a naming convention. Therefore, the admin does not need to take into consideration any naming conventions when using API category based grouping.",
  "AdminPages.ApiCategories.List.empty.title.apicategories": "API Categories",
  "AdminPages.ApiCategories.List.help.link.one": "API Category based Grouping",
  "AdminPages.ApiCategories.List.search.default": "Search by API Category name",
  "AdminPages.ApiCategories.List.title.apicategories": "API Categories",
  "AdminPages.ApiCategories.table.header.category.description": "Description",
  "AdminPages.ApiCategories.table.header.category.name": "Category Name",
  "AdminPages.ApiCategories.table.header.category.number.of.apis": "Number of APIs",
  "AdminPages.Microgateways.AddEdit.form.info": "To subscribe to this website, please enter youremail address here. We will send updatesoccasionally.",
  "AdminPages.Microgateways.AddEdit.form.label": "Label",
  "AdminPages.Microgateways.List.addButtonProps.title": "Add Microgateway",
  "AdminPages.Microgateways.List.addButtonProps.triggerButtonText": "Add Microgateway",
  "AdminPages.Microgateways.List.empty.content.microgateways": "It is possible to create a Microgateway distribution for a group of APIs. In order to group APIs, a label needs to be created and attached to the APIs that need to be in a single group.",
  "AdminPages.Microgateways.List.empty.title.microgateways": "Microgateways",
  "AdminPages.Microgateways.List.help.link.one": "Create a Microgateway label",
  "AdminPages.Microgateways.List.help.link.three": "View the Microgateway labels",
  "AdminPages.Microgateways.List.help.link.two": "Assign the Microgateway label to an API",
  "AdminPages.Microgateways.List.search.default": "Search by Microgateway label",
  "AdminPages.Microgateways.List.title.microgateways": "Microgateways",
  "Apis.Shared.AdminRootErrorBoundary.refresh": "Refresh",
  "Apis.Shared.AdminRootErrorBoundary.refresh.or.try.again.message": "You may refresh the page now or try again later",
  "Apis.Shared.AdminRootErrorBoundary.something.went.wrong.while.rendering.button": "Something went wrong while rendering the",
  "Apis.Shared.AdminRootErrorBoundary.something.went.wrong.while.rendering.heading": "Something went wrong while rendering the",
  "Apis.Shared.AppErrorBoundary.something.went.wrong": "Something went wrong",
  "Apis.Shared.ConfirmDialog.are.you.sure": "Are you sure?",
  "Apis.Shared.ConfirmDialog.cancel": "Cancel",
  "Apis.Shared.ConfirmDialog.ok": "OK",
  "Apis.Shared.ConfirmDialog.please.confirm": "Please Confirm",
  "Apis.Shared.RedirectToLogin.you.will.be.redirected.to": "You will be redirected to {page}",
  "Base.Errors.APINotfound.header": "404 API Not Found!",
  "Base.Errors.APINotfound.message": "Can't find an API associate with the given API ID",
  "Base.Errors.ResourceNotFound.api.list": "API List",
  "Base.Errors.ResourceNotFound.api.product.list": "API Product List",
  "Base.Errors.ResourceNotFound.more.links": "You may check the links below",
  "Base.Errors.ResourceNotfound.default_body": "The page you are looking for is not available",
  "Base.Errors.ResourceNotfound.default_tittle": "Page Not Found",
  "Base.Footer.Footer.product_details": "WSO2 API-M v3.1.0 | Â© 2020 WSO2 Inc",
  "Base.Header.avatar.Avatar.logout": "Logout",
  "Base.RouteMenuMapping.advanced.throttling.policies": "Advanced Policies",
  "Base.RouteMenuMapping.api.categories": "API Categories",
  "Base.RouteMenuMapping.application.creation": "Application Creation",
  "Base.RouteMenuMapping.application.throttling.policies": "Application Policies",
  "Base.RouteMenuMapping.applications": "Applications",
  "Base.RouteMenuMapping.blacklisted.items": "Blacklist Policies",
  "Base.RouteMenuMapping.bot.detection": "Bot Detection",
  "Base.RouteMenuMapping.custom.throttling.policies": "Custom Policies",
  "Base.RouteMenuMapping.dashboard": "Admin Dashboard",
  "Base.RouteMenuMapping.devportal.theme": "Devportal Theme",
  "Base.RouteMenuMapping.microgateways": "Microgateways",
  "Base.RouteMenuMapping.scope.mapping": "Scope Mapping",
  "Base.RouteMenuMapping.settings": "Settings",
  "Base.RouteMenuMapping.subscription.creation": "Subscription Creation",
  "Base.RouteMenuMapping.subscription.throttling.policies": "Subscription Policies",
  "Base.RouteMenuMapping.tasks": "Tasks",
  "Base.RouteMenuMapping.throttling.policies": "Rate Limiting Policies",
  "Base.RouteMenuMapping.user.creation": "User Creation",
  "LoginDenied.logout": "Logout",
  "LoginDenied.message": "The server could not verify that you are authorized to access the requested resource.",
  "LoginDenied.retry": "Retry",
  "LoginDenied.title": "Error 403 : Forbidden",
  "Throttling.Application.Policy..List.search.default": "Search by Application Policy name",
  "Throttling.Application.Policy.List.addButtonProps.title": "Add Policy",
  "Throttling.Application.Policy.List.addButtonProps.triggerButtonText": "Add Policy",
  "Throttling.Application.Policy.List.empty.content.application.policies": "Application-level throttling policies are applicable per access token generated for an application.",
  "Throttling.Application.Policy.List.empty.title.application.policies": "Application Policies",
  "Throttling.Application.Policy.List.help.link.one": "Create an Application Rate Limiting Policy",
  "Throttling.Application.Policy.List.help.link.two": "Setting an Application Rate Limiting Policy",
  "Throttling.Application.Policy.policy.add.success": "Custom Policy added successfully.",
  "Throttling.Application.Policy.policy.delete.error": "Application Rate Limiting Policy could not be deleted.",
  "Throttling.Application.Policy.policy.delete.success": "Application Rate Limiting Policy successfully deleted.",
  "Throttling.Application.Policy.policy.dialog.delete.error": "Application Rate Limiting Policy will be deleted.",
  "Throttling.Application.Policy.policy.edit.success": "Application Rate Limiting Policy edited successfully.",
  "Throttling.Application.Policy.search.default": "Application Rate Limiting Policies",
  "Throttling.Blacklist.Policy.List.addButtonProps.title": "Select Item to Blacklist",
  "Throttling.Blacklist.Policy.List.addButtonProps.triggerButtonText": "Add Policy",
  "Throttling.Blacklist.Policy.List.empty.content.blacklist.policies and abuse by": "By blacklisting requests, you can protect servers from common attacks users.",
  "Throttling.Blacklist.Policy.List.empty.title.blacklist.policies": "Blacklist Policies",
  "Throttling.Blacklist.Policy.List.help.link.one": "Blacklisting requests",
  "Throttling.Blacklist.Policy.List.search.default": "Search by Blacklist Policy name",
  "Throttling.Blacklist.Policy.policy.add.success": "Blacklist Policy added successfully.",
  "Throttling.Blacklist.Policy.policy.delete.error": "Blacklist Policy could not be deleted.",
  "Throttling.Blacklist.Policy.policy.delete.success": "Blacklist Policy successfully deleted.",
  "Throttling.Blacklist.Policy.policy.dialog.delete.error": "Blacklist Policy will be deleted.",
  "Throttling.Blacklist.Policy.search.default": "Blacklist Policies",
  "Throttling.Custom.Policy.List.addButtonProps.title": "Define Custom Policy",
  "Throttling.Custom.Policy.List.addButtonProps.triggerButtonText": "Define Policy",
  "Throttling.Custom.Policy.List.empty.content.custom.policies and abuse by": "Custom throttling allows system administrators to define dynamic rules for specific use cases, which are applied globally across all tenants.",
  "Throttling.Custom.Policy.List.empty.title.custom.policies": "Custom Policies",
  "Throttling.Custom.Policy.List.help.link.one": "Custom Throttling Policy",
  "Throttling.Custom.Policy.List.search.default": "Search by Custom Policy name",
  "Throttling.Custom.Policy.policy.delete.error": "Custom Policy could not be deleted.",
  "Throttling.Custom.Policy.policy.delete.success": "Custom Policy successfully deleted.",
  "Throttling.Custom.Policy.policy.dialog.delete.error": "Custom Policy will be deleted.",
  "Throttling.Custom.Policy.search.default": "Custom Rate Limiting Policies",
  "UnexpectedError.logout": "Logout",
  "UnexpectedError.message": "Error occured due to invalid request",
  "UnexpectedError.title": "Internal Server Error",
  "app.components.Shared.Banner.back": "Back"
}
