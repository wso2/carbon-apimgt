<%
jagg.module("subscription", {
    addAPISubscription:function () {
        return jagg.require(jagg.getModulesDir() + "subscription/add.jag").addAPISubscription.apply(this, arguments);
    },
    addAPISubscriptionByAppId:function () {
            return jagg.require(jagg.getModulesDir() + "subscription/add.jag").addAPISubscriptionByAppId.apply(this, arguments);
    },
    addSubscription:function () {
        return jagg.require(jagg.getModulesDir() + "subscription/add.jag").addSubscription.apply(this, arguments);
    },
    removeAPISubscription:function () {
        return jagg.require(jagg.getModulesDir() + "subscription/remove.jag").removeAPISubscription.apply(this, arguments);
    },

    getAllSubscriptions:function () {
        return jagg.require(jagg.getModulesDir() + "subscription/list.jag").getAllSubscriptions.apply(this, arguments);
    },

    getAllScopesOfApplicationSubscription:function () {
        return jagg.require(jagg.getModulesDir() + "subscription/list.jag").getAllScopesOfApplicationSubscription.apply(this, arguments);
    },

    getAllSubscriptionsOfApplication:function () {
        return jagg.require(jagg.getModulesDir() + "subscription/list.jag").getAllSubscriptionsOfApplication.apply(this, arguments);
    },
    getAllSubscriptionsOfApplicationById:function () {
            return jagg.require(jagg.getModulesDir() + "subscription/list.jag").getAllSubscriptionsOfApplicationById.apply(this, arguments);
    },
    cleanUpApplicationRegistration:function () {
        return jagg.require(jagg.getModulesDir() + "subscription/key.jag").cleanUpApplicationRegistration.apply(this, arguments);
    },
    cleanUpApplicationRegistrationByApplicationId:function () {
            return jagg.require(jagg.getModulesDir() + "subscription/key.jag").cleanUpApplicationRegistrationByApplicationId.apply(this, arguments);
    },
    getAPISubscriptions:function () {
        return jagg.require(jagg.getModulesDir() + "subscription/list.jag").getAPISubscriptions.apply(this, arguments);
    },

	getLightWeightAPISubscriptions:function () {
		return jagg.require(jagg.getModulesDir() + "subscription/list.jag").getLightWeightAPISubscriptions.apply(this, arguments);
	},

	getAPISubscriptionsForApplication:function () {
        return jagg.require(jagg.getModulesDir() + "subscription/list.jag").getAPISubscriptionsForApplication.apply(this, arguments);
    },
    getAPISubscriptionsForApplicationById:function () {
            return jagg.require(jagg.getModulesDir() + "subscription/list.jag").getAPISubscriptionsForApplicationById.apply(this, arguments);
    },
    generateAPIKey:function () {
        return jagg.require(jagg.getModulesDir() + "subscription/key.jag").generateAPIKey.apply(this, arguments);
    },
    generateApplicationKey:function () {
        return jagg.require(jagg.getModulesDir() + "subscription/key.jag").generateApplicationKey.apply(this, arguments);
    },
    generateApplicationKeyByApplicationId:function () {
            return jagg.require(jagg.getModulesDir() + "subscription/key.jag").generateApplicationKeyByApplicationId.apply(this, arguments);
    },
    deleteAuthApplication:function () {
        return jagg.require(jagg.getModulesDir() + "subscription/key.jag").deleteAuthApplication.apply(this, arguments);
    },
    updateAuthClient:function () {
        return jagg.require(jagg.getModulesDir() + "subscription/key.jag").updateAuthClient.apply(this, arguments);
    },
    updateAuthClientByAppId:function () {
            return jagg.require(jagg.getModulesDir() + "subscription/key.jag").updateAuthClientByAppId.apply(this, arguments);
    },
    mapExistingOauthClient:function () {
        return jagg.require(jagg.getModulesDir() + "subscription/key.jag").mapExistingOauthClient.apply(this, arguments);
    },
    hasSubscribePermission:function () {
        return jagg.require(jagg.getModulesDir() + "subscription/check-permissions.jag").hasSubscribePermission.apply(this, arguments);
    },
    refreshToken :function () {
        return jagg.require(jagg.getModulesDir() + "subscription/key.jag").refreshToken .apply(this, arguments);
    },
    updateAccessAllowDomains :function () {
        return jagg.require(jagg.getModulesDir() + "subscription/key.jag").updateAccessAllowDomains .apply(this, arguments);
    },
    getApplicationKeysOfApplication :function () {
        return jagg.require(jagg.getModulesDir() + "subscription/list.jag").getApplicationKeysOfApplication.apply(this, arguments);
    }
});
%>