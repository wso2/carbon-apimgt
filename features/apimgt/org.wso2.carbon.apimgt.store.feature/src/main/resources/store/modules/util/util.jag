<%
include("/jagg/jagg.jag");
include("/jagg/constants.jag");

var log = new Log('modules.util.util.jag');
var carbon = require('carbon');
var server = carbon.server;
var multitenancy = carbon.multitenancy;

var username =  session.get("LOGGED_IN_USER");

//method to check if the session has been authenticated
var isSessionAuthenticated = function () {
    var isAuthenticated = false;
    try {
        var cloudConfig = jagg.module("util").getJsonFromFile(CLOUD_MGT_CONFIG_FILE);
        var SSO_NAME = cloudConfig.SSORelyingParty.name;
        var security = require("sso");
        var ssoRelyingParty = new security.SSORelyingParty(SSO_NAME);
        var sessionId = session.getId();
        isAuthenticated = ssoRelyingParty.isSessionAuthenticated(sessionId);
    } catch (e) {
        log.error("Error while retrieving the session :" + e.message);
        log.error(e);
        throw Error(e);
    }
    return isAuthenticated;
};

//Validates if the provided password meets the requirements of the WSO2 Cloud.
function validatePassword (password) {
    if (password != null && password != "") {
        var passwordValidationResult = (PASSWORD_CHARACTER_TYPE_VALIDATION_REGEX.test(password) && PASSWORD_STRENGTH_VALIDATION_REGEX.test(password));
        if (passwordValidationResult) {
            return {
                error: false,
                message: "The provided password is valid",
                status: 200
            };
        } else {
            return {
                error: true,
                message: "The provided password does not meet the basic requirements, Please try again with a valid password",
                status: 500
            };
        }
    } else {
        return {
            error: true,
            message: "Please provide a value for the password field and try again",
            status: 500
        };
    }
}

var getJsonFromFile = function(pathTofile) {
    var cloudConfig = application.get(pathTofile);
       if(cloudConfig==null)  {
        	if(log.isDebugEnabled()){
           		log.debug("Reading Json file : " + pathTofile);
           	}
           try{
               var file = new File(pathTofile);
               file.open("r");
               var data = file.readAll();
               cloudConfig = parse(data);
               file.close();
               application.put(pathTofile,cloudConfig);
           }catch (e) {
               log.error("Error while reading file " + pathTofile + "\n" + e);
               throw "Error while reading file " + pathTofile + "\n" + e;
           }
       }

   	return  cloudConfig;
};

var getUsernameWithTenantDomain = function(username, tenantDomain) {
    return  username + "@" + tenantDomain;
};

%>

