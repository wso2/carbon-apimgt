<%
var log = new Log();

var getUser = function () {
    return session.get("logged.user");
};

var setUser = function (user) {
    session.put("logged.user", user);
};

var checkIfSubscriberRolePresent = function (username) {
    store = jagg.module("manager").getAPIStoreObj();

        try {
            result = store.checkIfSubscriberRoleAttached(username);
            if (log.isDebugEnabled()) {
                log.debug("Checking is user has subscriber role");
            }

            if(!result.error){
                obj = {
                    error:false
                };
                return obj;
            } else {
                obj = {
                    error:true
                };
                return obj;
            }
        } catch (e) {
            log.error(e.message);
            return {
                error:e,
                message:e.message.split("Exception:")[1]
            };
        }
};

var checkIfUserExsits = function (username) {
     store = jagg.module("manager").getAPIStoreObj();
        try {
            if (log.isDebugEnabled()) {
                log.debug("Checking whether user already exists");
            }
            return store.isUserExists(username);
        } catch (e) {
            log.error(e.message);
            //for error
            return true;
        }

};

var updatePasswordWithUserInput = function (userName, newPassword, confirmationKey) {
    log.info("Resetting the password of user [ " + userName + " ]");
    var UserInfoRecoveryClient = Packages.org.wso2.carbon.apimgt.impl.utils.APIUtil.getUserInformationRecoveryClient();

    try {
        var verifyResult = UserInfoRecoveryClient.resetPassword(userName, confirmationKey, newPassword);
        var error = verifyResult.getError();
        if (verifyResult.getVerified()) {
            log.info("Password reset is successful for the user [ " + userName + " ]");
            return {
                error: false,
                status: 200,
                message: "Password reset successful"
            };
        } else {
            log.error(error);
            return {
                error: true,
                status: 404,
                message: "Password reset unsuccessful"
            };
        }
    } catch (e) {
        var errorMsg = "Error while updating password while resetting password \n";
        log.error(errorMsg);
        log.error(e);
        return {
            error: true,
            status: 404,
            message: errorMsg
        };
    }
};
%>