<%
var getAPIDescription = function (api, username) {
    var swaggerString,
    		log = new Log(),
            store = jagg.module("manager").getAPIStoreObj();
	
	try {
		var encode = require('encode');
    		encode = new encode.Encode();
        	var api2 = store.getAPI(api.provider, api.name, api.version, username);

        if (log.isDebugEnabled()) {
            log.debug("getAPI : " + stringify(api));
        }
        var api= api2[0];
        var uriTemplates = api2[1];
        return {
            error:false,
            api:api,
            uriTemplates:uriTemplates,
            message:null
        };
    } catch (e) {
        //log.error(e.message);
        return {
            error:true,
            api:null,
            message:e.message
        };
    }
};

var getTiers = function () {
    var tier,tiers,list=[],log = new Log(),
            provider = jagg.module("manager").getAPIStoreObj();
        var tenant = jagg.getTenantDomain();
        var log = new Log();
    try {
        tiers = provider.getTiers(tenant);
        if (log.isDebugEnabled()) {
            log.debug("getTiers " +  " : " + stringify(tiers));
        }


        return {
            error:false,
            tiers:tiers
        };
    } catch (e) {
        log.error(e.message);
        return {
            error:e,
            tiers:null
        };
    }
};

var getResourceTiers = function () {
    var tiers, log = new Log();
    var tier;
    var tierArray = [];
    var store;
    var i;
    var username;

    try {

        if (user != null) {
            username = user.username;
            store = org.wso2.carbon.apimgt.impl.APIManagerFactory.getInstance().getAPIConsumer(username);
        } else {
            var tenant = jagg.getTenantDomain();
            username = "anonymous";
            store = org.wso2.carbon.apimgt.impl.APIManagerFactory.getInstance().getAPIConsumer();
        }

        var tiers = store.getTiers(org.wso2.carbon.apimgt.impl.APIConstants.TIER_RESOURCE_TYPE, username);
        var tierList = org.wso2.carbon.apimgt.impl.utils.APIUtil.sortTiers(tiers);

        for(i = 0; i < tierList.size(); i++) {
            tier = {};
            tier.tierName = tierList.get(i).getName();
            tier.tierDisplayName = tierList.get(i).getDisplayName();
            tier.tierDescription = tierList.get(i).getDescription() != null ? tierList.get(i).getDescription() : "";
            tier.defaultTier = (i == 0);
            tierArray[i] = tier;
        }

        if (log.isDebugEnabled()) {
            log.debug("getTiers : " + stringify(tierArray));
        }
        return {
            error:false,
            tiers:tierArray
        };
    } catch (e) {
        log.error(e.message);
        return {
            error:e,
            tiers:null
        };
    }
};

var getAPIEndpointURLs = function (api, username) {
    var log = new Log(),
            store = jagg.module("manager").getAPIStoreObj();
	
	try {
		var encode = require('encode');
    		encode = new encode.Encode();
        	var endpointURLs = store.getAPIEndpointURLs(api.provider, api.name, api.version, username);
		        
        if (log.isDebugEnabled()) {
            log.debug("getAPIEndpointURLs : " + stringify(endpointURLs));
        }

        return {
            error:false,
            endpointURLs:endpointURLs
        };
    } catch (e) {
        return {
            error:true,
            api:null,
            message:e.message
        };
    }
};
var getAllPaginatedAPIs = function (tenantDomain, start, end, returnAPITags) {
    var list, i, length, api, result,
            log = new Log(),
            store = jagg.module("manager").getAPIStoreObj();

    try {
        result = store.getAllPaginatedAPIs(tenantDomain,String(start),String(end), returnAPITags);
        if (log.isDebugEnabled()) {
            log.debug("getAllPublishedAPIs : " + stringify(result.apis));
        }

        return {
            error:false,
            result:result
        };
    } catch (e) {
        log.error(e.message);
        return {
            error:e,
            result:null
        };
    }
};
%>
