<%
var login = function (username, password,tenantMode) {
    var result, isSuperTenant, message,
            log = new Log(),
            manager = jagg.module("manager"),
            store = manager.getAPIStoreObj();
    if(tenantMode!='null' && tenantMode!='' && tenantMode!=null){
		var MultitenantUtils = Packages.org.wso2.carbon.utils.multitenancy.MultitenantUtils;
    var userDomain = MultitenantUtils.getTenantDomain(username);
     if(!(tenantMode=='carbon.super' && userDomain == null) && tenantMode!=userDomain){
	    	return {
	            error:true,
	            cookie:null,
	            message:"Authentication failed. "+MultitenantUtils.getTenantAwareUsername(username)+" is not from the tenant domain " + tenantMode
	        };
    	}
    }

    result = store.login(username, password);
    username = result.user;
    if (result.error) {
        if (log.isDebugEnabled()) {
            log.debug("Error while authenticating user : " + username);
        }
        message = result.detail.split('!')[1];
        if (message == null) {
        	message = result.detail;
        }
        return {
            error:result.error,
            cookie:null,
            message:message
        };
    }
    var groupId = store.getGroupIds(stringify(result));
    if(groupId == null || groupId == "null"){
  //   Set group Id to empty string to avoid null value being passed to backend.
    	groupId="";
   }
    session.put("groupId", groupId);
    var subscriber = store.getSubscriber(username);
    if (!subscriber) {
        store.addSubscriber(username, groupId);
        subscriber = store.getSubscriber(username);
    }
    cookie = result.sessionId;
    cookie = cookie.split(';')[0];
    isSuperTenant = result.isSuperTenant;

    return {
	username:result.user,
        error:false,
        cookie:cookie,
        isSuperTenant:isSuperTenant,
        hasPublisherAccess:result.hasPublisherAccess
    };
};

var loginWithSAMLToken = function (token) {
    var site = require("/site/conf/site.json");
    var security =require("sso");
    var ssoRelyingParty = new security.SSORelyingParty(site.ssoConfiguration.issuer);

    var result,
            log = new Log(),
            manager = jagg.module("manager"),
            store = manager.getAPIStoreObj();


    var encodedToken = ssoRelyingParty.xmlEncode(token);
    var xhr = new XMLHttpRequest();
    var endPoint = manager.getHTTPsURL() + "/services/SAML2SSOAuthenticationService";
    xhr.open("POST", endPoint);

    var payload = '<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:sso="http://sso.saml2.authenticator.identity.carbon.wso2.org" xmlns:xsd="http://dto.sso.saml2.authenticator.identity.carbon.wso2.org/xsd"><soap:Header/><soap:Body><sso:login><sso:authDto><xsd:response>'+encodedToken+'</xsd:response></sso:authDto></sso:login></soap:Body></soap:Envelope>';

    xhr.setRequestHeader('SOAPAction','urn:login');
    xhr.setRequestHeader('Content-Type','application/soap+xml');
    xhr.send(payload);
    var cookie = (xhr.getAllResponseHeaders());

    var cookieString = cookie.split(";")[0].split(":")[1];
    var userName = ssoRelyingParty.getSAMLResponseNameId(token);
    var subscriber = store.getSubscriber(userName);
    if (!subscriber) {
        store.addSubscriber(userName);
        subscriber = store.getSubscriber(userName);
    }
    return {
        error:false,
        username:userName,
        cookie:cookieString
    };
};


var logout = function () {
    //TODO : implement logout
    /*session.put("username", null);
     session.put("cookie", null);*/

    return {
        error:false
    };
};
%>
