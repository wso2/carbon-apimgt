<%
jagg.module("user", {

    getUser:function () {
        return jagg.require(jagg.getModulesDir() + "user/user.jag").getUser.apply(this, arguments);
    },

    setUser:function () {
        return jagg.require(jagg.getModulesDir() + "user/user.jag").setUser.apply(this, arguments);
    },

    addUser:function () {
        return jagg.require(jagg.getModulesDir() + "user/add.jag").addUser.apply(this, arguments);
    },

    getUserFields:function () {
        return jagg.require(jagg.getModulesDir() + "user/add.jag").getUserFields.apply(this, arguments);
    },

    login:function () {
        return jagg.require(jagg.getModulesDir() + "user/login.jag").login.apply(this, arguments);
    },

    loginWithSAMLToken:function () {
        return jagg.require(jagg.getModulesDir() + "user/login.jag").loginWithSAMLToken.apply(this, arguments);
    },

    logout:function () {
        return jagg.require(jagg.getModulesDir() + "user/login.jag").logout.apply(this, arguments);
    },
    checkIfSubscriberRolePresent:function () {
        return jagg.require(jagg.getModulesDir() + "user/user.jag").checkIfSubscriberRolePresent.apply(this, arguments);
    },
    checkIfUserExsits:function (username) {
        return jagg.require(jagg.getModulesDir() + "user/user.jag").checkIfUserExsits.apply(this, arguments);
    },
    changePassword:function () {
            return jagg.require(jagg.getModulesDir() + "user/add.jag").changePassword.apply(this, arguments);
    },
    updatePasswordWithUserInput:function (userName, newPassword, confirmationKey) {
        return jagg.require(jagg.getModulesDir() + "user/user.jag").updatePasswordWithUserInput.apply(this, arguments);
    },

});
%>
