<html>
    <body>
    Waiting for responses from identity server and validate response and forward to requested URI.
        <%
(function () {
    include("jagg.jag");
    var site = require("/site/conf/site.json");
    var log = new Log();

    var authorizationCode = request.getParameter("code");
    var state = request.getParameter("state");

    // check for state, if it doesn't match we bail early
    if (session.get("STATE") != state) {
        log.error("STATE does not match. Hence redirecting to error page. Sign-in fails.");
        response.sendRedirect("../error.jag");

        return;
    }

    // create a sso relying party js object
    var security = require("oidc");
    var oidcRelyingParty = new security.OIDCRelyingParty(site.oidcConfiguration.issuer);


    var sessionId = session.getId();
    var requestedURI = session.get("STORE_REDIRECT_URI");

    if (requestedURI == null) {
        log.error("requestedURI value is invalid.");
        requestedURI = site.context;
    }

    // Check OIDC signature valid and set session as a authenticated if success
    var isSignatureValid = oidcRelyingParty.validateOIDCSignature(authorizationCode, session.get("NONCE"), sessionId);

    if (!Boolean(isSignatureValid)) {
        log.error("OIDC signature is verification failed.");
        response.sendRedirect("../error.jag");
        return;
    }


    session.put("showLogin", "false");

    var api = jagg.module("api");
    // var isUserPermitted = api.hasUserPermissions(oidcRelyingParty.getLoggedInUser(sessionId));
    var isUserPermitted = {permitted: true}

    var hasPublisherAccess = api.hasPublisherAccess(oidcRelyingParty.getLoggedInUser(sessionId));
    var oidcUser = oidcRelyingParty.getLoggedInUser(sessionId);

    jagg.setUser({username: oidcUser, cookie: null, hasPublisherAccess: hasPublisherAccess});
    session.put("LOGGED_IN_USER", oidcUser);
    
    // Group ID feature not supported here
    var groupId="";
    session.put("groupId", groupId)

    //First check whether user is having sufficent permissions [create/publish]
    if (!isUserPermitted.permitted) {
        log.warn("User not permitted");
        response.sendRedirect("../site/pages/logout.jag");
    } else {
        var username = oidcRelyingParty.getLoggedInUser(sessionId);
        var manager = jagg.module("manager");
        var store = manager.getAPIStoreObj();
        var subscriber = store.getSubscriber(username);
        if (!subscriber) {
            store.addSubscriber(username, groupId);
            subscriber = store.getSubscriber(username);
        }
        session.put("hasPublisherAccess", hasPublisherAccess);
        response.sendRedirect(requestedURI);
    }

}());
%>
</body>
</html>


