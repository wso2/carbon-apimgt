<html>
    <body>
    Waiting for responses from identity server and validate response and forward to requested URI.
        <%
        (function() {
                include("jagg.jag");
                var i18n = require("i18n");
                var localeResourcesBasePath = "/site/conf/locales/jaggery/";
                i18n.init(request, localeResourcesBasePath);
                var site = require("/site/conf/site.json");
                var log = new Log();
                var samlResponse = request.getParameter("SAMLResponse");
                var sessionId = session.getId();
                var samlRequest =request.getParameter("SAMLRequest");
                // create a sso relying party js object
                var security =require("sso");
                var ssoRelyingParty = new security.SSORelyingParty(site.ssoConfiguration.issuer);
                var isLogoutResponse = false;
                var isLogoutRequest =false;

                // it means ssoRelyingParty doesn't have SSO properties from site.json
                if (site.ssoConfiguration.idpInit && (ssoRelyingParty.getProperty("idpInitSSOURL") == null || ssoRelyingParty.getProperty("idpInitSSOURL") == "")) {
                    var keyStorePassword = site.ssoConfiguration.keyStorePassword;
                    var acsURL = site.ssoConfiguration.acsURL;
                    var keyStoreAlias = site.ssoConfiguration.identityAlias;
                    var keyStoreLocation = site.ssoConfiguration.keyStoreName;
                    var signRequests = site.ssoConfiguration.signRequests;
                    var CarbonUtils = Packages.org.wso2.carbon.utils.CarbonUtils;
            
                    if (site.ssoConfiguration.keyStorePassword == null || site.ssoConfiguration.keyStorePassword == "") {
                        site.ssoConfiguration.keyStorePassword = CarbonUtils.getServerConfiguration().getFirstProperty("Security.KeyStore.Password");
                    }
            
                    if (site.ssoConfiguration.identityAlias == null || site.ssoConfiguration.identityAlias == "") {
                        site.ssoConfiguration.identityAlias = CarbonUtils.getServerConfiguration().getFirstProperty("Security.KeyStore.KeyAlias");
                    }
            
                    if (site.ssoConfiguration.keyStoreName == null || site.ssoConfiguration.keyStoreName == "") {
                        site.ssoConfiguration.keyStoreName = CarbonUtils.getServerConfiguration().getFirstProperty("Security.KeyStore.Location");
                    }
            
                    if (site.ssoConfiguration.signRequests == null || site.ssoConfiguration.signRequests == "") {
                        site.ssoConfiguration.signRequests = "false";
                    }
            
                    if (site.ssoConfiguration.nameIdPolicy == null) {
                        site.ssoConfiguration.nameIdPolicy = "";
                    }

                    if (site.ssoConfiguration.loginUserNameAttribute == null) {
                         site.ssoConfiguration.loginUserNameAttribute = "";
                    }
                       
                    ssoRelyingParty.setProperty("idpInitSSOURL", site.ssoConfiguration.idpInitSSOURL);
                    ssoRelyingParty.setProperty("identityProviderURL", site.ssoConfiguration.identityProviderURL);
                    ssoRelyingParty.setProperty("keyStorePassword", String(site.ssoConfiguration.keyStorePassword));
                    ssoRelyingParty.setProperty("identityAlias", String(site.ssoConfiguration.identityAlias));
                    ssoRelyingParty.setProperty("keyStoreName", String(site.ssoConfiguration.keyStoreName));
                    ssoRelyingParty.setProperty("signRequests", String(site.ssoConfiguration.signRequests));
                    ssoRelyingParty.setProperty("nameIdPolicy", site.ssoConfiguration.nameIdPolicy);
                    ssoRelyingParty.setProperty("assertionEncryptionEnabled", site.ssoConfiguration.assertionEncryptionEnabled);
                    ssoRelyingParty.setProperty("loginUserNameAttribute", site.ssoConfiguration.loginUserNameAttribute);
                }

                var isAsssertionEncryptionEnabled  = site.ssoConfiguration.assertionEncryptionEnabled;
                // if saml response is not a log out response
                if(samlResponse!=null){
                    isLogoutResponse =ssoRelyingParty.isLogoutResponse(samlResponse);
                    if(!Boolean(isLogoutResponse)) {
                    // relay state value should be a valid value, this value is mapped with request uri.
                        var relayState = request.getParameter("RelayState");

                        var requestedURI;
                        if (site.ssoConfiguration.idpInit == "true" && relayState == null) {
                            // means IDP initiated flow with no relay state, redirect to home
                            requestedURI = jagg.getHttpsUrl("/");
                        } else {
                            requestedURI =  ssoRelyingParty.getRelayStateProperty(relayState);
                        }

                        if(  requestedURI==null){
                            log.error("Relaystate value is invalid.");
                            response.sendRedirect("../site/pages/error-pages/401.html");
                            return;
                        }

                        if(site.ssoConfiguration.passive == "true") {
                            var isPassiveAuthRes = ssoRelyingParty.isPassiveAuthResponse(samlResponse);
                            if(Boolean(isPassiveAuthRes))  {
                                session.put("hasTriedSSO", true);
                                response.sendRedirect(requestedURI);
                                return;
                            }
                        }
                         //Validate the saml response schema-check the number of response elements is 1 and check the number of assertions
                         //is equal to 1  and check the assertion validity period.
                         var isResponseValid = ssoRelyingParty.validateSAMLResponseSchema(samlResponse);
                         if (!Boolean(isResponseValid)) {
                             log.error("SAML response schema verification is failed.");
                             response.sendRedirect("../site/pages/error-pages/401.html");
                             return;
                         }
                        var MultitenantConstants = Packages.org.wso2.carbon.utils.multitenancy.MultitenantConstants;
                        var MultitenantUtils = Packages.org.wso2.carbon.utils.multitenancy.MultitenantUtils;
                        // validating the assertion validity period
                        if(site.ssoConfiguration.verifyAssertionValidityPeriod === 'true'){
                        var timestampSkew=site.ssoConfiguration.timestampSkewInSeconds;
                        if(timestampSkew==undefined){
                        timestampSkew="300";
                        }
                        ssoRelyingParty.setProperty("timestampSkewInSeconds", timestampSkew);
                        var isAssertionValidityPeriodValid = ssoRelyingParty.validateAssertionValidityPeriod(samlResponse);
                        if (!Boolean(isAssertionValidityPeriodValid)) {
                        log.error("SAML response assertion validity period verification is failed.");
                        response.sendRedirect("../site/pages/error-pages/401.html");
                        return;
                        }
                        }

                        // validating the audience restrictions
                       var isAudienceRestrictionEnabled=site.ssoConfiguration.audienceRestrictionsEnabled;
                       if(isAudienceRestrictionEnabled === 'true'){
                       var isAudienceRestrictionsValid = ssoRelyingParty.validateAudienceRestrictions(samlResponse);
                       if (!Boolean(isAudienceRestrictionsValid)) {
                       log.error("SAML response audience restrictions verification is failed.");
                       response.sendRedirect("../site/pages/error-pages/401.html");
                       return;
                       }
                       }
                        var fullUserName = ssoRelyingParty.getSAMLResponseNameId(samlResponse);
                        var domainName = null
                        if (fullUserName != null){
                            domainName = MultitenantUtils.getTenantDomain(fullUserName);
                        }

                        // validating the signature
                        if(site.ssoConfiguration.responseSigningEnabled === 'true'){
                                if (MultitenantConstants.SUPER_TENANT_DOMAIN_NAME !== domainName) {
                                    jagg.module("manager").loadTenantRegistry(String(domainName));
                                }

                            var isSignatureValid =ssoRelyingParty.validateSignature(samlResponse);
                            if(!Boolean(isSignatureValid)){
                                log.error("SAML response signature is verification failed.");
                                response.sendRedirect("../site/pages/error-pages/401.html");
                                return;
                            }
                        }
                         // validating the saml assertion signature
                         if(site.ssoConfiguration.assertionSigningEnabled === 'true'){
                         if (MultitenantConstants.SUPER_TENANT_DOMAIN_NAME !== domainName) {
                             jagg.module("manager").loadTenantRegistry(String(domainName));
                         }
                         var isAssertionSignatureValid = ssoRelyingParty.validateAssertionSignature(samlResponse);
                         if (!Boolean(isAssertionSignatureValid)) {
                              log.error("SAML assertion signature is verification failed.");
                              response.sendRedirect("../site/pages/error-pages/401.html");
                              return;
                         }
                         }


                        ssoRelyingParty.setSessionAuthenticated(sessionId, samlResponse, session);
                        ssoRelyingParty.addSession(session);
                        session.put("showLogin", "false");
                        var api = jagg.module("api");

                        //update permission cache before validate user
                        api.updatePermissionCache(ssoRelyingParty.getLoggedInUser(sessionId));

                        var isUserPermitted=api.hasUserPermissions(ssoRelyingParty.getLoggedInUser(sessionId));
                        var hasPublisherAccess=api.hasPublisherAccess(ssoRelyingParty.getLoggedInUser(sessionId));
                        var showURL=false;
                        if(hasPublisherAccess){
                        showURL=hasPublisherAccess.permitted;
                        }

                        //First check whether user is having sufficent permissions [create/publish]
                         if(!isUserPermitted.permitted ){
        %>
        <script src="../site/themes/wso2/libs/jquery_1.11.0/jquery-1.11.3.min.js"></script>
        <script src="../site/themes/wso2/libs/bootstrap_3.3.5/js/bootstrap.js"></script>
        <link rel="stylesheet" href="../site/themes/wso2/libs/bootstrap_3.3.5/css/bootstrap.css">
        <style>
        </style>

        <script>

        $(document).ready(function(){
             $('#infoModal').modal({
                backdrop: 'static',
                keyboard: false
            })
        });

        function redirectFunction() {
            window.location = '<%=requestedURI%>';
        }
        </script>

        <div class="modal fade" id="infoModal" role="dialog">
            <div class="modal-dialog">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title"><%=i18n.localize("403: User Not Permitted")%></h4>
                    </div>
                    <div class="modal-body">
                        <p><%=i18n.localize("User is not permitted to login to store.")%></p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal" onclick="redirectFunction()">
                        <%=i18n.localize("Return to public store")%></button>
                    </div>
                </div>
            </div>
        </div>

        <%

                         } else {
                             jagg.setUser({username:ssoRelyingParty.getLoggedInUser(sessionId), cookie:null, hasPublisherAccess:showURL});
                             sessionId = session.getId();
                             ssoRelyingParty.setSessionAuthenticated(sessionId, samlResponse, session);
                             ssoRelyingParty.addSession(session);
                             session.put("showLogin", "false");
                             session.put("LOGGED_IN_USER",ssoRelyingParty.getLoggedInUser(sessionId));

			            var username = ssoRelyingParty.getLoggedInUser(sessionId);
			            var manager = jagg.module("manager");
          		        var  store = manager.getAPIStoreObj();
                        var decodedSamlReponse = ssoRelyingParty.decode(samlResponse);
                        var groupIdArray = store.getGroupIds(decodedSamlReponse);
                       //Store and empty string instead of null if no group Id is found. This is done so that when checking for a string array
                       //the null value returned would not cause any issue.
                         var groupId = "";
                         if(groupIdArray != null && groupIdArray.length != 0){
                             var length = groupIdArray.length;
                             for (i = 0; i < length; i++) {
                                 if (groupIdArray[i] != null) {
                                     if (i == (length - 1)) {
                                         groupId = groupId + groupIdArray[i].toString();
                                     } else {
                                         groupId = groupId + groupIdArray[i].toString() + ",";
                                     }
                                 }
                             }
                         }
                         if(log.isDebugEnabled()){
                             log.debug("Setting Group ID :-" + groupId);
                         }
                         if(groupId == null || groupId == "null"){
                             //   Set group Id to empty string to avoid null value being passed to backend.
                             groupId="";
                         }
                         session.put("groupId", groupId);
			            var subscriber = store.getSubscriber(username);
    			        if (!subscriber) {
        			        store.addSubscriber(username, groupId);
        			        subscriber = store.getSubscriber(username);
    			        }
                        session.put("LOGGED_IN_USER",ssoRelyingParty.getLoggedInUser(sessionId));
						session.put("hasPublisherAccess",showURL);
                        if (MultitenantConstants.SUPER_TENANT_DOMAIN_NAME !== domainName) {
                            jagg.module("manager").loadTenantAxisConfiguration(String(domainName));
                        }
                        response.sendRedirect(requestedURI);
                        return;
                   }
                }else{
                        // if the saml response is log out request from IDP, we log out from web app.
                        ssoRelyingParty.invalidateSessionBySessionId(sessionId);
                        response.sendRedirect("../");
                        return;
                    }

                }

                // if saml request is a log out request, then invalidate session.
                if(samlRequest!=null){
                    isLogoutRequest =ssoRelyingParty.isLogoutRequest(samlRequest);
                    if(Boolean(isLogoutRequest))  {
                        ssoRelyingParty.invalidateSessionBySAMLResponse(samlRequest);
                    }
                }



                }());
  %>
</body>
</html>
