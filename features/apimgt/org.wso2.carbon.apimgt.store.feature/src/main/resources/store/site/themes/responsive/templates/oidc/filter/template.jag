<% jagg.template("oidc/filter", function(inputs, outputs, jagg) { %>
<%
    var site = require("/site/conf/site.json");

    var security =require("oidc");

	var ssoRelyingParty = new security.OIDCRelyingParty(site.oidcConfiguration.issuer);
	var sessionId = session.getId();
	var isAuthenticated = ssoRelyingParty.isSessionAuthenticated(sessionId);

    // this value comes back in the id token and is checked there
    var nonce = ssoRelyingParty.createNonce();

    // this value comes back in the auth code response
    var state = ssoRelyingParty.createState();

	var requestURI;
	var requestedPage = request.getParameter("requestedPage");

    if (requestedPage != null) {
        requestURI = requestedPage;
    } else {
        requestURI = request.getRequestURI();
        if (request.getQueryString() != null) {
            requestURI = requestURI + '?' + request.getQueryString();
        }
    }

    session.put("NONCE", nonce);
    session.put("STATE", state);
    session.put("STORE_REDIRECT_URI", requestURI)

	var checkSSO = true;

	if(requestURI.indexOf("register.jag") != -1) {
		checkSSO = false;
	}else if(requestURI.indexOf("confirmemail.jag") != -1) {
		checkSSO = false;
	}

	if (checkSSO && !Boolean(isAuthenticated)) {

	    ssoRelyingParty.setProperty("identityProviderUri", site.oidcConfiguration.identityProviderURI);
	    ssoRelyingParty.setProperty("authorizationEndpointUri", site.oidcConfiguration.authorizationEndpointURI);
	    ssoRelyingParty.setProperty("tokenEndpointURI", site.oidcConfiguration.tokenEndpointURI);
	    ssoRelyingParty.setProperty("userInfoURI", site.oidcConfiguration.userInfoURI);
	    ssoRelyingParty.setProperty("jwksURI", site.oidcConfiguration.jwksURI);

        ssoRelyingParty.setProperty("client_id", site.oidcConfiguration.clientConfiguration.clientId);
        ssoRelyingParty.setProperty("client_secret", site.oidcConfiguration.clientConfiguration.clientSecret);
	    ssoRelyingParty.setProperty("response_type", site.oidcConfiguration.clientConfiguration.responseType);
	    ssoRelyingParty.setProperty("authorization_type", site.oidcConfiguration.clientConfiguration.authorizationType);
	    ssoRelyingParty.setProperty("scope", site.oidcConfiguration.clientConfiguration.scope);
	    ssoRelyingParty.setProperty("redirect_uri", site.oidcConfiguration.clientConfiguration.redirectURI);
	    ssoRelyingParty.setProperty("client_algorithm", site.oidcConfiguration.clientConfiguration.clientAlgorithm);

        var authRequest = ssoRelyingParty.buildAuthRequestUrl(nonce, state);
%>
<div>

	        <p>You are now redirected to Identity. If the

	        redirection fails, please click the post button.</p>

	        <form method="post" action="<%=authRequest%>">

	            <p>



	                <button type="submit">POST</button>

	            </p>

	        </form>

	    </div>

	    <script type = "text/javascript" >

	           document.forms[0].submit();

	    </script>

<%  }  %>
<% }); %>



