<%
response.addHeader('Cache-Control','no-cache, no-store, must-revalidate'); // HTTP 1.1.
response.addHeader('Pragma','no-cache'); // HTTP 1.0.
response.addHeader('Expires','0');
include("/jagg/jagg.jag");
store = jagg.module("manager").getAPIStoreObj();

// Jaggery API for retrieving API Definition

var log = new Log();

(function () {
    response.contentType = "application/json; charset=UTF-8";
    var mod, obj, result, username,
	action = request.getParameter("action"),
    site = require("/site/conf/site.json"),
    msg = require("/site/conf/ui-messages.jag");

    var carbon = require('carbon');

    var uri = request.getRequestURI();
    var callPath = uri.replace("/store/api-docs", "");
    var url;

    if (uri != null) {
        // replacing @ signs for matcher to work with reverse proxies
        if(callPath.indexOf("@") > -1){
            callPath = callPath.replace("@","%40");
        }
        var uriMatcher = new URIMatcher(callPath);
        var providerVal,apiNameVal,apiVersionVal;
        providerVal = apiNameVal = apiVersionVal = "";

        if (uriMatcher.match("/{providerVal}/{apiNameVal}/{apiVersionVal}")) {
            providerVal = uriMatcher.elements().providerVal;
            apiNameVal = uriMatcher.elements().apiNameVal;
            apiVersionVal = uriMatcher.elements().apiVersionVal;
        }else if(request.getParameter("provider") != null) {
            providerVal =request.getParameter("provider");
            apiNameVal = request.getParameter("name");
            apiVersionVal = request.getParameter("version");
            }else{
            print({
                error:true,
                message:msg.error.invalidAction(action)
            });
        }
        var url = request.getRequestURL();
        var host = getLocation(url).host;
        var port = getLocation(url).port;
        var accessProtocol = getLocation(url).protocol;
        var envName = request.getParameter("envName");
        var tenantDomain = "";
        var tenantID = -1234;
	    var isTenantFlowStarted = false;
        var MultitenantUtils = Packages.org.wso2.carbon.utils.multitenancy.MultitenantUtils;
        var APIUtil = Packages.org.wso2.carbon.apimgt.impl.utils.APIUtil;
        if(providerVal.indexOf("@") > -1){
            providerVal = APIUtil.replaceEmailDomain(providerVal);
        }
           tenantDomain = MultitenantUtils.getTenantDomain(APIUtil.replaceEmailDomainBack(providerVal));
            if(tenantDomain){
                tenantID = carbon.server.osgiService('org.wso2.carbon.user.core.service.RealmService').getTenantManager().getTenantId(tenantDomain);
            }

	
        if(providerVal.indexOf("-DOM-") > -1){
             providerVal = providerVal.replace("-DOM-","/");
        }

    	try {
    		//start tenant flow before fetching swagger resource from the registry
    		if (tenantDomain != "" && tenantDomain != 'carbon.super') {
    			var PrivilegedCarbonContext = Packages.org.wso2.carbon.context.PrivilegedCarbonContext;
    			isTenantFlowStarted = true;
    			PrivilegedCarbonContext.startTenantFlow();
    		        PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(tenantDomain, true);
    		}

            var APIUtil = Packages.org.wso2.carbon.apimgt.impl.utils.APIUtil;
            var apiUtil = new APIUtil();
            var swaggerPath = apiUtil.getSwagger20DefinitionFilePath(apiNameVal,apiVersionVal, providerVal);
    		var registry = carbon.server.osgiService('org.wso2.carbon.registry.core.service.RegistryService').getGovernanceUserRegistry("wso2.anonymous.user", tenantID);

    		url = swaggerPath + "swagger.json";

    		    

    		var data = registry.get(url);
    	}finally {
    		if (isTenantFlowStarted) {
                PrivilegedCarbonContext.endTenantFlow();
            }
    	}
        var output = new Packages.java.lang.String(data.content);
        var jsonObj = JSON.parse(output);

        var basePathValue = jsonObj.basePath;
        var username=null;
        result = jagg.module("api").getAPIDescription({
                name:apiNameVal,
                version:apiVersionVal,
                provider:providerVal
            }, username);
            var api = result.api;
        var serverURL = api.serverURL;
        var context = api.context;
        var splitVal = JSON.parse(serverURL);
        var urlArr = new Array();
        var count = 0;
        for(var type in splitVal){
            var environmentsToType = splitVal[type];
            for(var name in environmentsToType ){
                var environmentURL;
                if(envName == name || envName == "undefined" || envName == null){
                    environmentURL = environmentsToType[name];
                    urlArr[count] = environmentURL[accessProtocol.replace(":","")];
                    count++;
                    break;
                }
           
            }
        }

        jsonObj.basePath = api.context;

	//assign default value to host with first environment address
	if (urlArr.length > 0 ) {
	        jsonObj.host = urlArr[0].trim().replace(accessProtocol+"//","");
	}


        var paths = {}; //fix for /*, {url-template}*
        for (var property in jsonObj.paths) {
            if (jsonObj.paths.hasOwnProperty(property)) {
                var tempResource = property.replace("*","");
                if(tempResource.lastIndexOf("/")==(tempResource.length-1)){
                   tempResource += "*";
                }
            paths[tempResource] = jsonObj.paths[property];            }
        }
        jsonObj.paths = paths;

        print(jsonObj);
    }

}());

function sendReceive (httpMethod,data,url){

    var headers = this.getRequestHeaders(false);
    var type = "json"; // response format
    var response;
    switch (httpMethod){
        case  "GET":
            response = get(url,{},headers,type);
            break;
        case   "POST":
            response = post(url,stringify(data),headers,type);
            break;
        case    "PUT":
            response = put(url,stringify(data),headers,type);
            break;
        case    "DELETE":
            response = del(url,stringify(data),headers,type);
            break;
        default :
            log.error("Error in the programme flow.");
    }
    log.debug("---------------------:" + stringify(response));
    if(response.data.Error) {
        session.put("get-status", response.data.Error.errorMessage);
    } else {
        session.put("get-status", "succeeded");
    }
    return response;
};

function getRequestHeaders (ssoEnabled){
    var requestHeaders;
    if(ssoEnabled){
        var accessToken = this.getAccessTokenFromSession();
        requestHeaders = {
            "Authorization": "Bearer "+accessToken,
            "Content-Type": "application/json"
        };
    }else{
        requestHeaders = {
            "Content-Type": "application/json",
            "Cookie": "JSESSIONID="+session.get("JSESSIONID")
        };
    }
    return requestHeaders;
};

function getLocation(href) {
    var match = href.match(/^(https?\:)\/\/(([^:\/?#]*)(?:\:([0-9]+))?)(\/[^?#]*)(\?[^#]*|)(#.*|)$/);
    return match && {
        protocol: match[1],
        host: match[2],
        hostname: match[3],
        port: match[4],
        pathname: match[5],
        search: match[6],
        hash: match[7]
    }
}
%>
