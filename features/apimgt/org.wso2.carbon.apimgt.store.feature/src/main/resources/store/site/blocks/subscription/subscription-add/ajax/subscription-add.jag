<%
include("/jagg/jagg.jag");
(function () {
    var site = require("/site/conf/site.json");
    var ssoEnabled = site.ssoConfiguration.enabled;
    response.contentType = "application/json; charset=UTF-8";
    var mod, obj, name, version, provider, tier, application, applicationId, tokenScope, applicationName, context, result,
            user = jagg.getUser(),
            msg = require("/site/conf/ui-messages.jag"),
            action = request.getParameter("action");


    var validation = {
        "action": { type: "safetext"},
        "application":{ type:"name"}
    };

    var validation_errors = jagg.validateInputs(validation);

    if(validation_errors != true){
            print({
                error:true,
                message: msg.error.invalidInputs(validation_errors)
            });        
    }else if( request.getMethod() == 'POST' && !jagg.isCSRFTokenValid()){
        print({
            error:true,
            message: msg.error.csrfError
        });
    }            
    else if (action == "addSubscription" && request.getMethod() == 'POST') {
        if (!user) {
            if(!ssoEnabled){
		print({
		    error:true,
                    message:msg.error.loginRequired(action)
            	});
	    }
	    return;
        }

        name = request.getParameter("name");
        version = request.getParameter("version");
        provider = request.getParameter("provider");
        tier = request.getParameter("tier");
        applicationId = parseInt(request.getParameter("applicationId"), 10);
        username = user.username;

        mod = jagg.module("subscription");
        result = mod.addSubscription({
            name:name,
            version:version,
            provider:provider
        }, tier, applicationId, username);

        if (result.error) {
        	var message = result.message;
        	if (message != null) {
        		message = message.replace(message.split(":")[0] + ":", "");
        	} else {
        		message = msg.error.authError(action, username);
        	}
            obj = {
                error:true,
                message:message
            };
        } else {
            obj = {
                error:false,
                status:result.status
            }
        }
        print(obj);
    }else if (action == "addAPISubscription" && request.getMethod() == 'POST') {
        if (!user) {
           if(!ssoEnabled){
		print({
		    error:true,
                    message:msg.error.loginRequired(action)
            	});
	    }
	    return;
        }

        name = request.getParameter("name");
        version = request.getParameter("version");
        provider = request.getParameter("provider");
        tier = request.getParameter("tier");
        applicationName = request.getParameter("applicationName");
        username = user.username;

        mod = jagg.module("subscription");
        result = mod.addAPISubscription({
            name:name,
            version:version,
            provider:provider
        }, tier, applicationName, username);

        if (result.error) {
            obj = {
                error:result.error,
                message:result.message
            };
        } else {
            obj = {
                error:false,
                status:result.status 
            }
        }
        print(obj);
    }else if (action == "generateAPIKey" && request.getMethod() == 'POST') {
        if (!user) {
            if(!ssoEnabled){
		print({
		    error:true,
                    message:msg.error.loginRequired(action)
            	});
	    }
	    return;
        }

        name = request.getParameter("name");
        version = request.getParameter("version");
        provider = request.getParameter("provider");
        context = request.getParameter("context");
        application = request.getParameter("application");
        keyType = request.getParameter("keytype");
        callbackUrl = request.getParameter("callbackUrl");
        username = user.username;

        mod = jagg.module("subscription");
        result = mod.generateAPIKey({
            name:name,
            version:version,
            provider:provider
        }, context, application, username,keyType,callbackUrl);

        if (result.error) {
            obj = {
                error:result.error,
                message:msg.error.authError(action, username)
            };
        } else {
            obj = {
                error:false,
                data:{
                    key:result.key
                }
            }
        }
        print(obj);
    } else if (action == "deleteAuthApplication" && request.getMethod() == 'POST') {

        if (!user) {
            print({
                error:true,
                message:msg.error.loginRequired(action)
            });
            return;
        }
        var authAppParams = {};
        authAppParams.username = user.username;
        authAppParams.consumerKey = request.getParameter("consumerKey");

        mod = jagg.module("subscription");

        result = mod.deleteAuthApplication(authAppParams);

        if (result.error) {
            obj = {
                error:result.error,
                message:msg.error.authError(action, username)
            };
            /*print({
                error:result.error,
                message:msg.error.authError(action, username)
            });
            response.status = 500;
            response.contentType = "application/json";
            return;*/
        } else {
            obj = {
                error:false,
                data:{
                    key:result.key
                }
            }
        }
        print(obj);

    } else if (action == "generateApplicationKey" && request.getMethod() == 'POST') {

        if (!user) {
            if (!ssoEnabled) {
                print({
                    error: true,
                    message: msg.error.loginRequired(action)
                });
            }
            return;
        }

        var application = request.getParameter("application");
        var keyType = request.getParameter("keytype");
        var callbackUrl = request.getParameter("callbackUrl");
        var username = user.username;
        var accessAllowDomains = request.getParameter("authorizedDomains");

        if (accessAllowDomains == null) {
            accessAllowDomains = "ALL";
        }
	    var tokenScope = request.getParameter("tokenScope");
        //var tokenScope = "default";

        var accessAllowDomainsArr = accessAllowDomains.split(",");
        var validityTime = request.getParameter("validityTime");
        var retryAfterFailure = request.getParameter("retryAfterFailure");
        var jsonParams = request.getParameter("jsonParams");
	    var groupingId=session.get("groupId");

        if (retryAfterFailure == null) {
            retryAfterFailure = false;
        }

        if(jsonParams != null){
            //convert json string in to a javascript array. Then we can add user name attribute in to it.
            var jsonParamsObject = JSON.parse(jsonParams);

            jsonParamsObject.username = user.username;

        }else{
            var jsonParamsObject = {
                username : user.username
            };

        }

        mod = jagg.module("subscription");

        result = mod.generateApplicationKey(username, application , keyType, callbackUrl, accessAllowDomainsArr,
                validityTime, retryAfterFailure, tokenScope,groupingId, JSON.stringify(jsonParamsObject));

        if (result.error) {
            obj = {
                error: result.error,
                message: msg.error.authError(action, username)
            };
        } else {
            obj = {
                error: false,
                data: {
                    key: result.key
                }
            }
        }
        print(obj);

    } else if (action == "updateClientApplication" && request.getMethod() == 'POST') {

        if (!user) {
            if (!ssoEnabled) {
                print({
                    error: true,
                    message: msg.error.loginRequired(action)
                });
            }
            return;
        }

        var application = request.getParameter("application");
        var keyType = request.getParameter("keytype");
        var callbackUrl = request.getParameter("callbackUrl");
        var username = user.username;
        var accessAllowDomains = request.getParameter("authorizedDomains");
        if (accessAllowDomains == null) {
            accessAllowDomains = "ALL";
        }
        //var tokenScope = request.getParameter("tokenScope");
        var tokenScope = "default";

        var accessAllowDomainsArr = accessAllowDomains.split(",");

        var validityTime = request.getParameter("validityTime");
        var retryAfterFailure = request.getParameter("retryAfterFailure");
        var jsonParams = request.getParameter("jsonParams");
        var groupingId=session.get("groupId");

        if (retryAfterFailure == null) {
            retryAfterFailure = false;
        }
        var log = new Log();

        if(jsonParams != null){
            //convert json string in to a javascript array. Then we can add user name attribute in to it.
            var jsonParamsObject = JSON.parse(jsonParams);

            jsonParamsObject.username = user.username;

        }else{
            var jsonParamsObject = {
                username : user.username
            };

        }


        mod = jagg.module("subscription");

        result = mod.updateAuthClient(username, application , keyType, callbackUrl, accessAllowDomainsArr,
                validityTime, retryAfterFailure, tokenScope,groupingId, JSON.stringify(jsonParamsObject));


        if (result.error) {
            obj = {
                error:result.error,
                message:msg.error.authError(action, username)
            };
        } else {
            obj = {
                error:false,
                data:{
                    key:result.key
                }
            }
        }
        print(obj);
     } else if (action == "updateAccessAllowDomains" && request.getMethod() == 'POST') {
        if (!user) {
           if(!ssoEnabled){
		print({
		    error:true,
                    message:msg.error.loginRequired(action)
            	});
	    }
	    return;
        }

        oldAccessToken = request.getParameter("oldAccessToken");
        accessAllowDomains = request.getParameter("authorizedDomains");
        accessAllowDomainsArr = accessAllowDomains.split(",");
        mod = jagg.module("subscription");
        result = mod.updateAccessAllowDomains(oldAccessToken,accessAllowDomainsArr);

        if (result.error==true) {
            obj = {
                error:true,
                message:result.message
            };
        } else {
            obj = {
                error:false,
                message:result.message
            }
        }
        print(obj);
     } else if (action == "refreshToken" && request.getMethod() == 'POST') {
        if (!user) {
            if(!ssoEnabled){
		print({
		    error:true,
                    message:msg.error.loginRequired(action)
            	});
	    }
	    return;
        }
        application = request.getParameter("application");
        keyType = request.getParameter("keytype");
        username = user.username;
        oldAccessToken = request.getParameter("oldAccessToken");
        clientId = request.getParameter("clientId");
        clientSecret = request.getParameter("clientSecret");
        validityTime = request.getParameter("validityTime");
        tokenScope = request.getParameter("tokenScope");
        mod = jagg.module("subscription");
        result = mod.refreshToken(username,application,keyType,oldAccessToken,clientId, clientSecret,validityTime,tokenScope);

        if (result.error) {
            obj = {
                error:result.error,
                message:result.message
            };
        } else {
            obj = {
                error:false,
                data:{
                    key:result.key
                }
            }
        }
        print(obj);
     }else if (action == "mapExistingOauthClient" && request.getMethod() == 'POST') {

        if (!user) {
            print({
                error:true,
                message:msg.error.loginRequired(action)
            });
            return;
        }
        var saveAuthAppParams = {};
        saveAuthAppParams.username = user.username;
        saveAuthAppParams.jsonParams = request.getParameter("jsonParams");
        saveAuthAppParams.client_id = request.getParameter("client_id");
        saveAuthAppParams.validityTime = request.getParameter("validityTime");
        saveAuthAppParams.keytype = request.getParameter("keytype");
        saveAuthAppParams.authorizedDomains = request.getParameter("authorizedDomains");

        if(saveAuthAppParams.authorizedDomains == null){
            saveAuthAppParams.authorizedDomains = "ALL";
        }
        
        saveAuthAppParams.applicationName = request.getParameter("applicationName");



        //log.info(saveAuthAppParams);

        mod = jagg.module("subscription");

        result = mod.mapExistingOauthClient(saveAuthAppParams);

        if (result.error) {
            obj = {
                error:result.error,
                message:msg.error.authError(action, username)
            };
        } else {
            obj = {
                error:false,
                data:{
                    key:result.key
                }
            }
        }
        print(obj);
     }else if (action == "cleanUpApplicationRegistration" && request.getMethod() == 'POST') {

        if (!user) {
            print({
                error:true,
                message:msg.error.loginRequired(action)
            });
            return;
        }

        var applicationName = request.getParameter("applicationName");
        var keyType = request.getParameter("keyType");
        var groupingId=session.get("groupId");
        var username = user.username;


        mod = jagg.module("subscription");

        result = mod.cleanUpApplicationRegistration(applicationName , keyType, groupingId , username);

        if (result.error) {
            obj = {
                error:result.error,
                message:msg.error.authError(action, username)
            };
        } else {
            obj = {
                error:false,
                data:{
                    key:result.key
                }
            }
        }
        print(obj);
     }
     else {
        print({
            error:true,
            message:msg.error.invalidAction(action)
        });
    }
}());
%>
