<%
include("/jagg/jagg.jag");

(function () {
    var site = require("/site/conf/site.json");
    var ssoEnabled = site.ssoConfiguration.enabled;
    response.contentType = "application/json; charset=UTF-8";
    var mod, obj, application, result, username, tier, callbackUrl, description,
            msg = require("/site/conf/ui-messages.jag"),
            action = request.getParameter("action"),
            user = jagg.getUser();

    var validation = {
        "action": { type: "safetext"},
        "application": { type: "name"},
    };

    var validation_errors = jagg.validateInputs(validation);

    if(validation_errors != true){
            print({
                error:true,
                message: msg.error.invalidInputs(validation_errors)
            });        
    }else if( request.getMethod() == 'POST' && !jagg.isCSRFTokenValid()){
        print({
            error:true,
            message: msg.error.csrfError
        });
    }            
    else if (action == "addApplication" && request.getMethod() == 'POST') {
        if (!user) {
            if(!ssoEnabled){
		print({
		    error:true,
                    message:msg.error.loginRequired(action)
            	});
	    }
	    return;
        }

        application = request.getParameter("application", "UTF-8");
        username = user.username;
        tier = request.getParameter("tier");
        if(null == request.getParameter("callbackUrl")){
            callbackUrl = "";
        }else{
            callbackUrl = request.getParameter("callbackUrl");
        }        
        description = request.getParameter("description");       
        mod = jagg.module("application");
        var MultitenantUtils = Packages.org.wso2.carbon.utils.multitenancy.MultitenantUtils;
        var tenantDomain = MultitenantUtils.getTenantDomain(user.username);
        var APIUtil = org.wso2.carbon.apimgt.impl.utils.APIUtil;
        var applicationTierType = org.wso2.carbon.apimgt.impl.APIConstants.TIER_APPLICATION_TYPE;
        var applicationTierList = APIUtil.getTiers(applicationTierType, tenantDomain);

        if (!applicationTierList.isEmpty() && applicationTierList.containsKey(tier)) {
            result = mod.addApplication(username, application, tier, callbackUrl, description);
            if (result.error) {
                obj = {
                    error: true,
                    message: result.error
                };
            } else {
                obj = {
                    error: false,
                    status: result.status
                }
            }
        } else {
            var log = new Log();
            var errorMessage = "Specified application tier does not exist.";
            log.error(errorMessage);
            obj = {
                error: true,
                message: errorMessage
            };
        }
        print(obj);
    } else {
        print({
            error:true,
            message:msg.error.invalidAction(action)
        });
    }
}());
%>
