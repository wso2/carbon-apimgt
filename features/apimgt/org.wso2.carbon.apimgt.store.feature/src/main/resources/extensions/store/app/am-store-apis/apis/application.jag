<%
/*
 *  Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 *
 */
require('/modules/store.js').exec(function (ctx) {
	var log = new Log('application_api');
	var req = ctx.request;
	var constants = require("rxt").constants;
	var responseProcessor = require('utils').response;
	var server = require('store').server;
	var user = server.current(ctx.session);
	var apistore = require('apistore').apistore.instance(user.username);
	var options = request.getAllParameters('UTF-8');
	var httpMethod = request.getMethod();
	var response = ctx.response;
	response.contentType = 'application/json';

	var API_SUBSCRIPTION_URL = '/{context}/apis/application/{appName}/{action}/subscriptions';

	var uriMatcher = new URIMatcher(req.getRequestURI());
	var uriOptions;
	switch (httpMethod) {
		case 'GET':
			break;

		case 'POST':
			uriOptions = uriMatcher.match(API_SUBSCRIPTION_URL);
			if (uriOptions.action == 'new') {
				// (userId, applicationName, tokenType, tokenScopes,validityPeriod,callbackUrl,accessAllowDomainsArr)
				var keyResult = apistore.getApplicationKey(user.username, options.appName,
														   options.keyType.toUpperCase(), options.tokenScope, options.validityTime,
														   options.callbackUrl, options.accessAllowDomains);
				var keys = [];
				keys = JSON.parse(keyResult);
				if (keys.consumerKey != null) {
					response = responseProcessor.buildSuccessResponse(response, constants.STATUS_CODES.OK, keys);
				}
			} else if (uriOptions.action == 'refresh') {
				// (userId, applicationName, requestedScopes, oldAccessToken, accessAllowDomainsArr,
				//consumerKey, consumerSecret, validityTime)
				var keyResult = apistore.getRefreshToken(user.username, options.appName, options.tokenScope, options.accessToken,
														 options.accessAllowDomains, options.consumerKey, options.consumerSecret, options.validityTime);
				var keys = [];
				keys = JSON.parse(keyResult);
				if (keys.accessToken != null) {
					response = responseProcessor.buildSuccessResponse(response, constants.STATUS_CODES.OK, keys);
				}
			} else if (uriOptions.action == 'deleteSubscription') {
				// (apiname, version, provider, user, tier, appId)
				var isSubRemovedResult = apistore.removeSubscription(options.apiName, options.apiVersion, options.apiProvider,
																	 user.username, options.appTier, options.appId);
				var isSubscriptionRemoved;
				if (isSubRemovedResult) {
					isSubscriptionRemoved = {
						success: isSubRemovedResult
					};
				} else {
					isSubscriptionRemoved = {
						success: isSubRemovedResult
					};
				}
				response = responseProcessor.buildSuccessResponse(response, constants.STATUS_CODES.OK, isSubscriptionRemoved);
			} else if (uriOptions.action == 'updateDomain') {
				var result = apistore.updateAccessAllowDomains(options.accessToken, options.accessAllowedDomains);
				response = responseProcessor.buildSuccessResponse(response, constants.STATUS_CODES.OK, result);
			} else if (uriOptions.action == 'getUUID') {
				var uuidResult = apistore.getUUIDByApi(options.apiProvider, options.apiName, options.apiVersion);
				var uuid;
				if (uuidResult != null) {
					uuid = {
						error: false,
						response: uuidResult
					};
				} else {
					uuid = {
						error: true,
						response: 'No artifact found'
					};
				}
				response = responseProcessor.buildSuccessResponse(response, constants.STATUS_CODES.OK, uuid);
			}
			break;

		default:
			break;
	}

}, request, response, session);
%>
