<%
/*
 *  Copyright (c) 2005-2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 *
 */
var caramel;
require('/modules/store.js').exec(function (ctx) {
    caramel = require('caramel');
    var log = new Log('swagger');
    var ui = require('rxt').ui;
    var asset = require('rxt').asset;
    var uriMatcher = new URIMatcher(ctx.request.getRequestURI());
    var options = uriMatcher.match('/{context}/assets/{type}/{pageName}/{provider}/{apiName}/{apiVersion}');
    var type = options.type;
    var am;
    var tenantId=-1234;
    var server = require('store').server;
    var user = server.current(ctx.session);
    var username='_wso2.am.anon_';
    if (user) {
    am = asset.createUserAssetManager(ctx.session, type);
    tenantId = tenantId ? tenantId : user.tenantId;
    username=user.username;
    } else {
    am = asset.createAnonAssetManager(ctx.session, type, tenantId);
    }
    //var am = asset.createUserAssetManager(ctx.session, type);
    var page = ui.buildPage(ctx.session, ctx.request);
    var output = am.renderBasic(page)._custom();

    var apistore = require('apistore').apistore.instance(username);
    var carbon = require('carbon');

    var uri = request.getRequestURI();
    var callPath = uri.replace("/store/assets/api/swagger", "");
    var url;

    if (uri != null) {
        // replacing @ signs for matcher to work with reverse proxies
        if(callPath.indexOf("@") > -1){
            callPath = callPath.replace("@","%40");
        }
        var uriMatcher = new URIMatcher(callPath);
        var providerVal,apiNameVal,apiVersionVal;
        providerVal = apiNameVal = apiVersionVal = "";

        if (uriMatcher.match("/{providerVal}/{apiNameVal}/{apiVersionVal}")) {
            providerVal = uriMatcher.elements().providerVal;
            apiNameVal = uriMatcher.elements().apiNameVal;
            apiVersionVal = uriMatcher.elements().apiVersionVal;
        }else {
            print({
                error:true,
                message:msg.error.invalidAction(action)
            });
        }

        var url = request.getRequestURL();
        var host = getLocation(url).host;
        var port = getLocation(url).port;
        var accessProtocol = getLocation(url).protocol;
        var envName = request.getParameter("envName");
        var tenantDomain = "";
        var tenantID = -1234;
	    var isTenantFlowStarted = false;

        if(providerVal.indexOf("@") > -1){
            var MultitenantUtils = Packages.org.wso2.carbon.utils.multitenancy.MultitenantUtils;
	    tenantDomain = MultitenantUtils.getTenantDomain(providerVal);
            providerVal = providerVal.replace("@","-AT-");
            if(tenantDomain){
                tenantID = carbon.server.osgiService('org.wso2.carbon.user.core.service.RealmService').getTenantManager().getTenantId(tenantDomain);
            }
        }

        if(providerVal.indexOf("-DOM-") > -1){
             providerVal = providerVal.replace("-DOM-","/");
        }

    	try {
    		//start tenant flow before fetching swagger resource from the registry
    		if (tenantDomain != "" && tenantDomain != 'carbon.super') {
    			var PrivilegedCarbonContext = Packages.org.wso2.carbon.context.PrivilegedCarbonContext;
    			isTenantFlowStarted = true;
    			PrivilegedCarbonContext.startTenantFlow();
    		        PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(tenantDomain, true);
    		}

            var APIUtil = Packages.org.wso2.carbon.apimgt.impl.utils.APIUtil;
            var apiUtil = new APIUtil();
            var swaggerPath = apiUtil.getSwagger20DefinitionFilePath(apiNameVal,apiVersionVal, providerVal);
    		var registry = carbon.server.osgiService('org.wso2.carbon.registry.core.service.RegistryService').getGovernanceUserRegistry("wso2.anonymous.user", tenantID);

    		url = swaggerPath + "swagger.json";
    		var data = registry.get(url);

    	}finally {
    		if (isTenantFlowStarted) {
                PrivilegedCarbonContext.endTenantFlow();
            }
    	}
        var output = new Packages.java.lang.String(data.content);
        var jsonObj = JSON.parse(output);

        var basePathValue = jsonObj.basePath;
        var username=null;
        result =  apistore.getAPI(providerVal,
                                 apiNameVal,apiVersionVal);
        var api = result.api;
        var serverURL = api.serverURL;
        var context = api.context;

        var splitVal = JSON.parse(serverURL);
        var urlArr = new Array();
        var count = 0;
        for(var type in splitVal){
            var environmentsToType = splitVal[type];
            for(var name in environmentsToType ){
                var environmentURL;
                if(envName == name){
                    environmentURL = environmentsToType[name];
                    urlArr[count] = environmentURL[accessProtocol.replace(":","")];
                    count++;
                    break;
                }else{
                var environmentURL = environmentsToType[name];
                urlArr[count] = environmentURL[accessProtocol.replace(":","")];
                count++;
                }

            }
        }
        if(urlArr.length===1){
            // We do not need to append the version since with the context versioning, the version is embedded in the context.
            jsonObj.basePath=urlArr[0]+context;
            //jsonObj.basePath=urlArr[0]+context+"/"+apiVersionVal;
        }else{
            for(var i=0; i < urlArr.length ; i++){
                if(urlArr[i].indexOf(accessProtocol) > -1){
                    jsonObj.basePath=urlArr[i]+context;
                    // jsonObj.basePath=urlArr[i]+context+"/"+apiVersionVal;
                }
            }
        }

        jsonObj.basePath = api.context;

	//assign default value to host with first environment address
	if (urlArr.length > 0 ) {
	        jsonObj.host = 'localhost:8243';
	}


        var paths = {}; //fix for /*, {url-template}*
        for (var property in jsonObj.paths) {
            if (jsonObj.paths.hasOwnProperty(property)) {
                paths[property.replace("*","")] = jsonObj.paths[property];
            }
        }
       jsonObj.paths = paths;
       response.contentType = 'application/json';
       output=jsonObj;

   }

 caramel.render(output);
}, request, response, session);

function sendReceive (httpMethod,data,url){

    var headers = this.getRequestHeaders(false);
    var type = "json"; // response format
    var response;
    switch (httpMethod){
        case  "GET":
            response = get(url,{},headers,type);
            break;
        case   "POST":
            response = post(url,stringify(data),headers,type);
            break;
        case    "PUT":
            response = put(url,stringify(data),headers,type);
            break;
        case    "DELETE":
            response = del(url,stringify(data),headers,type);
            break;
        default :
            log.error("Error in the programme flow.");
    }
    log.debug("---------------------:" + stringify(response));
    if(response.data.Error) {
        session.put("get-status", response.data.Error.errorMessage);
    } else {
        session.put("get-status", "succeeded");
    }
    return response;
};

function getRequestHeaders (ssoEnabled){
    var requestHeaders;
    if(ssoEnabled){
        var accessToken = this.getAccessTokenFromSession();
        requestHeaders = {
            "Authorization": "Bearer "+accessToken,
            "Content-Type": "application/json"
        };
    }else{
        requestHeaders = {
            "Content-Type": "application/json",
            "Cookie": "JSESSIONID="+session.get("JSESSIONID")
        };
    }
    return requestHeaders;
};

function getLocation(href) {
    var match = href.match(/^(https?\:)\/\/(([^:\/?#]*)(?:\:([0-9]+))?)(\/[^?#]*)(\?[^#]*|)(#.*|)$/);
    return match && {
        protocol: match[1],
        host: match[2],
        hostname: match[3],
        port: match[4],
        pathname: match[5],
        search: match[6],
        hash: match[7]
    }
}

%>
