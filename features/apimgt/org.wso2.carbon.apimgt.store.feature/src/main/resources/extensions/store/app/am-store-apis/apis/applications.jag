<%
/*
 *  Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 *
 */
require('/modules/store.js').exec(function (ctx) {
	var log = new Log('applications_api');
	var req = ctx.request;
	var server = require('store').server;
	var user = server.current(ctx.session);
	var apistore = require('apistore').apistore.instance(user.username);
	var options = request.getAllParameters('UTF-8');
	var httpMethod = request.getMethod();
	var responseProcessor = require('utils').response;
	var constants = require("rxt").constants;
	var response = ctx.response;
	response.contentType = 'application/json';

	var createStatusJson = function (appStatus) {
		var appDataArr = [];
		var isActive = false;
		if (appStatus == 'APPROVED') {
			isActive = true;
		}

		appDataArr.push({
							"appStatus": appStatus,
							"isActive": isActive
						});
		return appDataArr;
	};

	var API_APPLICATIONS_URL = '/{context}/apis/applications/{action}';

	var uriMatcher = new URIMatcher(req.getRequestURI());
	var uriOptions;
	switch (httpMethod) {
		case 'GET':
			var applicationDataResult = apistore.getApplications(user.username);
			if (applicationDataResult != null) {
				var applicationData = JSON.parse(applicationDataResult);
				for (var a in applicationData) {
					var statusJson = createStatusJson(applicationData[a].status);
					applicationData[a].status = statusJson;
				}
				response = responseProcessor.buildSuccessResponse(response, constants.STATUS_CODES.OK, applicationData);
			}
			break;

		case 'POST':
			uriOptions = uriMatcher.match(API_APPLICATIONS_URL);

			if (uriOptions.action == "newapp") {
				var result = apistore.addApplication(options.appName, user.username, options.tier,
										options.callbackUrl, options.description);
				response = responseProcessor.buildSuccessResponse(response, constants.STATUS_CODES.OK, result);
			} else if (uriOptions.action == "editapp") {
				var result = apistore.updateApplication(options.appName, options.userName, options.appId, options.tier,
										   options.callbackUrl, options.description);
				response = responseProcessor.buildSuccessResponse(response, constants.STATUS_CODES.OK, result);
			} else if (uriOptions.action == "delapp") {
				var result = apistore.removeApplication(options.appName, options.userName, options.appId);
				response = responseProcessor.buildSuccessResponse(response, constants.STATUS_CODES.OK, result);
			}

			break;

		default:
			break;
	}

}, request, response, session);
%>
