<%
include("/jagg/jagg.jag");

if(jagg.isCSRFTokenValid())
(function () {
    response.contentType = "text/plain; charset=UTF-8";
    var mod, obj, result, username,
    		action = request.getParameter("action"),
            site = require("/site/conf/site.json"),
            msg = require("/site/conf/ui-messages.jag");

    if(jagg.getUser() == null){
        print({
            error:true,
            message:'timeout'
        });
    }else{
        if (request.getMethod() == 'POST' && (action === "addAPI" ||action === "updateAPI")) {
            mod = jagg.module("api");
            var apiData = {};

            apiData.request = request;
            apiData.apiName = request.getParameter("name", "UTF-8");
            apiData.version = request.getParameter("version");
            apiData.defaultVersion=request.getParameter("default_version_checked");
            apiData.description = request.getParameter("description","UTF-8");
 	        if(request.getParameter("http_checked") == null && request.getParameter("https_checked") == null){
                apiData.transports = null;
            }
            else{
                apiData.transports=request.getParameter("http_checked")+","+request.getParameter("https_checked");
            }
            apiData.endpoint = request.getParameter("endpoint");
            apiData.sandbox = request.getParameter("sandbox");
            apiData.wsdl = request.getParameter("wsdl");
            apiData.wadl = request.getParameter("wadl");
            apiData.tags = request.getParameter("tags","UTF-8");
            apiData.tier = request.getParameter("tiersCollection");
            apiData.imageUrl = request.getFile("apiThumb");
            apiData.thumbUrl = request.getParameter("thumbUrl");
            apiData.context = request.getParameter("context","UTF-8");
            apiData.bizOwner = request.getParameter("bizOwner","UTF-8");
            apiData.bizOwnerEmail = request.getParameter("bizOwnerMail","UTF-8");
            apiData.techOwner = request.getParameter("techOwner","UTF-8");
            apiData.techOwnerEmail = request.getParameter("techOwnerMail","UTF-8");
            apiData.visibility = request.getParameter("visibility");
            apiData.visibleRoles = request.getParameter("roles","UTF-8");
            apiData.visibleTenants = request.getParameter("allowTenants","UTF-8");
            apiData.endpointSecured = request.getParameter("endpointType");
            apiData.endpointUTUsername = request.getParameter("epUsername");
            apiData.endpointUTPassword = request.getParameter("epPassword");   
            apiData.inSequence = request.getParameter("inSequence");
            apiData.outSequence= request.getParameter("outSequence");
            apiData.redirectURL= request.getParameter("redirectURL");
            apiData.apiOwner= request.getParameter("apiOwner");
            apiData.advertiseOnly= request.getParameter("advertiseOnly");
            apiData.subscriptionAvailability = request.getParameter("subscriptions");
            apiData.subscriptionTenants = request.getParameter("tenants","UTF-8");            
            apiData.endpoint_config= request.getParameter("endpoint_config","UTF-8");
            apiData.resource_config= request.getParameter("resource_config","UTF-8");
            apiData.swagger= request.getParameter("swagger","UTF-8");
            apiData.responseCache = request.getParameter("responseCache","UTF-8");            
            apiData.cacheTimeout= request.getParameter("cacheTimeout","UTF-8");
            apiData.faultSequence = request.getParameter("faultSequence");
            apiData.destinationStats= request.getParameter("destinationStats","UTF-8");
            apiData.environments=request.getParameter("environments","UTF-8");
            var externalAPIStoresArray = new Array();
            var externalAPIStores = request.getParameter("externalAPIStores");
            var provider = request.getParameter("provider","UTF-8");

            if(externalAPIStores!=null){
            var externalAPIStoresVals=externalAPIStores.split("::");
             for(var k=0;k<externalAPIStoresVals.length;k++){
             if(externalAPIStoresVals[k]!=''){
             externalAPIStoresArray.push(externalAPIStoresVals[k]);
             }
             }
            }
            apiData.externalAPIStores = externalAPIStoresArray;
            
            var resCount = new Array();
            if (request.getParameter("resourceCount") != null) {
                resCount = request.getParameter("resourceCount");
            }
            var uriTemplateArr = new Array();
            var uriMethodArr = new Array();
            var uriAuthMethodArr = new Array();
            var throttlingTierArr = new Array();
            if(resCount==0){
            uriTemplateArr.push(request.getParameter("uriTemplate-0"));
            uriMethodArr.push(request.getParameter("resourceMethod-0"));

            var authType=request.getParameter("resourceMethodAuthType-0");
            var throttlingTier=request.getParameter("resourceMethodThrottlingTier-0");

            uriAuthMethodArr.push(authType);
            throttlingTierArr.push(throttlingTier);
            }else{
            for (var i = 0; i < resCount; i++) {
            uriTemplateArr.push(request.getParameter("uriTemplate-" +i));
            uriMethodArr.push(request.getParameter("resourceMethod-" +i));

            var authType=request.getParameter("resourceMethodAuthType-" +i);
            var tierName=request.getParameter("resourceMethodThrottlingTier-" +i);

            uriAuthMethodArr.push(authType);
            throttlingTierArr.push(tierName);



            }
            }
            apiData.uriTemplateArr = uriTemplateArr;

            apiData.uriMethodArr = uriMethodArr;

            apiData.uriAuthMethodArr = uriAuthMethodArr;
            apiData.throttlingTierArr = throttlingTierArr;

            if (provider == null) {
                apiData.provider = jagg.getUser().username;
            } else {
                apiData.provider = provider;
            }

            if(action === "addAPI"){            
            	result = mod.addAPI(apiData);
            }else{            
            	result = mod.updateAPI(apiData);
            }
            if (result.error == true) {
                obj = {
                    error:true,
                    message:result.message
                };
            } else {
                obj = {
                    error:false
                }
            }
            print(obj);

        } else if (action === "isAPINameExist") {
            mod = jagg.module("api");
            var apiName = request.getParameter("apiName");
            result = mod.isApiNameExist(apiName);
            if (result.error) {
                obj = {
                    error:true,
                    message:msg.error.backendError(action)
                };
            } else {
                obj = {
                    error:false,
                    exist:result.exist
                }
            }

            print(obj);

        }else if (action === "isContextExist") {
            mod = jagg.module("api");
            var context = request.getParameter("context");
            var oldContext = request.getParameter("oldContext");
            result = mod.isContextExist(context,oldContext);
            if (result.error) {
                obj = {
                    error:true,
                    message:msg.error.backendError(action)
                };
            } else {
                obj = {
                    error:false,
                    exist:result.exist
                }
            }

            print(obj);

        }else if (action === "validateRoles") {
            mod = jagg.module("api");
            var user=jagg.getUser().username;
            var roles = request.getParameter("roles");
            result = mod.validateRoles(roles,user);
            if (result.error) {
                obj = {
                    error:true,
                    message:msg.error.backendError(action)
                };
            } else {
                obj = {
                    error:false,
                    response:result.valid
                }
            }

            print(obj);

        }

        else if (action === "isURLValid") {
            mod = jagg.module("api");
            var type = request.getParameter("type");
            var url = request.getParameter("url");
            var invalidStatusCodesRegex = "404"; //A regex expression for invalid status codes
            result = mod.isURLValid(type, url, invalidStatusCodesRegex);
            if (result.error) {
                obj = {
                    error:true,
                    message:msg.error.backendError(action)
                };
            } else {
                obj = {
                    error:false,
                    response:result.response
                }
            }

            print(obj);

        }

        else if (action === "getTiers") {
            mod = jagg.module("api");
            result = mod.getTiers();
            if (result.error) {
                obj = {
                    error:true,
                    message:msg.error.backendError(action)
                };
            } else {
                obj = {
                    error:false,
                    tiers:result.tiers
                }
            }

            print(obj);

        }
        else if (action === "getCustomInSequences") {
            mod = jagg.module("api");
            result = mod.getCustomInSequences();
            if (result.error) {
                obj = {
                    error:true,
                    message:msg.error.backendError(action)
                };
            } else {
                obj = {
                    error:false,
                    sequences:result.sequences
                }
            }
            print(obj);
        }
        else if (action === "getCustomOutSequences") {
            mod = jagg.module("api");
            result = mod.getCustomOutSequences();
            if (result.error) {
                obj = {
                    error:true,
                    message:msg.error.backendError(action)
                };
            } else {
                obj = {
                    error:false,
                    sequences:result.sequences
                }
            }
            print(obj);
        }
        else if (action === "getCustomFaultSequences") {
            mod = jagg.module("api");
            result = mod.getCustomFaultSequences();
            if (result.error) {
                obj = {
                    error:true,
                    message:msg.error.backendError(action)
                };
            } else {
                obj = {
                    error:false,
                    sequences:result.sequences
                }
            }
            print(obj);
        }

        else {
            print({
                      error:true,
                      message:msg.error.invalidAction(action)
                  });
        }
    }
}());
%>
