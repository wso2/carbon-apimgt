<%
include("/jagg/jagg.jag");
var log = new Log();

function loadSwaggerObj(path)
{
    var obj, file = new File(path);
    if(file.isExists()){
        obj = require(path);
    } else {
        obj = require("/site/blocks/item-design/ajax/default_swagger.json");
    }
    return obj;
}

function isPositiveInteger(s) {
    return !!s.match(/^[0-9]+$/);
}

if(jagg.isCSRFTokenValid())
(function () {
    response.contentType = "text/plain; charset=UTF-8";
    response.addHeader('Cache-Control','no-cache, no-store, must-revalidate'); // HTTP 1.1.
    response.addHeader('Pragma','no-cache'); // HTTP 1.0.
    response.addHeader('Expires','0');
    var mod, obj, result, username,
	action = request.getParameter("action"),
    site = require("/site/conf/site.json"),
    msg = require("/site/conf/ui-messages.jag");

    if(jagg.getUser() == null){
        print({
            error:true,
            message:'timeout'
        });
    }else{
        if (request.getMethod() == 'POST' && (action === "start")) {
            var l = new Log();
            var type = request.getParameter("type");
            var swagger = null;
            var wsdl = null;
            if(type == "rest"){
                var url = request.getParameter("swagger-url");
                var file = request.getFile("swagger-file"); 
                var import_type = request.getParameter("import-definition");               
                if(import_type == "swagger-url" && url){
                    url = url.trim();
                    var data = { };
                    var content = get(url, data ,"json");
                    swagger = content.data;                    
                }
                else if(import_type == "swagger-file" && file){
                    file.open("r");
                    swagger = file.readAll();
                    file.close();                    
                }else{
                    var obj = require("/site/blocks/item-design/ajax/default_swagger.json");
                    swagger = stringify(obj);
                }
            }
            else if(type == "soap"){
                var url = request.getParameter("wsdl-url");
                var file = request.getFile("wsdl-file"); 
                var import_type = request.getParameter("import-definition");  
                wsdl = "soap";
                if(url){
                    wsdl = url.trim();    
                }                
                var obj = loadSwaggerObj("/site/conf/soap_swagger.json");
                swagger = stringify(obj);            
            }
            if(swagger){
                session.put("swagger", swagger);
            }            
            if(wsdl){
                session.put("wsdl", wsdl);
            }
            print({
                error:false,
                message:'imported'
            });

        }else if (request.getMethod() == 'POST' && (action === "design")) {
            mod = jagg.module("api");
            var apiData = {};
            apiData.apiName = request.getParameter("name", "UTF-8");
            apiData.name = request.getParameter("name", "UTF-8");
            apiData.version = request.getParameter("version");
            if (request.getParameter("provider") == null) {
            	apiData.provider = jagg.getUser().username;
            } else {
            	apiData.provider = request.getParameter("provider")
            }
            var apiId = {
                apiName : request.getParameter("name", "UTF-8"),
                version : request.getParameter("version"),
                provider: apiData.provider
            };            
            apiData.context = request.getParameter("context","UTF-8");
            apiData.imageUrl = request.getFile("apiThumb");

            //validate uploaded image
            if(apiData.imageUrl != null &&!jagg.isValiedImage(apiData.imageUrl)){
                obj = {
                    error:true,
                    message:"Please upload a valid image file for the API icon."
                };
                print(obj);
                return;
            }


            //If API not exist create
            result = mod.checkIfResourceExists(apiData);
            if(!result){
                result = mod.createAPI(apiData);
                if (result.error==true) {
                    obj = {
                        error:true,
                        message:result.message
                    };
                    print(obj);
                    return;
                }
            }

            apiData.description = request.getParameter("description","UTF-8");
            apiData.tags = request.getParameter("tags","UTF-8");
            apiData.bizOwner = request.getParameter("bizOwner","UTF-8");
            apiData.bizOwnerEmail = request.getParameter("bizOwnerMail","UTF-8");
            apiData.techOwner = request.getParameter("techOwner","UTF-8");
            apiData.techOwnerEmail = request.getParameter("techOwnerMail","UTF-8");
            apiData.visibility = request.getParameter("visibility");
            apiData.visibleRoles = request.getParameter("roles","UTF-8");
            apiData.wsdl = request.getParameter("wsdl");            

            apiData.swagger = request.getParameter("swagger", "UTF-8");

            result = mod.updateAPIDesign(apiData);
            if (result.error==true) {
                obj = {
                    error:true,
                    message:result.message
                };
            } else {
                obj = {
                    error:false,
                    data :apiId
                }
            }
            print(obj);

        } else if (request.getMethod() == 'POST' && action === "implement") {
            mod = jagg.module("api");
            var apiData = {};
            apiData.apiName = request.getParameter("name", "UTF-8");
            apiData.version = request.getParameter("version");
            apiData.provider= request.getParameter("provider");
            var apiId = {
                apiName : request.getParameter("name", "UTF-8"),
                version : request.getParameter("version"),
                provider: request.getParameter("provider")
            };
            apiData.context = request.getParameter("context","UTF-8");

            apiData.implementation_type = request.getParameter("implementation_methods");
            apiData.wsdl = request.getParameter("wsdl");
            apiData.wadl = request.getParameter("wadl");
            apiData.endpointSecured = request.getParameter("endpointType");
            apiData.endpointAuthDigest = request.getParameter("endpointAuthType");
            apiData.endpointUTUsername = request.getParameter("epUsername");
            apiData.endpointUTPassword = request.getParameter("epPassword");
            apiData.endpoint_config= request.getParameter("endpoint_config","UTF-8");
            apiData.destinationStats= request.getParameter("destinationStats","UTF-8");

            apiData.swagger = request.getParameter("swagger", "UTF-8");
            apiData.inSequence = request.getParameter("inSequence");
            apiData.outSequence= request.getParameter("outSequence");
            apiData.faultSequence = request.getParameter("faultSequence");
            apiData.inSeqFile = request.getFile("inSeqFile");
            apiData.outSeqFile = request.getFile("outSeqFile");
            apiData.corsConfiguration=request.getParameter("corsConfiguration","UTF-8");


            result = mod.updateAPIImplementation(apiData);
            if (result.error==true) {
                obj = {
                    error:true,
                    message:result.message,
                    data :apiId,
                };
            } else {
                obj = {
                    error:false,
                    data :apiId,
                }
            }
            print(obj);
        }   else if (request.getMethod() == 'POST' && action === "manage") {
            mod = jagg.module("api");
            var apiData = {};
            apiData.apiName = request.getParameter("name", "UTF-8");
            apiData.version = request.getParameter("version");
            apiData.provider= request.getParameter("provider");
            var apiId = {
                apiName : request.getParameter("name", "UTF-8"),
                version : request.getParameter("version"),
                provider: request.getParameter("provider")
            };
            apiData.context = request.getParameter("context","UTF-8");
            apiData.defaultVersion=request.getParameter("default_version_checked");


            apiData.swagger = request.getParameter("swagger", "UTF-8");
            apiData.tier = request.getParameter("tiersCollection");
            if(request.getParameter("transport_http") == null && request.getParameter("transport_https") == null)   {
                apiData.transports = null;
            } else if(request.getParameter("transport_http") != null && request.getParameter("transport_https") != null) {
                apiData.transports=request.getParameter("transport_http")+","+request.getParameter("transport_https");
            }   else if(request.getParameter("transport_http") != null){
        	apiData.transports=request.getParameter("transport_http");
            }   else    {
        	    apiData.transports=request.getParameter("transport_https");
            }

            apiData.responseCache = request.getParameter("responseCache","UTF-8");
            apiData.subscriptionAvailability = request.getParameter("subscriptions");
            apiData.subscriptionTenants = request.getParameter("tenants","UTF-8");
            apiData.bizOwner = request.getParameter("bizOwner", "UTF-8");
            apiData.bizOwnerMail = request.getParameter("bizOwnerMail", "UTF-8");
            apiData.techOwner = request.getParameter("techOwner", "UTF-8");
            apiData.techOwnerMail = request.getParameter("techOwnerMail", "UTF-8");

            apiData.responseCache = request.getParameter("responseCache","UTF-8");
            apiData.cacheTimeout= request.getParameter("cacheTimeout","UTF-8");
            apiData.destinationStats= request.getParameter("destinationStats","UTF-8");
		    apiData.environments = request.getParameter("environments");
            apiData.productionTps = request.getParameter("productionTps");
            apiData.sandboxTps = request.getParameter("sandboxTps");
            apiData.corsConfiguration=request.getParameter("corsConfiguration","UTF-8");
            var errorMsg = null;
            if(apiData.productionTps != null && apiData.productionTps != ""  && !isPositiveInteger(apiData.productionTps)){
                errorMsg = "Invalid input for Production TPS";
            }

            if(apiData.sandboxTps != null && apiData.sandboxTps != "" && !isPositiveInteger(apiData.sandboxTps)){
                errorMsg = "Invalid input for Sandbox TPS";
            }

            if(errorMsg != null){
             obj = {
                    error:true,
                    message:errorMsg,
                    data :apiId,
                };
            print(obj);
            return;    
            }

            result = mod.manageAPI(apiData);
            if (result.error==true) {
                obj = {
                    error:true,
                    message:result.message,
                    data :apiId,
                };
            } else {
                obj = {
                    error:false,
                    data :apiId,
                }
            }
            print(obj);
        }else if (action === "swagger") {
            mod = jagg.module("api");
            var apiData = {};
            apiData.apiName = request.getParameter("name", "UTF-8");
            apiData.version = request.getParameter("version");
            if (request.getParameter("provider") == null) {
            	apiData.provider = jagg.getUser().username;
            } else {
            	apiData.provider = request.getParameter("provider")
            }
            var data = mod.getSwagger12Resource(apiData);
            print(data.swagger);
        }   else if (request.getMethod() == 'POST' && (action === "sampleDesign")) {
            mod = jagg.module("api");
            var apiData = {};
            apiData.apiName = request.getParameter("name", "UTF-8");
            apiData.name = request.getParameter("name", "UTF-8");
            apiData.version = request.getParameter("version");
            if (request.getParameter("provider") == null) {
            	apiData.provider = jagg.getUser().username;
            } else {
            	apiData.provider = request.getParameter("provider")
            }
            var apiId = {
                apiName : request.getParameter("name", "UTF-8"),
                version : request.getParameter("version"),
                provider: apiData.provider
            };            
            apiData.context = request.getParameter("context","UTF-8");
            apiData.imageURL = request.getParameter("apiThumb","UTF-8");
            var file = new File(apiData.imageURL);
            file.open("r");
            apiData.imageUrl = file;

            //validate uploaded image
            if(apiData.imageUrl != null &&!jagg.isValiedImage(apiData.imageUrl)){
                obj = {
                    error:true,
                    message:"Please upload a valid image file for the API icon."
                };
                print(obj);
                return;
            }


            //If API not exist create
            result = mod.checkIfResourceExists(apiData);
            if(!result){
                result = mod.createAPI(apiData);
                if (result.error==true) {
                    obj = {
                        error:true,
                        message:result.message
                    };
                    print(obj);
                    return;
                }
            }

            apiData.description = request.getParameter("description","UTF-8");
            apiData.tags = request.getParameter("tags","UTF-8");
            apiData.bizOwner = request.getParameter("bizOwner","UTF-8");
            apiData.bizOwnerEmail = request.getParameter("bizOwnerMail","UTF-8");
            apiData.techOwner = request.getParameter("techOwner","UTF-8");
            apiData.techOwnerEmail = request.getParameter("techOwnerMail","UTF-8");
            apiData.visibility = request.getParameter("visibility");
            apiData.visibleRoles = request.getParameter("roles","UTF-8");

            apiData.swagger = stringify(parse(request.getParameter("swagger", "UTF-8")));

            result = mod.updateAPIDesign(apiData);
            if (result.error==true) {
                obj = {
                    error:true,
                    message:result.message
                };
            } else {
                obj = {
                    error:false,
                    data :apiId
                }
            }
            print(obj);

        } else if (action === "validateScope") {
            mod = jagg.module("api");
            var scope = request.getParameter("scope");            
            var data = mod.isScopeExist(scope, jagg.getUser().username);
            print(data);
        } else {
            print({
                      error:true,
                      message:msg.error.invalidAction(action)
            });
        }
    }
}());
%>
