<%
// This is a generic header file that can be included in all the pages.

response.addHeader("X-Frame-Options", "SAMEORIGIN");

var site = require("/site/conf/site.json");
var ssoEnabled = site.ssoConfiguration.enabled;
var oidcEnabled = site.oidcConfiguration.enabled;
var reverseProxyEnable = site.reverseProxy.enabled;
var siteContext = site.context;

if (ssoEnabled === 'true') {
    jagg.includeBlock("sso/filter", {});
} else if(oidcEnabled === 'true') {
    jagg.includeBlock("oidc/filter", {});
}

jagg.setCSRFToken();

var getRedirectPathForNonAuthenticatedUser = function () {

    // if reverse proxy enabled from site json, below code block will remove URI context from the absolute
    if(reverseProxyEnable){
        var requestedPageAbsoluteUrl = jagg.getAbsoluteUrl(request.getRequestURI());
        var requestedPage = requestedPageAbsoluteUrl.replace(siteContext + "/",'/');
    }else {
        var requestedPage = request.getRequestURI();
    }
    if (request.getQueryString() != null) {
        requestedPage = requestedPage + '?' + encodeURIComponent(request.getQueryString());
    }
    var redirectPath = jagg.getAbsoluteUrl("/site/pages/login.jag?requestedPage=" + requestedPage);

    return redirectPath;
};

var isTenantAllowed=function(){
 var user = jagg.getUser(),username;
   if(user!=null){
   username=user.username;
   if(request.getParameter("tenant")!=null){
	var MultitenantUtils = Packages.org.wso2.carbon.utils.multitenancy.MultitenantUtils;
   	var domainName =MultitenantUtils.getTenantDomain(username);

   	if(domainName!=request.getParameter("tenant")){
   		jagg.setUser(null);
   		response.sendRedirect(getRedirectPathForNonAuthenticatedUser());
   		return;
   	}
   }
   }
   };

var tenantDomain = jagg.getTenantDomain();

var encode = require('encode');
encode = new encode.Encode();


%>
