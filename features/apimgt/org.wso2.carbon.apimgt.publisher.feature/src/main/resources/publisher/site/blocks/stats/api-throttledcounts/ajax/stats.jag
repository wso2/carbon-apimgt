<%
include("/jagg/jagg.jag");
var log = new Log();
(function () {
    response.contentType = "application/json; charset=UTF-8";
    var mod, obj, result,
            action = request.getParameter("action"),
            apiName = request.getParameter("apiName"),
            apiVersion = request.getParameter("apiVersion"),    
            appName = request.getParameter("appName"),
            fromDate = request.getParameter("fromDate"),
            apiFilter = request.getParameter("apiFilter");
            toDate = request.getParameter("toDate"),
            site = require("/site/conf/site.json"),
            msg = require("/site/conf/ui-messages.jag"),
            allProviders = "__all_providers__";

    convertToDateObj = function (date) {
        var dateWithoutHour = date.split("\ ")[0].split("-");
        var year = dateWithoutHour[0];
        var month = dateWithoutHour[1] - 1;
        var day = dateWithoutHour[2];
        return new Date(year,month,day);
    }

    dayDiff = function (fromDate,toDate){
        fromDate = convertToDateObj(fromDate);
        toDate = convertToDateObj(toDate);
        return (toDate - fromDate)/(1000*60*60*24);
    }

    if (jagg.getUser() == null) {
        print({
            error: true,
            message: 'AuthenticateError'
        });
    } else {        
        var provider = jagg.getUser().username;
        var MultitenantUtils = Packages.org.wso2.carbon.utils.multitenancy.MultitenantUtils;
        var tenantDomain = MultitenantUtils.getTenantDomain(provider);
        var APIUsageStatisticsClient = Packages.org.wso2.carbon.apimgt.usage.client.APIUsageStatisticsClient;
        var usageStatClient;

        var currentLocation = request.getParameter("currentLocation");
        if (currentLocation != null && currentLocation.indexOf("all-statistics") >= 0 && (!apiFilter || (apiFilter != "myAPIs"))) {
            provider = allProviders;
            if(org.wso2.carbon.utils.multitenancy.MultitenantUtils.isEmailUserName()){
               provider = allProviders + "@" + tenantDomain;
            }
        }

        if(!org.wso2.carbon.utils.multitenancy.MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equals(tenantDomain)){
            provider = org.wso2.carbon.utils.multitenancy.MultitenantUtils.getTenantAwareUsername(provider) + "@" + tenantDomain;
        }

        if (action === "getThrottleDataOfAPIAndApplication") {     

            mod = jagg.module("statistics");

            result = mod.getThrottleDataOfAPIAndApplication(apiName,provider,appName,fromDate,toDate);
            if (result.error == "true") {
                obj = {
                    error: result.error,
                    message: msg.error.backendError(action)
                };
            } else {

                var groupBy = "hour";
                var timeUnitMili = 1000 * 60 * 60;
                var data = {};

                if (dayDiff(fromDate, toDate) > 3){
                    groupBy = "day";
                    timeUnitMili = 1000 * 60 * 60 * 24;
                }

                data.result = result.usage;
                data.groupBy = groupBy;
                data.timeUnitMili = timeUnitMili;

                obj = {
                    error: false,
                    usage: data
                }
            }
            print(obj);

        } else if (action === "getAPIsForThrottleStats") {

            mod = jagg.module("statistics");
            result = mod.getAPIsForThrottleStats(provider,apiName);

            if (result.error == "true") {
                obj = {
                    error: result.error,
                    message: msg.error.backendError(action)
                };
            } else {
                obj = {
                    error: false,
                    usage: result.usage
                }
            }
            print(obj);

        } else if (action === "getFirstAccessTime") {

            mod = jagg.module("statistics");
            provider = jagg.getUser().username;
            result = mod.getFirstAccessTime(provider);

            if (result.error == "true") {
                obj = {
                    error: result.error,
                    message: msg.error.backendError(action)
                };
            } else {
                obj = {
                    error: false,
                    usage: result.usage
                }
            }
            print(obj);

        } else {
            print({
                error: true,
                message: msg.error.invalidAction(action)
            });
        }
    }

}());
%>
