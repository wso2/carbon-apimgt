<%
var APIManagerFactory = Packages.org.wso2.carbon.apimgt.impl.APIManagerFactory;
var user=jagg.getUser().username;
var log = new Log();
var APIIdentifier = Packages.org.wso2.carbon.apimgt.api.model.APIIdentifier;
var APIUtil = Packages.org.wso2.carbon.apimgt.impl.utils.APIUtil;

var updateAPIStatus = function (apiData) {
	var provider=APIUtil.replaceEmailDomain(apiData.provider);
    var apiIdentifierObj = APIIdentifier(provider, apiData.apiName, apiData.version);
    
    try {
        var result = APIManagerFactory.getInstance().getAPIProvider(user).changeLifeCycleStatus(apiIdentifierObj, apiData.status);

	     if (log.isDebugEnabled()) {
	          log.debug("updateAPIStatus : " + apiData.name + "-" + apiData.version);
	     }
	     return result;
       
    } catch (e) {
	     if (e.javaException instanceof org.wso2.carbon.apimgt.api.FaultGatewaysException){
	        return {
	            error:true,
	            message:e.javaException.getFaultGateWayString() + '||warning'
	        };
	     } else {
	        return {
	            error:true,
	            message:e.message.replace(e.message.split(":")[0] + ":", "")
	        };
	     }

    }
};
var isAPIOlderVersionExist = function (api) {
    var log = new Log(),
            provider = jagg.module("manager").getAPIProviderObj();
    try {
        var exist = provider.isAPIOlderVersionExist(api);
        if (log.isDebugEnabled()) {
            log.debug("isAPIOlderVersionExist : " + api.name + "-" + api.version);
        }
        return {
                error:false,
                exist:exist
            };
        
    } catch (e) {
        log.error(e.message);
        return {
            error:true,
            exist:false,
            message:e.message.split(":")[1]

        };
    }
};

var getLifeCyclesEvents = function(api) {
    var log = new Log(),lc,lcs,length,list = [],
            provider = jagg.module("manager").getAPIProviderObj();
    try {
        lcs = provider.getLifeCycleEvents(api);
        if (log.isDebugEnabled()) {
            log.debug("updateAPIStatus : " + api.name + "-" + api.version);
        }
        length = lcs.length;
        for (var i = 0; i < length; i++) {
            lc = lcs[i];
            list.push({
                          username:lc.username,
                          newStatus:lc.newStatus,
                          oldStatus:lc.oldStatus,
                          date:lc.date
                      });
        }
        return {
            error:false,
            lcs:list
        };

    } catch (e) {
        log.error(e.message);
        return {
            error:e,
            lcs:null
        };
    }
}

var getAPILCData = function(api) {
    var provider=APIUtil.replaceEmailDomain(api.provider);
    var identifier = APIIdentifier(provider, api.name, api.version);
    var result=APIManagerFactory.getInstance().getAPIProvider(user).getAPILifeCycleData(identifier);
    var json = APIUtil.convertToString(result);
    var lcJSON = {};
    if ( json != null ) {
    lcJSON = JSON.parse(json);
    }
    return lcJSON;
}

var setCheckListItemVal = function(apiData, checkListItemOrder, checkListItemVal){ 
    var provider=APIUtil.replaceEmailDomain(apiData.provider);
    var apiIdentifier = APIIdentifier(provider, apiData.name, apiData.version);
    try {

        return APIManagerFactory.getInstance().getAPIProvider(user).changeAPILCCheckListItems(apiIdentifier,
                                 parseInt(checkListItemOrder),checkListItemVal);

     } catch (e) {
        log.error(e.message);
        return false;
    }
}

var getAPILCStatus = function(apiData) {
    var provider=APIUtil.replaceEmailDomain(apiData.provider);
    var apiIdentifierObj = APIIdentifier(provider, apiData.name, apiData.version);
    
    try {
        var result = APIManagerFactory.getInstance().getAPIProvider(user).getAPILifeCycleStatus(apiIdentifierObj);

         if (log.isDebugEnabled()) {
              log.debug("getAPILCStatus : " + apiData.name + "-" + apiData.version);
         }
         return result.toUpperCase();
       
    } catch (e) {
         
        log.error(e.message);
        return "ERROR";
    }
};

var getAPILC=function(){
    var tenantDomain = String(jagg.getTenantDomain());
    var username = jagg.getUser().username;
    var lifecycleModule = require('lifecycle');
    var lcApi = lifecycleModule.api;
    var apiProvider = org.wso2.carbon.apimgt.impl.APIManagerFactory.getInstance().getAPIProvider(username);
    var result;
try {
    result= lcApi.getLifecycle(tenantDomain, apiProvider);

    if (log.isDebugEnabled()) {
        log.debug("getAPILifecycle for tenant : " + tenantDomain);
    }
    return result;

    } catch (e) {

        log.error(e.message);
        return "ERROR";
    }
};



%>
