<%
var getAPI = function (api) {
    var api, result, defaultVersion,
            log = new Log(),
            provider = jagg.module("manager").getAPIProviderObj();

    try {
        result = provider.getAPI(api.provider, api.name, api.version);
        defaultVersion=provider.getDefaultAPIVersion(api.provider, api.name);
        hasDefaultVersion=(defaultVersion!=null);
        if (log.isDebugEnabled()) {
            log.debug("getAPI : " + stringify(result));
        }

        api = {
            name:result[0],
            version:result[4],
            description:result[1],
            endpoint:result[2],
            wsdl:result[3],
            tags:result[5],
            availableTiers:result[6],
            status:result[7],
            thumb:result[8],
            context:result[9],
            lastUpdated:result[10],
            subs:result[11],
            templates:result[12],
            sandbox:result[13],
            tierDescs:result[14],
            bizOwner:result[15],
            bizOwnerMail:result[16],
            techOwner:result[17],
            techOwnerMail:result[18],
            wadl:result[19],
            visibility:result[20],
            roles:result[21],
            tenants:result[22],
            epUsername:result[23],
            epPassword:result[24],
            endpointTypeSecured:result[25],
            provider:result[26],
            transport_http:result[27],
            transport_https:result[28],
            apiStores:result[29],
            inSequence:result[30],
            outSequence:result[31],
            subscriptionAvailability:result[32],
            subscriptionTenants:result[33],
            endpointConfig:result[34],
            responseCache:result[35],
            cacheTimeout:result[36],
            availableTiersDisplayNames:result[37],
            faultSequence:result[38],
            destinationStats:result[39],
            resources:result[40],
            scopes:result[41],
            isDefaultVersion:result[42],
            implementation:result[43],
            environments:result[44],
            productionTps:result[46],
            sandboxTps:result[47],
            endpointAuthTypeDigest:result[48],
            corsConfiguration:result[49],
            hasDefaultVersion:hasDefaultVersion,
            currentDefaultVersion:defaultVersion,
            availableSubscriptionPolicy:result[50],
            apiLevelPolicy:result[51]
        };
        return {
            error:false,
            api:api
        };
    } catch (e) {
        log.error(e.message);
        return {
            error:e,
            api:null,
            message:e.message.split(":")[1]
        };
    }
};

var getAPIsByProvider = function (username) {
    var i, length, api, apis,
            list = [],
            log = new Log(),
            provider = jagg.module("manager").getAPIProviderObj();

    try {
        apis = provider.getAPIsByProvider(username);
        if (log.isDebugEnabled()) {
            log.debug("getAPIsByProvider : " + stringify(apis));
        }
        return {
            error:false,
            apis:apis
        };

    } catch (e) {
        log.error(e.message);
        return {
            error:e,
            apis:null,
            message:e.message.split(":")[1]
        };
    }
};

var getAllAPIs = function () {
    var i, length, api, apis,
    list = [],
    log = new Log(),
    provider = jagg.module("manager").getAPIProviderObj();

    try {
        apis = provider.getAllAPIs();
        length = apis.length;
        return {
            error:false,
            apis:apis
        };

    } catch (e) {
        log.error(e.message);
        return {
            error:e,
            apis:null,
            message:e.message.split(":")[1]
        };
    }
};

var getAllAPIDetails = function () {
    var i, length, api, apis,result,resultAPI,
    list = [],
    log = new Log(),
    provider = jagg.module("manager").getAPIProviderObj();

    try {
        apis = provider.getAllAPIs();
        length = apis.length;
        for (i = 0; i < length; i++) {
            api = apis[i];
            resultAPI=getAPI({name:apiName, version:version, provider:provider});


            result=resultAPI.api;
            list.push(result);
        }
        return {
            error:false,
            apis:list
        };

    } catch (e) {
        log.error(e.message);
        return {
            error:e,
            apis:null,
            message:e.message.split(":")[1]
        };
    }
};
var getAllPaginatedAPIs = function (tenantDomain,start,end) {
    var api, result,
            log = new Log(),
            provider = jagg.module("manager").getAPIProviderObj();

    try {
        result = provider.getAllPaginatedAPIs(tenantDomain,start,end);
        if (log.isDebugEnabled()) {
            log.debug("getAllPaginatedAPIs : " + stringify(result.apis));
        }
        return {
            error:false,
            response:result,
            totalLength:result.totalLength,
        };
    } catch (e) {
        log.error(e.message);
        return {
            error:e,
            response:null,
            message:e.message.split(":")[1]
        };
    }
};
%>
