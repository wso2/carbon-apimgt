<%
/*
 * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

    include("/services/constants.jag");
    var appUtils = require("/services/utils.js");
    include("/services/constants.jag");
    var app = require("/site/public/conf/settings.js").AppConfig.app;
    var utils = Packages.org.wso2.carbon.apimgt.impl.utils.APIUtil;
    var log = new Log("Login Callback Endpoint: ");

    var serverUrl = '';
    var forwarded_for = request.getHeader(app.customUrl.forwardedHeader);
    if (app.customUrl.enabled && forwarded_for) {
        serverUrl = "https://" + forwarded_for;
    } else {
        serverUrl = utils.getServerURL();
    }
    var tokenRequestData = {
        "grant_type": "authorization_code",
        "code": request.getParameter("code", "UTF-8"),
        "redirect_uri": serverUrl + app.context + LOGIN_CALLBACK_URL_SUFFIX
    };

    var SystemApplicationDTO = Packages.org.wso2.carbon.apimgt.impl.dao.SystemApplicationDAO;
    var systemApplicationDAO = new SystemApplicationDTO();
    // this is to support migration from admin_publisher to apim_publisher
    var systemApplicationDTO = systemApplicationDAO.getClientCredentialsForApplication(PUBLISHER_CLIENT_APP_NAME, SUPER_TENANT_DOMAIN);
    if (systemApplicationDTO === null) {
        systemApplicationDTO = systemApplicationDAO.getClientCredentialsForApplication(PUBLISHER_CLIENT_APP_NAME_OLD, SUPER_TENANT_DOMAIN);
    }
    var clientId = systemApplicationDTO.getConsumerKey();
    var clientSecret = systemApplicationDTO.getConsumerSecret();
    var Base64 = org.apache.axiom.om.util.Base64;
    var String = Packages.java.lang.String;
    var Integer = Packages.java.lang.Integer;
    var base64encoded = Base64.encode(new String(clientId + ":" + clientSecret).getBytes());
    var tokenEndpoint = appUtils.getLoopbackOrigin() + TOKEN_URL_SUFFIX;
    var result = post(tokenEndpoint, tokenRequestData, {"Authorization": "Basic " + base64encoded});

    response.contentType = "application/json";
    var tokenResponse = JSON.parse(result.data);

    var tokenLength = tokenResponse.access_token.length;
    var accessToken = String(tokenResponse.access_token);

    var idTokenLength = tokenResponse.id_token.length;
    var idToken = String(tokenResponse.id_token);

    var idTokenPart1 = idToken.substring(0, idTokenLength / 2);
    var idTokenPart2 = idToken.substring(idTokenLength / 2, idTokenLength);

    var accessTokenPart1 = accessToken.substring(0, tokenLength / 2);
    var accessTokenPart2 = accessToken.substring(tokenLength / 2, tokenLength);

    var refreshToken = String(tokenResponse.refresh_token);
    tokenLength = tokenResponse.refresh_token.length;
    var refreshTokenPart1 = refreshToken.substring(0, tokenLength / 2);
    var refreshTokenPart2 = refreshToken.substring(tokenLength / 2, tokenLength);

    // Setting access token part 1 as secured HTTP only cookie, Can't restrict the path to /api/am/publisher
    // because partial HTTP only cookie is required for get the user information from access token,
    // hence setting the HTTP only access token path to App context
    var cookie = {
        'name': 'AM_ACC_TOKEN_DEFAULT_P2',
        'value': accessTokenPart2,
        'path': app.context + "/",
        "httpOnly": true,
        "secure": true,
        "maxAge": Integer(tokenResponse.expires_in)
    };
    response.addCookie(cookie);

    cookie = {
        'name': 'AM_ACC_TOKEN_DEFAULT_P2',
        'value': accessTokenPart2,
        'path': "/api/am/publisher/",
        "httpOnly": true,
        "secure": true,
        "maxAge": Integer(tokenResponse.expires_in)
    };
    response.addCookie(cookie);

    cookie = {
        'name': 'AM_REF_TOKEN_DEFAULT_P2',
        'value': refreshTokenPart2,
        'path': app.context + "/",
        "httpOnly": true,
        "secure": true,
        "maxAge": 86400 // TODO: Default value a day, need to get this from idn configs ~tmkb
    };
    response.addCookie(cookie);

    cookie = {
        'name': 'WSO2_AM_TOKEN_1_Default',
        'value': accessTokenPart1,
        'path': app.context + "/",
        "secure": true,
        "maxAge": Integer(tokenResponse.expires_in)
    };
    response.addCookie(cookie);

    cookie = {
        'name': 'WSO2_AM_REFRESH_TOKEN_1_Default',
        'value': refreshTokenPart1,
        'path': app.context + "/",
        "secure": true,
        "maxAge": 86400 // TODO: Default value a day, need to get this from idn configs ~tmkb
    };
    response.addCookie(cookie);

    cookie = {
        'name': 'AM_ID_TOKEN_DEFAULT_P2',
        'value': idTokenPart2,
        'path': app.context + "/services/logout",
        "secure": true,
        "maxAge": Integer(tokenResponse.expires_in)
    };
    response.addCookie(cookie);

    cookie = {
        'name': 'AM_ID_TOKEN_DEFAULT_P1',
        'value': idTokenPart1,
        'path': app.context + "/services/logout",
        "secure": true,
        "maxAge": Integer(tokenResponse.expires_in)
    };
    response.addCookie(cookie);

    var state = request.getParameter("state");
    if (state !== null) {
        state = decodeURIComponent(state);
        if ( state !== '/') {
            response.sendRedirect(app.context + state);
        } else {
            response.sendRedirect(app.context);
        }
    } else {
        response.sendRedirect(app.context);
    }

%>
