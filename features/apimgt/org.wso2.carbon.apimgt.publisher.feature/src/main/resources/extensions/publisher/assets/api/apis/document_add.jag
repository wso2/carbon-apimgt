<%
/*
 *  Copyright (c) 2005-2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 *
 */
var caramel;
require('/modules/publisher.js').exec(function(ctx) {
    var log = new Log('document_add');
    var ref = require('utils').request;
    var responseProcessor = require('utils').response;
    var res = ctx.response;
    var request = ctx.request;
    var server = require('store').server;
    var user = server.current(ctx.session);
    var username = user.username;
    var session = ctx.session;
    var uriMatcher = new URIMatcher(request.getRequestURI());
    var POST_NEW_API_URL = '/{context}/assets/api/apis/addDoc';

    var method = request.getMethod();
    
    var options = ref.getQueryOptions(request.getQueryString());
    var response = ctx.response;
    response.contentType = 'application/json';
    var constants = require("rxt").constants;
    var file;
    if(request.getParameter('sourceType') == 'File'){
        file = request.getFile('fileUpload');
    }
    
    switch (method) {
        case 'GET':
            if (uriMatcher.match(POST_NEW_API_URL)) {
                var apiPublisher = require('apipublisher').provider;
                var apiProxy = apiPublisher.instance(username);
                var apiData = {};
                var action = request.getParameter('action', 'UTF-8');
                apiData.name = request.getParameter('name', 'UTF-8');
                apiData.version = request.getParameter('version', 'UTF-8');
                var provider = request.getParameter('provider', 'UTF-8');
                if (request.getParameter('provider') == null) {
                    apiData.provider = username;
                } else {
                    apiData.provider = request.getParameter('provider', 'UTF-8')
                }

                var data = {};
                var doc = {};

                doc.docName = request.getParameter('docName', 'UTF-8');

                if(action == "getInlineContent"){
                    data = apiProxy.getInlineContent(apiData, doc.docName);
                }

                response = responseProcessor.buildSuccessResponse(response, constants.STATUS_CODES.OK, data);
            } else {
                response = responseProcessor.buildErrorResponse(response,
                    constants.STATUS_CODES.NOT_IMPLEMENTED, 'Unable to locate this GET endpoint');
            }

           
        break;


        case 'POST': // POST endpoints
            options.type = request.getParameter('type');
            if (uriMatcher.match(POST_NEW_API_URL)) { //return assets by type
                var apiPublisher = require('apipublisher').provider;
                var apiProxy = apiPublisher.instance(username);
                var apiData = {};
                var action = request.getParameter('action', 'UTF-8');
                apiData.name = request.getParameter('name', 'UTF-8');
                apiData.version = request.getParameter('version', 'UTF-8');
                var provider = request.getParameter('provider', 'UTF-8');
                if (request.getParameter('provider') == null) {
                    apiData.provider = username;
                } else {
                    apiData.provider = request.getParameter('provider', 'UTF-8')
                }

                var data = {};
                var doc = {};

                doc.docName = request.getParameter('docName', 'UTF-8');
                doc.docType = request.getParameter('docType', 'UTF-8');
                doc.sourceType = request.getParameter('sourceType', 'UTF-8');
                doc.docType = request.getParameter('docType', 'UTF-8');
                doc.sourceURL = request.getParameter('sourceURL');
                doc.summary = request.getParameter('summary', 'UTF-8');
                
                doc.otherTypeName = request.getParameter('otherTypeName', 'UTF-8');
                doc.visibility = request.getParameter('visibility', 'UTF-8');
                apiData.visibility = request.getParameter('visibility', 'UTF-8');

                if ((action == "createDocument" || action == "updateDocument") && doc.sourceType != null && doc.sourceType == 'File') {
                    doc.content = file;
                    doc.fileName = file.getName();
                    doc.contentType = request.getParameter('contentType', 'UTF-8');
                    doc.filePath = request.getParameter('filePath', 'UTF-8');
                }

                
                
                if(action == "deleteDocument"){
                    data = apiProxy.removeDocumentation(apiData, doc.docName,doc.docType);
                }

                if(action == "createDocument"){
                    data = apiProxy.addDocumentation(apiData, doc);
                }

                if(action == "updateDocument"){
                    data = apiProxy.updateDocumentation(apiData, doc);
                }

                if(action == "editInlineContent"){
                    var inlineContent = request.getParameter('inlineContent', 'UTF-8');
                    data = apiProxy.addInlineContent(apiData, doc.docName, inlineContent);
                }
               
                response = responseProcessor.buildSuccessResponse(response, constants.STATUS_CODES.OK, data);
            } else {
                response = responseProcessor.buildErrorResponse(response,
                    constants.STATUS_CODES.NOT_IMPLEMENTED, 'Unable to locate this POST endpoint');
            }
            break;

        default: //other un-implemented endpoints
            response = responseProcessor.buildErrorResponse(response, constants.STATUS_CODES.NOT_IMPLEMENTED,
                'The endpoint that you have requested is not implemented for the ' + method +
                ' method.Try making the request with the appropriate verb' +
                '(hint: create/update operations use POST).');
    }

}, request, response, session); %>