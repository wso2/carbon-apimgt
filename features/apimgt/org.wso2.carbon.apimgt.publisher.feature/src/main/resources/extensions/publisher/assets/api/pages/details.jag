<%
/*
 *  Copyright (c) 2005-2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 *
 */
var caramel;
require('/modules/publisher.js').exec(function(ctx) {
	caramel = require('caramel');
	var ui = require('rxt').ui;
	var asset = require('rxt').asset;
	var server = require('store').server;
	var user = server.current(ctx.session);
	var usr = carbon.server.tenantUser(user.username);
	var uriMatcher = new URIMatcher(ctx.request.getRequestURI());
	var options = uriMatcher.match('/{context}/assets/{type}/{pageName}/{+id}')||uriMatcher.match('/{context}/assets/{type}/{pageName}');
	var log = new Log();
	if(!options){
		response.sendError(400,'Could not locate an endpoint for your request.Make sure that you provide an id');
	}
	else if (!options.id) {
		response.sendError(400, 'An id must be provided when viewing details of a particular asset');
	} else {
		var type = options.type;
		var am = asset.createUserAssetManager(session, type);
		var page = ui.buildPage(session, request);
		var asset = am.get(options.id);
		if (asset == null) {
			response.sendError(404, 'The asset with id: ' + options.id + ' could not be located.');
		} else {
			//Get api resource details
			var apiPublisher =  require('apipublisher').provider;
			var apiProxy = apiPublisher.instance(user.username);
			var api = apiProxy.getAPI(asset.attributes.overview_provider, asset.attributes.overview_name, asset.version).api;
			var output = am.render(asset, page).details();
			api.visibilityLevel = {};

			if(api.visibility == 'restricted') {
				api.visibilityLevel.restricted = true;
			} else {
				api.visibilityLevel.restricted = false;
			}

			var endpointConfig = api.endpointConfig;
			var simplifiedConfig = null;
			if (endpointConfig != null && endpointConfig.trim() != "") {
				simplifiedConfig = {};
				endpointConfig = JSON.parse(api.endpointConfig);
				if (endpointConfig && (endpointConfig.production_endpoints != undefined)) {
					var production_endpoints = [];
					if (endpointConfig.production_endpoints instanceof Array) {
						for (var index = 0; index < endpointConfig.production_endpoints.length; index++) {
							production_endpoints.push(
									{"url": endpointConfig.production_endpoints[index].url});
						}
						simplifiedConfig.production_endpoints = production_endpoints;
					}
					else {
						production_endpoints.push(
								{"url": endpointConfig.production_endpoints.url});
					}
					simplifiedConfig.production_endpoints = production_endpoints;
				} else {
					simplifiedConfig.production_endpoints = null;
				}

				//Setting production, sanbox urls
				if (endpointConfig && (endpointConfig.production_failovers != undefined)) {
					var production_failovers = [];
					if (endpointConfig.production_failovers instanceof Array) {
						for (var index = 0; index < endpointConfig.production_failovers.length; index++) {
							production_failovers.push(
									{"url": endpointConfig.production_failovers[index].url});
						}
						simplifiedConfig.production_failovers = production_failovers;
					}
					else {
						production_endpoints.push(
								{"url": endpointConfig.production_failovers.url});
					}
					simplifiedConfig.production_failovers = production_failovers;
				} else {
					simplifiedConfig.production_failovers = null;
				}

				if (endpointConfig && (endpointConfig.sandbox_endpoints != undefined)) {
					var sandbox_endpoints = [];
					if (endpointConfig.sandbox_endpoints instanceof Array) {
						for (var index = 0; index < endpointConfig.sandbox_endpoints.length; index++) {
							sandbox_endpoints.push(
									{"url": endpointConfig.sandbox_endpoints[index].url});
						}
						simplifiedConfig.sandbox_endpoints = sandbox_endpoints;
					}
					else {
						sandbox_endpoints.push(
								{"url": endpointConfig.sandbox_endpoints.url});
					}
					simplifiedConfig.sandbox_endpoints = sandbox_endpoints;
				} else {
					simplifiedConfig.sandbox_endpoints = null;
				}

				if (endpointConfig && (endpointConfig.sandbox_failovers != undefined)) {
					var sandbox_failovers = [];
					if (endpointConfig.sandbox_failovers instanceof Array) {
						for (var index = 0; index < endpointConfig.sandbox_failovers.length; index++) {
							sandbox_failovers.push(
									{"url": endpointConfig.sandbox_failovers[index].url});
						}
						simplifiedConfig.sandbox_failovers = sandbox_failovers;
					}
					else {
						sandbox_failovers.push(
								{"url": endpointConfig.sandbox_failovers.url});
					}
					simplifiedConfig.sandbox_failovers = sandbox_failovers;
				} else {
					simplifiedConfig.sandbox_failovers = null;
				}
			}
			api.simplifiedConfig = simplifiedConfig;
			api.publishedEnvionments = api.environments.split(",");
			output.api = api;
			caramel.render(output);
		}
	}
}, request, response, session); %>
