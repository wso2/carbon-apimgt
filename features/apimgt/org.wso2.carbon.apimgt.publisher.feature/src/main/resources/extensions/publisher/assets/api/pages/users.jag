<%
/*
 *  Copyright (c) 2005-2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 *
 */
var caramel;
require('/modules/publisher.js').exec(function(ctx) {
	caramel = require('caramel');
	var ui = require('rxt').ui;
	var asset = require('rxt').asset;
	var carbon = require('carbon');
	var server = require('store').server;
	var user = server.current(ctx.session);
	var username = user.username;
	var uriMatcher = new URIMatcher(ctx.request.getRequestURI());
	var options = uriMatcher.match('/{context}/assets/{type}/{pageName}/{+id}')||uriMatcher.match('/{context}/assets/{type}/{pageName}');
	var log = new Log('api-usage-by-versiion');
	if(!options){
		response.sendError(400,'Could not locate an endpoint for your request.Make sure that you provide an id');
	}
	else if (!options.id) {
		response.sendError(400, 'An id must be provided when viewing details of a particular asset');
	} else {
		var type = options.type;
		var am = asset.createUserAssetManager(session, type);
		var page = ui.buildPage(session, request);
		var assets = am.get(options.id);
		if (assets == null) {
			response.sendError(404, 'The asset with id: ' + options.id + ' could not be located.');
		} else {
			var apiPublisher =  require('apipublisher').provider;
			var apiProxy = apiPublisher.instance(username);
			var apiIdentifier = {};
			apiIdentifier.name = assets.attributes.overview_name;
			apiIdentifier.version = assets.attributes.overview_version;
			apiIdentifier.provider = assets.attributes.overview_provider;
			var result = apiProxy.getSubscribersOfAPI(apiIdentifier);
			var subscribers = result.subscribers;
			var output = am.render(assets, page).details();
			output.apiIdentifier = apiIdentifier;
			if(subscribers != null && subscribers.length != 0) {
				output.subscribers = subscribers;
			} else {
				output.subscribers = null;
			}
			//Set language specific helper messages and names
			var locale = require('/extensions/assets/api/locale/locale_en.json');
			output.locale = locale;
			caramel.render(output);
		}
	}
}, request, response, session); %>
