<%
/*
 *  Copyright (c) 2005-2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 *
 */
var caramel;
require('/modules/publisher.js').exec(function(ctx) {
    caramel = require('caramel');
    var ui = require('rxt').ui;
    var asset = require('rxt').asset;
    var uriMatcher = new URIMatcher(ctx.request.getRequestURI());
    var options = uriMatcher.match('/{context}/assets/{type}/{pageName}/{+id}') || uriMatcher.match('/{context}/assets/{type}/{pageName}');
    var log = new Log();

    if (!options) {
        response.sendError(400, 'Could not locate an endpoint for your request.Make sure that you provide an id');
    } else if (!options.id) {
        response.sendError(400, 'An id must be provided when viewing details of a particular asset');
    } else {
        var type = options.type;
        var am = asset.createUserAssetManager(session, type);
        var documentAssetManager = asset.createUserAssetManager(session, 'document');
        var page = ui.buildPage(session, request);
        var assets = am.get(options.id);
        var documents = documentAssetManager.list();
        //show visibility levels
        var apiPublisher =  require('apipublisher').provider;
        var apiProxy = apiPublisher.instance(ctx.username);
        var canShow = apiProxy.isDocVisibilityCanShow();

        var user = server.current(ctx.session);
        var usr = carbon.server.tenantUser(user.username);
        var tenantDomain = carbon.server.tenantDomain({tenantId: usr.tenantId});
        if (assets == null) {
            response.sendError(404, 'The asset with id: ' + options.id + ' could not be located.');
        } else {
            var apiId = {};
            apiId.provider = assets.attributes.overview_provider;
            apiId.name = assets.attributes.overview_name;
            apiId.version = assets.version;
            var allDocs = apiProxy.getAllDocumentation(apiId);

            page.documents = allDocs;
            var output = am.render(assets, page).details();
            //output.showAPIDocVisibility=canShow;
            output.cuser.tenantDomain = tenantDomain;
            output.assets.showAPIDocVisibility = canShow;
            output.assets.visibility_display = canShow;
            var tables = output.assets.tables;
               if(tables.length > 1){
                    tables.splice(1,1);
               }
               var firstOne = tables[0];
               output.assets.provider = firstOne.fields.provider.value;

               //remove 'null' strings
               var docs = output.documents;
               for (i = 0; i < docs.length; i++) { 
                var doc = docs[i];
                var attributes = doc;
                var editContent = true;
                if(attributes.filePath == null || attributes.filePath == 'null'){
                    attributes.filePath = null;
                }else{
                    editContent = false;
                }

                if(attributes.sourceUrl == null || attributes.sourceUrl == 'null'){
                    attributes.sourceUrl = null;
                }else{
                    editContent = false;
                }

                if(editContent){
                    attributes.overview_editContent = true;
                }

                if(doc.type == 'HOWTO'){
                    doc.type_display = 'How To';
                }

                if(doc.type == 'SAMPLES'){
                    doc.type_display = 'Samples';
                }

                if(doc.type == 'PUBLIC_FORUM'){
                    doc.type_display = 'Public Forum';
                }

                if(doc.type == 'SUPPORT_FORUM'){
                    doc.type_display = 'Support Forum';
                }

                if(doc.type == 'API_MESSAGE_FORMAT'){
                    doc.type_display = 'API Message Format';
                }

                if(doc.type == 'SWAGGER_DOC'){
                    doc.type_display = 'Swagger API Definition';
                }

                if(doc.type == 'OTHER'){
                    doc.type_display = 'Other';
                }

                if(canShow){
                    if(attributes.visibility == 'API_LEVEL'){
                        attributes.visibility_display = 'Same as API visibility';
                    }else if(attributes.visibility == 'OWNER_ONLY'){
                        attributes.visibility_display = 'Private';
                    }else if(attributes.visibility == 'PRIVATE'){
                        attributes.visibility_display = 'Visible to my domain';
                    }
                }else{
                    attributes.visibility_display = null;
                    output.assets.visibility_display = null;
                }

            }
            caramel.render(output);
        }
    }
}, request, response, session); %>