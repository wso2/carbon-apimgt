<%
/*
 * Copyright (c) WSO2 Inc. (http://wso2.com) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 Description: Invoke routed api endpoints
 Filename : assets.jag
 * can be extended by asset type

 ENDPOINTS:
 GET
 /apis/assets/swagger
 */

require('/modules/publisher.js').exec(function (ctx) {
	var log = new Log('asset_api_endpoints');
	var ref = require('utils').request;
	var responseProcessor = require('utils').response;
	var res = ctx.response;
	var req = ctx.request;
	var server = require('store').server;
	var user = server.current(ctx.session);
	var username = user.username;
	var session = ctx.session;
	var uriMatcher = new URIMatcher(req.getRequestURI());
	var GET_SWAGGER_DOC_URL = '/{context}/assets/api/apis/swagger';
	var method = req.getMethod();
	var options = ref.getQueryOptions(req.getQueryString());
	var response = ctx.response;
	var CONTENT_TYPE_JSON = 'application/json';
	var action;
	response.contentType = CONTENT_TYPE_JSON;
	var constants = require("rxt").constants;
	switch (method) {
		case 'GET':// GET endpoints
			options.type = req.getParameter('type');
			action = req.getParameter('action');
			if (action == 'swaggerDoc') {//return assets by type
				var apiPublisher =  require('apipublisher').provider;
				var apiProxy = apiPublisher.instance(username);
				var apiData = {};
				apiData.apiName = request.getParameter("name", "UTF-8");
				apiData.version = request.getParameter("version");
				if (request.getParameter("provider") == null) {
					apiData.provider = username;
				} else {
					apiData.provider = request.getParameter("provider")
				}
				var result = apiProxy.getSwagger20Definition(apiData.provider, apiData.apiName, apiData.version);
				if(!result.error) {
					response = responseProcessor.buildSuccessResponse(response, constants.STATUS_CODES.OK, result.data);
				} else {
					response = responseProcessor.buildErrorResponse(response,
																	constants.STATUS_CODES.INTERNAL_SERVER_ERROR,
																	'Error while getting swagger resource');
				}
			} else if (action == 'sessionSwaggerDoc') {
				var swagger = session.get("swagger");
				session.put("swagger", null);
				//@todo Error reporting
				response = responseProcessor.buildSuccessResponse(response, constants.STATUS_CODES.OK, swagger);

			} else if (action == 'swaggerDocFromFile') {
				var file = request.getFile("swagger-file");
				file.open("r");
				var swaggerContent = file.readAll();
				var swagger = JSON.parse(swaggerContent);
				file.close();
				//@todo Error reporting
				response = responseProcessor.buildSuccessResponse(response, constants.STATUS_CODES.OK, swagger);
			} else {
				response = responseProcessor.buildErrorResponse(response,
																constants.STATUS_CODES.NOT_IMPLEMENTED, 'Unable to locate this GET endpoint');
			}
			break;
		case 'POST':// GET endpoints
			action = req.getParameter('action');
			if (action == 'swaggerFromUrl') {
				var data = obtainData(request);
				var url = data.swagger_url;
				url = url.trim();
				//@todo need to validate returned swagger v2
				var data = {};
				var content = get(url, data, "json");
				var swaggerJson = content.data;
				//@todo Error reporting
				response = responseProcessor.buildSuccessResponse(response, constants.STATUS_CODES.OK, swaggerJson);
			} else {
				response = responseProcessor.buildErrorResponse(response,
																constants.STATUS_CODES.NOT_IMPLEMENTED, 'Unable to locate this POST endpoint');
			}
			break;

		default://other un-implemented endpoints
			response = responseProcessor.buildErrorResponse(response, constants.STATUS_CODES.NOT_IMPLEMENTED,
															'The endpoint that you have requested is not implemented for the ' + method +
															' method.Try making the request with the appropriate verb' +
															'(hint: create/update operations use POST).');
	}

	//TODO Move to common place
	/**
	 * Allows request data to be sent in either the request body or
	 * as url encoded query parameters
	 * @param  {Object} req  Request object
	 * @return {Object}      An object which contains data from request body and url encoded parameters
	 */
	function obtainData(req) {
		var data = {};
		var contentType = parseContentType(req.getContentType());
		if (contentType === CONTENT_TYPE_JSON) {
			try {
				data = req.getContent();
			} catch (e) {
				log.error('Unable to obtain content from request', e);
			}
		}
		var params = req.getAllParameters('UTF-8');
		//Mix the content with request parameters
		for (var key in params) {
			data[key] = params[key];
		}
		return data;
	};

	function parseContentType(contentTypString) {
		var comps = contentTypString.split(';');
		return comps[0];
	};
}, request, response, session); %>
