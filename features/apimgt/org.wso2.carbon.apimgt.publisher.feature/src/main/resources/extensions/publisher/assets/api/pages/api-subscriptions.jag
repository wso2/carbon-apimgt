<%
/*
 *  Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 *
 */
var caramel;

require('/modules/publisher.js').exec(function (ctx) {
    caramel = require('caramel');
    var log = new Log('pages_api_subsciptions: ');
    var ui = require('rxt').ui;
    var asset = require('rxt').asset;
    var uriMatcher = new URIMatcher(ctx.request.getRequestURI());
    var options = uriMatcher.match('/{context}/assets/{type}/{pageName}');
    var type = options.type;
    var am = asset.createUserAssetManager(ctx.session, type);
    var page = ui.buildPage(ctx.session, ctx.request);
    var output = am.render(page)._custom();
    var user = server.current(ctx.session);
    var usr = carbon.server.tenantUser(user.username);
    var tenantDomain = carbon.server.tenantDomain({tenantId: usr.tenantId});

    var apiPublisher = require('apipublisher').provider;
    var apiProxy = apiPublisher.instance(user.username);


    var apiSubDataResult = apiProxy.getAllAPIUsageByProvider(user.username);

    if (apiSubDataResult != null && apiSubDataResult.apis != null) {
        var apis = apiSubDataResult.apis;
        var apisArray = [];
        for (var b in apis) {
            var apiSubData = apis[b];
            var userId = apiSubData.userId;
            var appId = apiSubData.appId;
            var appName = apiSubData.applicationName;

            var apiDataArr = [];
            var subscriptions = apiSubData.apiSubscriptions;
            for (var a in subscriptions) {
                var apisJson = subscriptions[a];
                apiDataArr.push({
                    "apiStatus": apisJson.subStatus,
                    "isBlocked": apisJson.subStatus == "BLOCKED" ? true : false,
                    "isProdOnly": apisJson.subStatus == "PROD_ONLY_BLOCKED" ? true : false,
                    "isNotHold": apisJson.subStatus != "ON_HOLD" ? true : false,
                    "apiName": apisJson.apiId.apiName,
                    "apiVersion": apisJson.apiId.version
                });
            }
            apisArray.push({
                "userName": userId,
                "appId": appId,
                "application": appName,
                "apiSubscriptions": apiDataArr
            });
        }

        output.apis = apisArray;
    }

    caramel.render(output);
}, request, response, session);
%>
