<%
/*
 *  Copyright (c) 2005-2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 *
 */
var caramel;
require('/modules/publisher.js').exec(function(ctx) {
	var log = new Log();
	var ui = require('rxt').ui;
	var carbon = require('carbon');
	var server = require('store').server;
	var user = server.current(ctx.session);
	var asset = require('rxt').asset;
	var request = ctx.request;
	caramel = require('caramel');
	var am;
	var uriMatcher = new URIMatcher(ctx.request.getRequestURI());
	var options = uriMatcher.match('/{context}/assets/{type}/{pageName}/{+id}') || uriMatcher.match('/{context}/assets/{type}/{pageName}');
	var page;
	var output;
	am = asset.createUserAssetManager(ctx.session, options.type);
	//Render page
	page = ui.buildPage(ctx.session, ctx.request);
	if(options.id){
		var assets;
		//Set assets id
		try {
			assets = am.get(options.id);
		}
		catch(e){
			log.error(e);
			ctx.response.sendError(404,'Asset was not found');
			return;
		}

		output = am.render(assets, page)._custom();
		var apiPublisher =  require('apipublisher').provider;
		var apiProxy = apiPublisher.instance(user.username);
		var api = apiProxy.getAPI(assets.attributes.overview_provider, assets.attributes.overview_name, assets.attributes.overview_version).api;
		output.api = api;
		output.wsdl = api.wsdl;
		api.id = options.id;
		var public_visibility,private_visibility;
		//formatting visibility
		if(api.visibility == 'public') {
			public_visibility = true;
		}
		if(api.visibility == 'private') {
			private_visibility = true;
		}
		output.id=api.id;
		output.public_visibility = public_visibility;
		output.private_visibility = private_visibility;

	} else {
		var assets = {};
		output = am.render(assets, page)._custom();
		var apiMetaData = {};
		output.apiMetaData = apiMetaData;
		//Set api meta data related when loading the design page with available session data
		if(session.get("wsdl")) {
			output.apiMetaData.wsdl = session.get("wsdl");
			session.put("wsdl", null);
		} else if (session.get("swagger")) {
			output.apiMetaData.swaggerAvailable = true;
		} else {
			output.apiMetaData.swaggerAvailable = false;
		}
	}

	//Check configurations specific properties
	var config = require('/extensions/assets/api/config/config.json');
	output.config = config;
	caramel.render(output);
}, request, response, session);
%>
