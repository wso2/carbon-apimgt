<%
/*
 *  Copyright (c) 2005-2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 *
 */
var caramel;
require('/modules/publisher.js').exec(function(ctx) {
	var log = new Log();

	var rxtModule = require('rxt');
	var carbon = require('carbon');
	var server = require('store').server;
	var user = server.current(ctx.session);
	var usr = carbon.server.tenantUser(user.username);
	var tenantDomain =  carbon.server.tenantDomain({tenantId: usr.tenantId});
	caramel = require('caramel');
	var am;
	var uriMatcher = new URIMatcher(ctx.request.getRequestURI());
	var options = uriMatcher.match('/{context}/assets/{type}/{pageName}/{+id}') || uriMatcher.match('/{context}/assets/{type}/{pageName}');
	var page;
	var output;
	if (!options.id) {
		ctx.response.sendError(400, 'Cannot render the implementation details without an asset id');
		return;
	}
	am = asset.createUserAssetManager(ctx.session, options.type);
	try {
		asset = am.get(options.id);
	}
	catch(e){
		log.error(e);
		ctx.response.sendError(404,'Asset was not found');
		return;
	}
	
	var apiPublisher =  require('apipublisher').provider;
	var apiProxy = apiPublisher.instance(user.username);
	var api = apiProxy.getAPI(asset.attributes.overview_provider, asset.attributes.overview_name, asset.version).api;

	page = rxtModule.ui.buildPage(ctx.session, ctx.request);
	output = am.render(asset,page)._custom();

	//formatting transport
	if(api.transport_http == 'checked') {
		api.transport_http_configured = true;
	}
	if(api.transport_https == 'checked') {
		api.transport_https_configured = true;
	}

	//formatting sequences if empty
	if(api.inSequence == "") {
		api.inSequence = null;
	}

	//formatting sequences if empty
	if(api.faultSequence == "") {
		api.faultSequence = null;
	}

	//formatting sequences if empty
	if(api.outSequence == "") {
		api.outSequence = null;
	}
	var environmentsList = apiProxy.getEnvironments().environments;
	var availableEnvironments = api.environments;
	var filteredEnvironmentList = new Array();
	var environment;
	if(availableEnvironments=="none") {
		for (i = 0; i < environmentsList.length; i++) {
			environment = new Object();
			environment.name = environmentsList[i].name;
			environment.type = environmentsList[i].type;
			environment.description = environmentsList[i].description;
			environment.contained = false;
			filteredEnvironmentList.push(environment);
		}
	} else {
		for(i=0 ; i< environmentsList.length; i++) {
			if(availableEnvironments.indexOf(environmentsList[i].name) >= 0){
				environment = new Object();
				environment.name = environmentsList[i].name;
				environment.type = environmentsList[i].type;
				environment.description = environmentsList[i].description;
				environment.contained = true;
				filteredEnvironmentList.push(environment);
			} else {
				environment = new Object();
				environment.name = environmentsList[i].name;
				environment.type = environmentsList[i].type;
				environment.description = environmentsList[i].description;
				environment.contained = false;
				filteredEnvironmentList.push(environment);
			}
		}
	}
	api.filteredEnvironmentList = filteredEnvironmentList;
	api.id = options.id;
	output.api = api;
	output.api.isSynapseGateway = apiProxy.isSynapseGateway().isSynapseGateway;
	//Set available tiers and last tiers
	var configuredTiers = apiProxy.getTiers(tenantDomain).tiers;
	for (var i = 0; i < configuredTiers.length; i++) {
		if (i < (configuredTiers.length - 1)) {
			configuredTiers[i].last = false;
		} else {
			configuredTiers[i].last = true;
		}
	}

	if(!api.subscribersCount || api.subscribersCount==0){
		api.subs=false;
	}else{
		api.subs=true;
	}
	if(api.visibility == 'public') {
		api.publicVisibility = true;
	}

	if(api.subscriptionAvailability == 'current_tenant') {
		api.subscriptionAvailabilityCurrentTenant = true;
		api.subscriptionAvailabilityAllTenants = false;
		api.subscriptionAvailabilitySpecificTenants = false;
	} else if (api.subscriptionAvailability == 'all_tenants') {
		api.subscriptionAvailabilityCurrentTenant = false;
		api.subscriptionAvailabilityAllTenants = true;
		api.subscriptionAvailabilitySpecificTenants = false;
	} else if (api.subscriptionAvailability == 'specific_tennats') {
		api.subscriptionAvailabilityCurrentTenant = false;
		api.subscriptionAvailabilityAllTenants = false;
		api.subscriptionAvailabilitySpecificTenants = true;
	}

	output.api.isMultipleTenantsAvailable = apiProxy.isMultipleTenantsAvailable().status;
	//Filter tiers which need to filter in order to select which tiers are slected and which are not
	var avaiblableTiers = api.availableTiers.split(",");
	var filteredTiers = new Array();
	var tier;
	for (var i = 0; i < configuredTiers.length; i++) {
		tier = new Object();
		tier.tierName = configuredTiers[i].tierName;
		tier.tierDisplayName = configuredTiers[i].tierDisplayName;
		tier.available = false;
		for(var j = 0; j < avaiblableTiers.length; j++) {
			if(avaiblableTiers[j] == configuredTiers[i].tierName) {
				tier.available = true;
			}
		}
		filteredTiers.push(tier);
	}

	var storeUrl = apiProxy.getAPIStoreURL().url;
	output.api.configuredTiers = configuredTiers;
	output.api.filteredTiers = filteredTiers;
	output.api.storeUrl = storeUrl;

	output.api.isPermitted = apiProxy.hasPublishPermission().permitted;

	//Check configurations specific properties
	var config = require('/extensions/assets/api/config/config.json');
	output.config = config;

	//Set language specific helper messages and names
	var locale = require('/extensions/assets/api/locale/locale_en.json');
	output.locale = locale;

	caramel.render(output);
}, request, response, session);
%>
