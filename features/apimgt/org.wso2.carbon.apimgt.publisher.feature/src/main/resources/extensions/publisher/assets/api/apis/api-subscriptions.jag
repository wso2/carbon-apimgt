<%
/*
 * Copyright (c) 2015 WSO2 Inc. (http://wso2.com) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

require('/modules/publisher.js').exec(function (ctx) {
    var log = new Log('api_subscriptions_endpoint:');
    var ref = require('utils').request;
    var responseProcessor = require('utils').response;
    var req = ctx.request;

    var server = require('store').server;
    var user = server.current(ctx.session);
    var httpMethod = req.getMethod();

    var response = ctx.response;
    response.contentType = 'application/json';
    var constants = require("rxt").constants;
    var params = req.getAllParameters('UTF-8');

    var API_SUBSCRIPTIONS_URL = '/{context}/assets/{type}/apis/{pageName}/{action}';
    var uriMatcher = new URIMatcher(req.getRequestURI());
    var uriOptions;

    switch (httpMethod) {
        case 'POST':// POST endpoints
            uriOptions = uriMatcher.match(API_SUBSCRIPTIONS_URL);
            var apiPublisher = require('apipublisher').provider;
            var apiProxy = apiPublisher.instance(user.username);

            if (uriOptions.action == 'getUUID') {
                var apiUUIDResult = apiProxy.getUUIDByApi(params.apiProvider, params.apiName, params.apiVersion);
                if (apiUUIDResult != null) {
                    response = responseProcessor.buildSuccessResponse(response,
                            constants.STATUS_CODES.OK, apiUUIDResult);
                }
            } else if (uriOptions.action == 'updateSubscription') {
                var apiSubResult = apiProxy.updateSubscription(params.apiProvider,
                        params.apiName, params.apiVersion, params.appId, params.status);
                response = responseProcessor.buildSuccessResponse(response,
                        constants.STATUS_CODES.OK, apiSubResult || "success");
            }
            break;

        default://other un-implemented endpoints
            response = responseProcessor.buildErrorResponse(response, constants.STATUS_CODES.NOT_IMPLEMENTED,
                    'The endpoint that you have requested is not implemented for the ' + httpMethod +
                    ' method.Try making the request with the appropriate verb' +
                    '(hint: create/update operations use POST).');
    }
}, request, response, session);
%>
