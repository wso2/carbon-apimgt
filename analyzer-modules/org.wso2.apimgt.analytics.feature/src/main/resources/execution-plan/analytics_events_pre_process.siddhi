@App:name('analytics_events_pre_process')

@source(type='wso2event', @map(type='wso2event'))
Define stream CompositeResponseStream (
api STRING,
context STRING,
version STRING,
publisher STRING,
subscription_policy STRING,
uri_template STRING,
method STRING,
consumer_key STRING,
application_name STRING,
application_id STRING,
application_owner STRING,
user_id STRING,
subscriber STRING,
request_count INT,
request_event_time LONG,
gateway_domain STRING,
gateway_ip STRING,
is_throttled BOOL,
throttled_reason STRING,
throttled_policy STRING,
client_ip STRING,
user_agent STRING,
host_name STRING,
response_count INT,
response_event_time LONG,
cache_hit  BOOL,
response_size  INT,
protocol  STRING,
response_code  INT,
destination  STRING,
response_time  INT,
service_time  INT,
backend_time  INT,
backend_latency  INT,
security_latency  INT,
throttling_latency  INT,
request_mediation_latency  INT,
response_mediation_latency  INT,
other_latency  INT
);

@sink(type='inMemory', topic='apim.analytics.request', @map(type='passThrough'))
Define stream RequestStream (
api STRING,
context STRING,
version STRING,
publisher STRING,
subscription_policy STRING,
uri_template STRING,
method STRING,
consumer_key STRING,
application_name STRING,
application_id STRING,
application_owner STRING,
user_id STRING,
subscriber STRING,
request_count INT,
request_event_time LONG,
gateway_domain STRING,
gateway_ip STRING,
is_throttled BOOL,
throttled_reason STRING,
throttled_policy STRING,
client_ip STRING,
user_agent STRING,
host_name STRING
);

@sink(type='inMemory', topic='apim.analytics.response', @map(type='passThrough'))
Define stream ResponseStream (
api STRING,
context STRING,
version STRING,
publisher STRING,
subscription_policy STRING,
uri_template STRING,
method STRING,
consumer_key STRING,
application_name STRING,
application_id STRING,
application_owner STRING,
user_id STRING,
subscriber STRING,
response_count INT,
response_event_time LONG,
gateway_domain STRING,
gateway_ip STRING,
client_ip STRING,
user_agent STRING,
host_name STRING,
cache_hit  BOOL,
response_size  INT,
protocol  STRING,
response_code  INT,
destination  STRING
);

@sink(type='inMemory', topic='apim.analytics.execution.time', @map(type='passThrough'))
Define stream ExecutionTimeStream (
api STRING,
context STRING,
version STRING,
publisher STRING,
subscription_policy STRING,
uri_template STRING,
method STRING,
consumer_key STRING,
application_name STRING,
application_id STRING,
application_owner STRING,
user_id STRING,
subscriber STRING,
gateway_domain STRING,
gateway_ip STRING,
client_ip STRING,
user_agent STRING,
host_name STRING,
response_time  INT,
service_time  INT,
backend_time  INT,
backend_latency  INT,
security_latency  INT,
throttling_latency  INT,
request_mediation_latency  INT,
response_mediation_latency  INT,
other_latency  INT
);

from CompositeResponseStream select
api ,context ,version ,publisher ,subscription_policy ,uri_template ,method ,consumer_key ,application_name ,
application_id ,application_owner ,user_id ,subscriber ,request_count ,request_event_time ,gateway_domain ,gateway_ip ,
is_throttled ,throttled_reason ,throttled_policy ,client_ip ,user_agent ,host_name
insert into RequestStream;

from CompositeResponseStream select
api ,context ,version ,publisher ,subscription_policy ,uri_template ,method ,consumer_key ,application_name ,
application_id ,application_owner ,user_id ,subscriber ,response_count ,response_event_time ,gateway_domain ,gateway_ip,
client_ip ,user_agent ,host_name ,cache_hit  ,response_size  ,protocol  ,response_code  ,destination
insert into ResponseStream;

from CompositeResponseStream select
api ,context ,version ,publisher ,subscription_policy ,uri_template ,method ,consumer_key ,application_name ,
application_id ,application_owner ,user_id ,subscriber ,gateway_domain ,gateway_ip ,client_ip ,user_agent ,host_name ,
response_time  ,service_time  ,backend_time  ,backend_latency  ,security_latency  ,throttling_latency  ,
request_mediation_latency  ,response_mediation_latency  ,other_latency
insert into ExecutionTimeStream;