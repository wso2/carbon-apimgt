@App:name('throttle_summarization')

@source(type='wso2event', @map(type='wso2event'))
Define stream ThrottleStream (
api STRING,
context STRING,
version STRING,
publisher STRING,
subscription_policy STRING,
uri_template STRING,
method STRING,
consumer_key STRING,
application_name STRING,
application_id STRING,
application_owner STRING,
user_id STRING,
subscriber STRING,
throttle_count INT,
throttle_event_time LONG,
gateway_domain STRING,
gateway_ip STRING,
throttled_reason STRING,
throttled_policy STRING,
host_name STRING
);

@Store(type="rdbms", jdbc.url="jdbc:h2:./database/AM_STAT_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000;AUTO_SERVER=TRUE",
username="wso2carbon",
password="wso2carbon",field.length="api:254", pool.properties="driverClassName:org.h2.Driver" )
@PrimaryKey("api, version, publisher, context, consumer_key, application_name, user_id, uri_template, method, year,month, day, hour, minute")
define table api_throttle_summary (api string, version string, publisher string, context string, consumer_key string,
application_name string, user_id string, uri_template string, method string, throttle_count long, time long, year int ,
month int, day int, hour int, minute int);

-- per second throttle
from ThrottleStream#window.externalTimeBatch(throttle_event_time, 1 sec, 0, 10 sec, true)
select throttle_event_time as startTime, api, version, publisher, context, consumer_key, application_name, user_id,
uri_template, method, max(throttle_event_time) as throttleTime, count() as total_throttle_count
group by api, version, publisher, context, consumer_key, application_name, user_id, uri_template, method
insert into perSecondThrottleTemp;

from perSecondThrottleTemp
select (startTime - (startTime % 1000)) as startTime,
convert((startTime - (startTime % 1000)), 'string') as facetStartTime,
time:extract(startTime, 'year') as year,
time:extract(startTime, 'month') as month,
time:extract(startTime, 'day') as day,
time:extract(startTime, 'hour') as hour,
time:extract(startTime, 'minute') as minute,
time:extract(startTime, 'second') as second,
api, version, publisher, context, consumer_key, application_name, user_id, uri_template, method,
throttleTime, total_throttle_count
insert into perSecondThrottles;


-- per minute throttle
from perSecondThrottles
select startTime,
str:concat(facetStartTime, '_', api, '_', version, '_', publisher, '_', context, '_', consumer_key, '_',
    uri_template, '_', method, '_', user_id) as uniqueId,
year, month, day, hour, minute, second, consumer_key, context, api, version, uri_template, method,
throttleTime, user_id, publisher, total_throttle_count, application_name
insert into perSecondThrottlesWithUniqueId;

/*from perSecondThrottlesWithUniqueId#window.uniqueExternalTimeBatch(uniqueId, startTime, 60 sec, 59999 millisec, 10 sec, true)*/
from perSecondThrottlesWithUniqueId#window.externalTimeBatch(startTime, 60 sec, 59999 millisec, 10 sec, true)
select startTime, consumer_key, context, api, version, uri_template, method,
max(throttleTime) as throttleTime, user_id, publisher, sum(total_throttle_count) as total_throttle_count,
application_name
group by consumer_key, context, api, version, user_id, publisher, uri_template, method
insert into perMinuteThrottlesTemp;


from perMinuteThrottlesTemp select
api, context, version, publisher, uri_template, method, consumer_key, application_name,
user_id, total_throttle_count, throttleTime as throttle_time,
time:extract(startTime, 'year') as year,
time:extract(startTime, 'month') as month,
time:extract(startTime, 'day') as day,
time:extract(startTime, 'hour') as hour,
time:extract(startTime, 'minute') as minute
insert into perMinuteThrottles;

@info(name = 'query1')
from perMinuteThrottles
select api, version, publisher, context, consumer_key, application_name, user_id , uri_template, method,
total_throttle_count as throttle_count, throttle_time as time,
year, month, day, hour, minute
update or insert into api_throttle_summary
on api_throttle_summary.api == api
and api_throttle_summary.version == version
and api_throttle_summary.publisher == publisher
and api_throttle_summary.context == context
and api_throttle_summary.consumer_key == consumer_key
and api_throttle_summary.application_name == application_name
and api_throttle_summary.user_id == user_id
and api_throttle_summary.uri_template == uri_template
and api_throttle_summary.method == method
and api_throttle_summary.year == year
and api_throttle_summary.month == month
and api_throttle_summary.day == day
and api_throttle_summary.hour == hour
and api_throttle_summary.minute == minute
;