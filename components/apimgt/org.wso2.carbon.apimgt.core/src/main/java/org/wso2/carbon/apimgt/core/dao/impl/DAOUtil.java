/*
 *
 *   Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 *
 */

package org.wso2.carbon.apimgt.core.dao.impl;


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Locale;

/**
 * Provides Utility functionality required by the DAO layer
 */
public class DAOUtil {
    private static final Logger log = LoggerFactory.getLogger(DAOUtil.class);
    protected static final String DB_NAME_POSTGRESQL = "PostgreSQL";
    private static DataSource dataSource;

    public static synchronized void initialize(DataSource dataSource) {
        if (DAOUtil.dataSource != null) {
            return;
        }

        DAOUtil.dataSource = dataSource;
    }

    /**
     * Utility method to get a new database connection
     *
     * @return Connection
     * @throws java.sql.SQLException if failed to get Connection
     */

    static Connection getConnection() throws SQLException {
        if (dataSource != null) {
            return dataSource.getConnection();
        }
        throw new SQLException("Datasource is not configured properly.");
    }

    /**
     * Get is auto commit enabled
     *
     * @return true if auto commit is enabled, false otherwise
     * @throws SQLException Error while getting if auto commit is enabled
     */
    public static boolean isAutoCommit() throws SQLException {
        return dataSource.getDatasource().isAutoCommit();
    }

    static String getParameterString(int numberOfParameters) {
        List<String> questionMarks = new ArrayList<>(Collections.nCopies(numberOfParameters, "?"));
        return String.join(",", questionMarks);
    }

    static List<String> commaSeperatedStringToList(String strValue) {
        if (strValue != null && !strValue.isEmpty()) {
            return Arrays.asList(strValue.split("\\s*,\\s*"));
        }

        return new ArrayList<>();
    }

    /**
     * workaround for https://www.postgresql.org/message-id/
     * CAJcWjJHmimJDfirCsLaYrkxtO0FCxNAE25AW%2B4-LR7fOrA8u4Q%40mail.gmail.com
     */
    public static String getConvertedAutoGeneratedColumnName(String dbProductName, String columnName) {
        String autoGeneratedColumnName = columnName;
        if (DB_NAME_POSTGRESQL.equals(dbProductName)) {
            autoGeneratedColumnName = columnName.toLowerCase(Locale.ROOT);
            if (log.isDebugEnabled()) {
                log.debug("Database product name is PostgreSQL. Converting column name " + columnName +
                        " to lowercase (" + autoGeneratedColumnName + ").");
            }
        }

        return autoGeneratedColumnName;
    }

    public static void clearDataSource() {
        dataSource = null;
    }
}

