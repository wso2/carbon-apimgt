{
  "openapi" : "3.0.0",
  "info" : {
    "title" : "WSO2 API Manager - Endpoint Registry",
    "description" : "This specifies a **RESTful API** for Enpoint Registry.\n",
    "version" : "0.1"
  },
  "servers" : [ {
    "url" : "https://apis.wso2.com/api/am/endpoint-registry/v1"
  }, {
    "url" : "http://apis.wso2.com/api/am/endpoint-registry/v1"
  } ],
  "paths" : {
    "/registries" : {
      "get" : {
        "tags" : [ "Registries" ],
        "summary" : "Retrieve all Registries\n",
        "description" : "This operation provides you an array of available Registries.\n",
        "operationId" : "getRegistries",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "description" : "**Search condition**.\nYou can search for a registry by specifying the registry name as \"query\" attribute.\n\nEg.\n\"prodServer\" will match a registry entry if the name is exactly \"prodServer\".\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sortBy",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "registryName" ]
          }
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "asc", "desc" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK.\nArray of Registries is returned.\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RegistryArray"
                }
              }
            }
          }
        },
        "security" : [ {
          "ReadRegistry" : [ "registry:view" ]
        } ]
      },
      "post" : {
        "tags" : [ "Registries" ],
        "summary" : "Create a new Registry",
        "description" : "This operation can be used to create a new Registry specifying the details of the Registry in the payload.\n",
        "operationId" : "addRegistry",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Registry"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created.\nSuccessful response with the newly created Registry object as entity in the body.\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Registry"
                }
              }
            }
          },
          "405" : {
            "description" : "Bad Request.\nInvalid request or validation error.\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "415" : {
            "description" : "Unsupported Media Type.\nThe entity of the request was in a not supported format.\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security" : [ {
          "WriteRegistry" : [ "registry:write" ]
        } ]
      }
    },
    "/registries/{registryId}" : {
      "get" : {
        "tags" : [ "Registries" ],
        "summary" : "Get details of a Registry",
        "description" : "Using this operation, you can retrieve complete details of a single Registry using the RegistryId.\n",
        "operationId" : "getRegistryByUUID",
        "parameters" : [ {
          "name" : "registryId",
          "in" : "path",
          "description" : "ID of the Registry",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK.\nRequested Registry is returned\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Registry"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found.\nRequested Registry does not exist.\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security" : [ {
          "ReadRegistry" : [ "registry:view" ]
        } ]
      },
      "put" : {
        "tags" : [ "Registries" ],
        "summary" : "Update an existing Registry",
        "description" : "This operation can be used to update an existing Endpoint Registry\n",
        "operationId" : "updateRegistry",
        "parameters" : [ {
          "name" : "registryId",
          "in" : "path",
          "description" : "ID of the Registry",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Registry"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK.\nUpdated Registry is returned\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Registry"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found.\nRequested Registry does not exist.\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security" : [ {
          "WriteRegistry" : [ "registry:write" ]
        } ]
      },
      "delete" : {
        "tags" : [ "Registries" ],
        "summary" : "Delete an Endpoint Registry",
        "description" : "This operation can be used to delete an existing Registry proving the Id of the Registry.\n",
        "operationId" : "deleteRegistry",
        "parameters" : [ {
          "name" : "registryId",
          "in" : "path",
          "description" : "uuid of the Registry",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully deleted.\n"
          },
          "400" : {
            "description" : "Invalid Request\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found.\nRequested Registry does not exist.\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security" : [ {
          "WriteRegistry" : [ "registry:write" ]
        } ]
      }
    },
    "/registries/{registryId}/entries" : {
      "get" : {
        "tags" : [ "Registries Entries" ],
        "summary" : "Get All entries in the registry",
        "operationId" : "getAllEntriesInRegistry",
        "parameters" : [ {
          "name" : "registryId",
          "in" : "path",
          "description" : "uuid of the Registry",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "**Search condition**.\n\nYou can search for a registry entry by specifying the entry name as \"query\" attribute.\n\nEg.\n\"pizzaServer\" will match a registry entry if the name is exactly \"pizzaServer\".\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sortBy",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "definitionType", "serviceType" ]
          }
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "asc", "desc" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Array of entries in Registry is returned.\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RegistryEntryArray"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid Request\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found.\nRequested Registry does not exist.\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security" : [ {
          "ReadRegistryEntry" : [ "registry:entry_view" ]
        } ]
      }
    },
    "/registries/{registryId}/entry" : {
      "post" : {
        "tags" : [ "Registry Entries" ],
        "summary" : "Create a new Registry Entry",
        "description" : "This operation can be used to create a new Registry Entry specifying the details of the Entry in the payload.\n",
        "operationId" : "createRegistryEntry",
        "parameters" : [ {
          "name" : "registryId",
          "in" : "path",
          "description" : "uuid of the registry",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "$ref" : "#/components/schemas/RegistryEntrySchema"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created.\nSuccessful response with the newly created Registry Entry as entity in the body.\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RegistryEntry"
                }
              }
            }
          },
          "405" : {
            "description" : "Bad Request.\nInvalid request or validation error.\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "415" : {
            "description" : "Unsupported Media Type.\nThe entity of the request was in a not supported format.\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security" : [ {
          "WriteRegistryEntry" : [ "registry:entry_write" ]
        } ]
      }
    },
    "/registries/{registryId}/entries/{entryId}" : {
      "get" : {
        "tags" : [ "Registry Entries" ],
        "summary" : "Retrieve a specific Entry in a Registry",
        "description" : "Using this operation, you can retrieve a specific entry in a single Registry using the EntryId and RegistryId.\n",
        "operationId" : "getRegistryEntryByUuid",
        "parameters" : [ {
          "name" : "registryId",
          "in" : "path",
          "description" : "uuid of the registry",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "entryId",
          "in" : "path",
          "description" : "uuid of the registry entry",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Requested Entry in Registry is returned.\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RegistryEntryArray"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid Request\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found.\nRequested Registry or Entry does not exist.\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security" : [ {
          "ReadRegistryEntry" : [ "registry:entry_view" ]
        } ]
      },
      "put" : {
        "tags" : [ "Registry Entries" ],
        "summary" : "Update an existing Entry in a Registry",
        "description" : "This operation can be used to update an existing Entry in Registry with the details of the Entry in the payload.\n",
        "operationId" : "updateRegistryEntry",
        "parameters" : [ {
          "name" : "registryId",
          "in" : "path",
          "description" : "uuid of the registry",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "entryId",
          "in" : "path",
          "description" : "uuid of the registry entry",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "$ref" : "#/components/schemas/RegistryEntrySchema"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated.\nSuccessful response with the newly updated Registry Entry as entity in the body.\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RegistryEntry"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid Request\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found.\nRequested Registry or Entry does not exist.\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security" : [ {
          "WriteRegistryEntry" : [ "registry:entry_write" ]
        } ]
      },
      "delete" : {
        "tags" : [ "Registry Entries" ],
        "summary" : "Delete an Entry in a Registry",
        "description" : "This operation can be used to delete an existing Entry in Registry by specifying the registryId and entryId.\n",
        "operationId" : "deleteRegistryEntry",
        "parameters" : [ {
          "name" : "registryId",
          "in" : "path",
          "description" : "uuid of the registry",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "entryId",
          "in" : "path",
          "description" : "uuid of the registry entry",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully deleted the registry entry.\n"
          },
          "400" : {
            "description" : "Invalid Request\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found.\nRequested Registry or Entry does not exist.\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security" : [ {
          "WriteRegistryEntry" : [ "registry:entry_write" ]
        } ]
      }
    }
  },
  "components" : {
    "schemas" : {
      "Registry" : {
        "title" : "Registry object",
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "example" : "Dev Registry"
          },
          "id" : {
            "type" : "string",
            "example" : "01234567-0123-0123-0123-012345678901"
          },
          "type" : {
            "type" : "string",
            "example" : "wso2",
            "enum" : [ "wso2", "k8", "etcd" ]
          },
          "mode" : {
            "type" : "string",
            "example" : "Read_Only",
            "enum" : [ "Read_Only", "Read_Write" ]
          }
        }
      },
      "RegistryArray" : {
        "title" : "Registry Array",
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/Registry"
        }
      },
      "RegistryEntryArray" : {
        "title" : "Registry Entry Array",
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/RegistryEntry"
        }
      },
      "RegistryEntry" : {
        "title" : "The Registry Entry object",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "example" : "01234567-0123-0123-0123-012345678901"
          },
          "entryName" : {
            "type" : "string",
            "example" : "Pizzashack-Endpoint"
          },
          "service-url" : {
            "type" : "string",
            "example" : "http://localhost/pizzashack"
          },
          "serviceType" : {
            "type" : "string",
            "description" : "Type of the backend connecting to",
            "example" : "REST",
            "enum" : [ "REST", "SOAP_1_1", "GQL", "WS" ]
          },
          "definitionType" : {
            "type" : "string",
            "description" : "The type of the provided API definition",
            "example" : "OAS",
            "enum" : [ "OAS", "WSDL1", "WSDL2", "GQL-SDL" ]
          },
          "definitionUrl" : {
            "type" : "string",
            "example" : "http://localhost/pizzashack?swagger.json"
          },
          "metadata" : {
            "type" : "string",
            "example" : "{ \"mutualTLS\" : true }"
          }
        }
      },
      "RegistryEntrySchema" : {
        "title" : "The Registry Entry Schema object",
        "required" : [ "definitionFile", "registryEntry" ],
        "type" : "object",
        "properties" : {
          "registryEntry" : {
            "$ref" : "#/components/schemas/RegistryEntry"
          },
          "definitionFile" : {
            "type" : "string",
            "format" : "binary"
          }
        }
      },
      "Error" : {
        "title" : "Error object returned with 4XX HTTP Status",
        "required" : [ "code", "message" ],
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "format" : "int64"
          },
          "message" : {
            "type" : "string",
            "description" : "Error message."
          },
          "description" : {
            "type" : "string",
            "description" : "A detail description about the error message.\n"
          },
          "moreInfo" : {
            "type" : "string",
            "description" : "Preferably an url with more details about the error.\n"
          },
          "error" : {
            "type" : "array",
            "description" : "If there are more than one error list them out.\nFor example, list out validation errors by each field.\n",
            "items" : {
              "$ref" : "#/components/schemas/ErrorListItem"
            }
          }
        }
      },
      "ErrorListItem" : {
        "title" : "Description of individual errors that may have occurred during a request.",
        "required" : [ "code", "message" ],
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string"
          },
          "message" : {
            "type" : "string",
            "description" : "Description about individual errors occurred\n"
          },
          "description" : {
            "type" : "string",
            "description" : "A detail description about the error message.\n"
          }
        }
      },
      "limit" : {
        "type" : "integer",
        "description" : "Maximum limit of items to return.\n",
        "default" : 25
      },
      "offset" : {
        "type" : "integer",
        "description" : "Starting point within the complete list of items qualified.\n",
        "default" : 0
      }
    },
    "securitySchemes" : {
      "ReadRegistry" : {
        "type" : "oauth2",
        "flows" : {
          "authorizationCode" : {
            "authorizationUrl" : "https://example.com/oauth/authorize",
            "tokenUrl" : "https://example.com/oauth/token",
            "scopes" : {
              "scope" : "registry:view"
            }
          }
        }
      },
      "WriteRegistry" : {
        "type" : "oauth2",
        "flows" : {
          "authorizationCode" : {
            "authorizationUrl" : "https://example.com/oauth/authorize",
            "tokenUrl" : "https://example.com/oauth/token",
            "scopes" : {
              "scope" : "registry:write"
            }
          }
        }
      },
      "ReadRegistryEntry" : {
        "type" : "oauth2",
        "flows" : {
          "authorizationCode" : {
            "authorizationUrl" : "https://example.com/oauth/authorize",
            "tokenUrl" : "https://example.com/oauth/token",
            "scopes" : {
              "scope" : "registry:entry_view"
            }
          }
        }
      },
      "WriteRegistryEntry" : {
        "type" : "oauth2",
        "flows" : {
          "authorizationCode" : {
            "authorizationUrl" : "https://example.com/oauth/authorize",
            "tokenUrl" : "https://example.com/oauth/token",
            "scopes" : {
              "scope" : "registry:entry_write"
            }
          }
        }
      }
    }
  }
}