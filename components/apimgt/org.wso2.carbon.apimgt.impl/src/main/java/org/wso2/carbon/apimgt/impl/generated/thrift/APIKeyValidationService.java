/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.wso2.carbon.apimgt.impl.generated.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class APIKeyValidationService {

  public interface Iface {

    public APIKeyValidationInfoDTO validateKey(String context, String version, String accessToken, String sessionId, String requiredAuthenticationLevel, String clientDomain, String matchingResource, String httpVerb) throws APIKeyMgtException, APIManagementException, org.apache.thrift.TException;

    public List<URITemplate> getAllURITemplates(String context, String apiVersion, String sessionId) throws APIKeyMgtException, APIManagementException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void validateKey(String context, String version, String accessToken, String sessionId, String requiredAuthenticationLevel, String clientDomain, String matchingResource, String httpVerb, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.validateKey_call> resultHandler) throws org.apache.thrift.TException;

    public void getAllURITemplates(String context, String apiVersion, String sessionId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getAllURITemplates_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public APIKeyValidationInfoDTO validateKey(String context, String version, String accessToken, String sessionId, String requiredAuthenticationLevel, String clientDomain, String matchingResource, String httpVerb) throws APIKeyMgtException, APIManagementException, org.apache.thrift.TException
    {
      send_validateKey(context, version, accessToken, sessionId, requiredAuthenticationLevel, clientDomain, matchingResource, httpVerb);
      return recv_validateKey();
    }

    public void send_validateKey(String context, String version, String accessToken, String sessionId, String requiredAuthenticationLevel, String clientDomain, String matchingResource, String httpVerb) throws org.apache.thrift.TException
    {
      validateKey_args args = new validateKey_args();
      args.setContext(context);
      args.setVersion(version);
      args.setAccessToken(accessToken);
      args.setSessionId(sessionId);
      args.setRequiredAuthenticationLevel(requiredAuthenticationLevel);
      args.setClientDomain(clientDomain);
      args.setMatchingResource(matchingResource);
      args.setHttpVerb(httpVerb);
      sendBase("validateKey", args);
    }

    public APIKeyValidationInfoDTO recv_validateKey() throws APIKeyMgtException, APIManagementException, org.apache.thrift.TException
    {
      validateKey_result result = new validateKey_result();
      receiveBase(result, "validateKey");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.apiKeyMgtException != null) {
        throw result.apiKeyMgtException;
      }
      if (result.apiMgtException != null) {
        throw result.apiMgtException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "validateKey failed: unknown result");
    }

    public List<URITemplate> getAllURITemplates(String context, String apiVersion, String sessionId) throws APIKeyMgtException, APIManagementException, org.apache.thrift.TException
    {
      send_getAllURITemplates(context, apiVersion, sessionId);
      return recv_getAllURITemplates();
    }

    public void send_getAllURITemplates(String context, String apiVersion, String sessionId) throws org.apache.thrift.TException
    {
      getAllURITemplates_args args = new getAllURITemplates_args();
      args.setContext(context);
      args.setApiVersion(apiVersion);
      args.setSessionId(sessionId);
      sendBase("getAllURITemplates", args);
    }

    public List<URITemplate> recv_getAllURITemplates() throws APIKeyMgtException, APIManagementException, org.apache.thrift.TException
    {
      getAllURITemplates_result result = new getAllURITemplates_result();
      receiveBase(result, "getAllURITemplates");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.apiKeyMgtException != null) {
        throw result.apiKeyMgtException;
      }
      if (result.apiMgtException != null) {
        throw result.apiMgtException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllURITemplates failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void validateKey(String context, String version, String accessToken, String sessionId, String requiredAuthenticationLevel, String clientDomain, String matchingResource, String httpVerb, org.apache.thrift.async.AsyncMethodCallback<validateKey_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      validateKey_call method_call = new validateKey_call(context, version, accessToken, sessionId, requiredAuthenticationLevel, clientDomain, matchingResource, httpVerb, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class validateKey_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String context;
      private String version;
      private String accessToken;
      private String sessionId;
      private String requiredAuthenticationLevel;
      private String clientDomain;
      private String matchingResource;
      private String httpVerb;
      public validateKey_call(String context, String version, String accessToken, String sessionId, String requiredAuthenticationLevel, String clientDomain, String matchingResource, String httpVerb, org.apache.thrift.async.AsyncMethodCallback<validateKey_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.context = context;
        this.version = version;
        this.accessToken = accessToken;
        this.sessionId = sessionId;
        this.requiredAuthenticationLevel = requiredAuthenticationLevel;
        this.clientDomain = clientDomain;
        this.matchingResource = matchingResource;
        this.httpVerb = httpVerb;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("validateKey", org.apache.thrift.protocol.TMessageType.CALL, 0));
        validateKey_args args = new validateKey_args();
        args.setContext(context);
        args.setVersion(version);
        args.setAccessToken(accessToken);
        args.setSessionId(sessionId);
        args.setRequiredAuthenticationLevel(requiredAuthenticationLevel);
        args.setClientDomain(clientDomain);
        args.setMatchingResource(matchingResource);
        args.setHttpVerb(httpVerb);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public APIKeyValidationInfoDTO getResult() throws APIKeyMgtException, APIManagementException, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_validateKey();
      }
    }

    public void getAllURITemplates(String context, String apiVersion, String sessionId, org.apache.thrift.async.AsyncMethodCallback<getAllURITemplates_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllURITemplates_call method_call = new getAllURITemplates_call(context, apiVersion, sessionId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllURITemplates_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String context;
      private String apiVersion;
      private String sessionId;
      public getAllURITemplates_call(String context, String apiVersion, String sessionId, org.apache.thrift.async.AsyncMethodCallback<getAllURITemplates_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.context = context;
        this.apiVersion = apiVersion;
        this.sessionId = sessionId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllURITemplates", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllURITemplates_args args = new getAllURITemplates_args();
        args.setContext(context);
        args.setApiVersion(apiVersion);
        args.setSessionId(sessionId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<URITemplate> getResult() throws APIKeyMgtException, APIManagementException, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllURITemplates();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("validateKey", new validateKey());
      processMap.put("getAllURITemplates", new getAllURITemplates());
      return processMap;
    }

    private static class validateKey<I extends Iface> extends org.apache.thrift.ProcessFunction<I, validateKey_args> {
      public validateKey() {
        super("validateKey");
      }

      protected validateKey_args getEmptyArgsInstance() {
        return new validateKey_args();
      }

      protected validateKey_result getResult(I iface, validateKey_args args) throws org.apache.thrift.TException {
        validateKey_result result = new validateKey_result();
        try {
          result.success = iface.validateKey(args.context, args.version, args.accessToken, args.sessionId, args.requiredAuthenticationLevel, args.clientDomain, args.matchingResource, args.httpVerb);
        } catch (APIKeyMgtException apiKeyMgtException) {
          result.apiKeyMgtException = apiKeyMgtException;
        } catch (APIManagementException apiMgtException) {
          result.apiMgtException = apiMgtException;
        }
        return result;
      }
    }

    private static class getAllURITemplates<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllURITemplates_args> {
      public getAllURITemplates() {
        super("getAllURITemplates");
      }

      protected getAllURITemplates_args getEmptyArgsInstance() {
        return new getAllURITemplates_args();
      }

      protected getAllURITemplates_result getResult(I iface, getAllURITemplates_args args) throws org.apache.thrift.TException {
        getAllURITemplates_result result = new getAllURITemplates_result();
        try {
          result.success = iface.getAllURITemplates(args.context, args.apiVersion, args.sessionId);
        } catch (APIKeyMgtException apiKeyMgtException) {
          result.apiKeyMgtException = apiKeyMgtException;
        } catch (APIManagementException apiMgtException) {
          result.apiMgtException = apiMgtException;
        }
        return result;
      }
    }

  }

  public static class validateKey_args implements org.apache.thrift.TBase<validateKey_args, validateKey_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("validateKey_args");

    private static final org.apache.thrift.protocol.TField CONTEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("context", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("accessToken", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField REQUIRED_AUTHENTICATION_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("requiredAuthenticationLevel", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField CLIENT_DOMAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("clientDomain", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField MATCHING_RESOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("matchingResource", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField HTTP_VERB_FIELD_DESC = new org.apache.thrift.protocol.TField("httpVerb", org.apache.thrift.protocol.TType.STRING, (short)8);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new validateKey_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new validateKey_argsTupleSchemeFactory());
    }

    public String context; // required
    public String version; // required
    public String accessToken; // required
    public String sessionId; // required
    public String requiredAuthenticationLevel; // required
    public String clientDomain; // required
    public String matchingResource; // required
    public String httpVerb; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONTEXT((short)1, "context"),
      VERSION((short)2, "version"),
      ACCESS_TOKEN((short)3, "accessToken"),
      SESSION_ID((short)4, "sessionId"),
      REQUIRED_AUTHENTICATION_LEVEL((short)5, "requiredAuthenticationLevel"),
      CLIENT_DOMAIN((short)6, "clientDomain"),
      MATCHING_RESOURCE((short)7, "matchingResource"),
      HTTP_VERB((short)8, "httpVerb");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONTEXT
            return CONTEXT;
          case 2: // VERSION
            return VERSION;
          case 3: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          case 4: // SESSION_ID
            return SESSION_ID;
          case 5: // REQUIRED_AUTHENTICATION_LEVEL
            return REQUIRED_AUTHENTICATION_LEVEL;
          case 6: // CLIENT_DOMAIN
            return CLIENT_DOMAIN;
          case 7: // MATCHING_RESOURCE
            return MATCHING_RESOURCE;
          case 8: // HTTP_VERB
            return HTTP_VERB;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONTEXT, new org.apache.thrift.meta_data.FieldMetaData("context", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("accessToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REQUIRED_AUTHENTICATION_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("requiredAuthenticationLevel", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CLIENT_DOMAIN, new org.apache.thrift.meta_data.FieldMetaData("clientDomain", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MATCHING_RESOURCE, new org.apache.thrift.meta_data.FieldMetaData("matchingResource", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HTTP_VERB, new org.apache.thrift.meta_data.FieldMetaData("httpVerb", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(validateKey_args.class, metaDataMap);
    }

    public validateKey_args() {
    }

    public validateKey_args(
      String context,
      String version,
      String accessToken,
      String sessionId,
      String requiredAuthenticationLevel,
      String clientDomain,
      String matchingResource,
      String httpVerb)
    {
      this();
      this.context = context;
      this.version = version;
      this.accessToken = accessToken;
      this.sessionId = sessionId;
      this.requiredAuthenticationLevel = requiredAuthenticationLevel;
      this.clientDomain = clientDomain;
      this.matchingResource = matchingResource;
      this.httpVerb = httpVerb;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public validateKey_args(validateKey_args other) {
      if (other.isSetContext()) {
        this.context = other.context;
      }
      if (other.isSetVersion()) {
        this.version = other.version;
      }
      if (other.isSetAccessToken()) {
        this.accessToken = other.accessToken;
      }
      if (other.isSetSessionId()) {
        this.sessionId = other.sessionId;
      }
      if (other.isSetRequiredAuthenticationLevel()) {
        this.requiredAuthenticationLevel = other.requiredAuthenticationLevel;
      }
      if (other.isSetClientDomain()) {
        this.clientDomain = other.clientDomain;
      }
      if (other.isSetMatchingResource()) {
        this.matchingResource = other.matchingResource;
      }
      if (other.isSetHttpVerb()) {
        this.httpVerb = other.httpVerb;
      }
    }

    public validateKey_args deepCopy() {
      return new validateKey_args(this);
    }

    @Override
    public void clear() {
      this.context = null;
      this.version = null;
      this.accessToken = null;
      this.sessionId = null;
      this.requiredAuthenticationLevel = null;
      this.clientDomain = null;
      this.matchingResource = null;
      this.httpVerb = null;
    }

    public String getContext() {
      return this.context;
    }

    public validateKey_args setContext(String context) {
      this.context = context;
      return this;
    }

    public void unsetContext() {
      this.context = null;
    }

    /** Returns true if field context is set (has been assigned a value) and false otherwise */
    public boolean isSetContext() {
      return this.context != null;
    }

    public void setContextIsSet(boolean value) {
      if (!value) {
        this.context = null;
      }
    }

    public String getVersion() {
      return this.version;
    }

    public validateKey_args setVersion(String version) {
      this.version = version;
      return this;
    }

    public void unsetVersion() {
      this.version = null;
    }

    /** Returns true if field version is set (has been assigned a value) and false otherwise */
    public boolean isSetVersion() {
      return this.version != null;
    }

    public void setVersionIsSet(boolean value) {
      if (!value) {
        this.version = null;
      }
    }

    public String getAccessToken() {
      return this.accessToken;
    }

    public validateKey_args setAccessToken(String accessToken) {
      this.accessToken = accessToken;
      return this;
    }

    public void unsetAccessToken() {
      this.accessToken = null;
    }

    /** Returns true if field accessToken is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessToken() {
      return this.accessToken != null;
    }

    public void setAccessTokenIsSet(boolean value) {
      if (!value) {
        this.accessToken = null;
      }
    }

    public String getSessionId() {
      return this.sessionId;
    }

    public validateKey_args setSessionId(String sessionId) {
      this.sessionId = sessionId;
      return this;
    }

    public void unsetSessionId() {
      this.sessionId = null;
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return this.sessionId != null;
    }

    public void setSessionIdIsSet(boolean value) {
      if (!value) {
        this.sessionId = null;
      }
    }

    public String getRequiredAuthenticationLevel() {
      return this.requiredAuthenticationLevel;
    }

    public validateKey_args setRequiredAuthenticationLevel(String requiredAuthenticationLevel) {
      this.requiredAuthenticationLevel = requiredAuthenticationLevel;
      return this;
    }

    public void unsetRequiredAuthenticationLevel() {
      this.requiredAuthenticationLevel = null;
    }

    /** Returns true if field requiredAuthenticationLevel is set (has been assigned a value) and false otherwise */
    public boolean isSetRequiredAuthenticationLevel() {
      return this.requiredAuthenticationLevel != null;
    }

    public void setRequiredAuthenticationLevelIsSet(boolean value) {
      if (!value) {
        this.requiredAuthenticationLevel = null;
      }
    }

    public String getClientDomain() {
      return this.clientDomain;
    }

    public validateKey_args setClientDomain(String clientDomain) {
      this.clientDomain = clientDomain;
      return this;
    }

    public void unsetClientDomain() {
      this.clientDomain = null;
    }

    /** Returns true if field clientDomain is set (has been assigned a value) and false otherwise */
    public boolean isSetClientDomain() {
      return this.clientDomain != null;
    }

    public void setClientDomainIsSet(boolean value) {
      if (!value) {
        this.clientDomain = null;
      }
    }

    public String getMatchingResource() {
      return this.matchingResource;
    }

    public validateKey_args setMatchingResource(String matchingResource) {
      this.matchingResource = matchingResource;
      return this;
    }

    public void unsetMatchingResource() {
      this.matchingResource = null;
    }

    /** Returns true if field matchingResource is set (has been assigned a value) and false otherwise */
    public boolean isSetMatchingResource() {
      return this.matchingResource != null;
    }

    public void setMatchingResourceIsSet(boolean value) {
      if (!value) {
        this.matchingResource = null;
      }
    }

    public String getHttpVerb() {
      return this.httpVerb;
    }

    public validateKey_args setHttpVerb(String httpVerb) {
      this.httpVerb = httpVerb;
      return this;
    }

    public void unsetHttpVerb() {
      this.httpVerb = null;
    }

    /** Returns true if field httpVerb is set (has been assigned a value) and false otherwise */
    public boolean isSetHttpVerb() {
      return this.httpVerb != null;
    }

    public void setHttpVerbIsSet(boolean value) {
      if (!value) {
        this.httpVerb = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONTEXT:
        if (value == null) {
          unsetContext();
        } else {
          setContext((String)value);
        }
        break;

      case VERSION:
        if (value == null) {
          unsetVersion();
        } else {
          setVersion((String)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccessToken();
        } else {
          setAccessToken((String)value);
        }
        break;

      case SESSION_ID:
        if (value == null) {
          unsetSessionId();
        } else {
          setSessionId((String)value);
        }
        break;

      case REQUIRED_AUTHENTICATION_LEVEL:
        if (value == null) {
          unsetRequiredAuthenticationLevel();
        } else {
          setRequiredAuthenticationLevel((String)value);
        }
        break;

      case CLIENT_DOMAIN:
        if (value == null) {
          unsetClientDomain();
        } else {
          setClientDomain((String)value);
        }
        break;

      case MATCHING_RESOURCE:
        if (value == null) {
          unsetMatchingResource();
        } else {
          setMatchingResource((String)value);
        }
        break;

      case HTTP_VERB:
        if (value == null) {
          unsetHttpVerb();
        } else {
          setHttpVerb((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONTEXT:
        return getContext();

      case VERSION:
        return getVersion();

      case ACCESS_TOKEN:
        return getAccessToken();

      case SESSION_ID:
        return getSessionId();

      case REQUIRED_AUTHENTICATION_LEVEL:
        return getRequiredAuthenticationLevel();

      case CLIENT_DOMAIN:
        return getClientDomain();

      case MATCHING_RESOURCE:
        return getMatchingResource();

      case HTTP_VERB:
        return getHttpVerb();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONTEXT:
        return isSetContext();
      case VERSION:
        return isSetVersion();
      case ACCESS_TOKEN:
        return isSetAccessToken();
      case SESSION_ID:
        return isSetSessionId();
      case REQUIRED_AUTHENTICATION_LEVEL:
        return isSetRequiredAuthenticationLevel();
      case CLIENT_DOMAIN:
        return isSetClientDomain();
      case MATCHING_RESOURCE:
        return isSetMatchingResource();
      case HTTP_VERB:
        return isSetHttpVerb();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof validateKey_args)
        return this.equals((validateKey_args)that);
      return false;
    }

    public boolean equals(validateKey_args that) {
      if (that == null)
        return false;

      boolean this_present_context = true && this.isSetContext();
      boolean that_present_context = true && that.isSetContext();
      if (this_present_context || that_present_context) {
        if (!(this_present_context && that_present_context))
          return false;
        if (!this.context.equals(that.context))
          return false;
      }

      boolean this_present_version = true && this.isSetVersion();
      boolean that_present_version = true && that.isSetVersion();
      if (this_present_version || that_present_version) {
        if (!(this_present_version && that_present_version))
          return false;
        if (!this.version.equals(that.version))
          return false;
      }

      boolean this_present_accessToken = true && this.isSetAccessToken();
      boolean that_present_accessToken = true && that.isSetAccessToken();
      if (this_present_accessToken || that_present_accessToken) {
        if (!(this_present_accessToken && that_present_accessToken))
          return false;
        if (!this.accessToken.equals(that.accessToken))
          return false;
      }

      boolean this_present_sessionId = true && this.isSetSessionId();
      boolean that_present_sessionId = true && that.isSetSessionId();
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (!this.sessionId.equals(that.sessionId))
          return false;
      }

      boolean this_present_requiredAuthenticationLevel = true && this.isSetRequiredAuthenticationLevel();
      boolean that_present_requiredAuthenticationLevel = true && that.isSetRequiredAuthenticationLevel();
      if (this_present_requiredAuthenticationLevel || that_present_requiredAuthenticationLevel) {
        if (!(this_present_requiredAuthenticationLevel && that_present_requiredAuthenticationLevel))
          return false;
        if (!this.requiredAuthenticationLevel.equals(that.requiredAuthenticationLevel))
          return false;
      }

      boolean this_present_clientDomain = true && this.isSetClientDomain();
      boolean that_present_clientDomain = true && that.isSetClientDomain();
      if (this_present_clientDomain || that_present_clientDomain) {
        if (!(this_present_clientDomain && that_present_clientDomain))
          return false;
        if (!this.clientDomain.equals(that.clientDomain))
          return false;
      }

      boolean this_present_matchingResource = true && this.isSetMatchingResource();
      boolean that_present_matchingResource = true && that.isSetMatchingResource();
      if (this_present_matchingResource || that_present_matchingResource) {
        if (!(this_present_matchingResource && that_present_matchingResource))
          return false;
        if (!this.matchingResource.equals(that.matchingResource))
          return false;
      }

      boolean this_present_httpVerb = true && this.isSetHttpVerb();
      boolean that_present_httpVerb = true && that.isSetHttpVerb();
      if (this_present_httpVerb || that_present_httpVerb) {
        if (!(this_present_httpVerb && that_present_httpVerb))
          return false;
        if (!this.httpVerb.equals(that.httpVerb))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(validateKey_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      validateKey_args typedOther = (validateKey_args)other;

      lastComparison = Boolean.valueOf(isSetContext()).compareTo(typedOther.isSetContext());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContext()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.context, typedOther.context);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVersion()).compareTo(typedOther.isSetVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, typedOther.version);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccessToken()).compareTo(typedOther.isSetAccessToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessToken, typedOther.accessToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSessionId()).compareTo(typedOther.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, typedOther.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRequiredAuthenticationLevel()).compareTo(typedOther.isSetRequiredAuthenticationLevel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequiredAuthenticationLevel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requiredAuthenticationLevel, typedOther.requiredAuthenticationLevel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientDomain()).compareTo(typedOther.isSetClientDomain());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientDomain()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientDomain, typedOther.clientDomain);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMatchingResource()).compareTo(typedOther.isSetMatchingResource());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMatchingResource()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchingResource, typedOther.matchingResource);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHttpVerb()).compareTo(typedOther.isSetHttpVerb());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHttpVerb()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.httpVerb, typedOther.httpVerb);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("validateKey_args(");
      boolean first = true;

      sb.append("context:");
      if (this.context == null) {
        sb.append("null");
      } else {
        sb.append(this.context);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("version:");
      if (this.version == null) {
        sb.append("null");
      } else {
        sb.append(this.version);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("accessToken:");
      if (this.accessToken == null) {
        sb.append("null");
      } else {
        sb.append(this.accessToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sessionId:");
      if (this.sessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("requiredAuthenticationLevel:");
      if (this.requiredAuthenticationLevel == null) {
        sb.append("null");
      } else {
        sb.append(this.requiredAuthenticationLevel);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientDomain:");
      if (this.clientDomain == null) {
        sb.append("null");
      } else {
        sb.append(this.clientDomain);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("matchingResource:");
      if (this.matchingResource == null) {
        sb.append("null");
      } else {
        sb.append(this.matchingResource);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("httpVerb:");
      if (this.httpVerb == null) {
        sb.append("null");
      } else {
        sb.append(this.httpVerb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (context == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'context' was not present! Struct: " + toString());
      }
      if (version == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'version' was not present! Struct: " + toString());
      }
      if (accessToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'accessToken' was not present! Struct: " + toString());
      }
      if (sessionId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sessionId' was not present! Struct: " + toString());
      }
      if (requiredAuthenticationLevel == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'requiredAuthenticationLevel' was not present! Struct: " + toString());
      }
      if (matchingResource == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'matchingResource' was not present! Struct: " + toString());
      }
      if (httpVerb == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'httpVerb' was not present! Struct: " + toString());
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class validateKey_argsStandardSchemeFactory implements SchemeFactory {
      public validateKey_argsStandardScheme getScheme() {
        return new validateKey_argsStandardScheme();
      }
    }

    private static class validateKey_argsStandardScheme extends StandardScheme<validateKey_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, validateKey_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONTEXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.context = iprot.readString();
                struct.setContextIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VERSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.version = iprot.readString();
                struct.setVersionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accessToken = iprot.readString();
                struct.setAccessTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sessionId = iprot.readString();
                struct.setSessionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // REQUIRED_AUTHENTICATION_LEVEL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.requiredAuthenticationLevel = iprot.readString();
                struct.setRequiredAuthenticationLevelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // CLIENT_DOMAIN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientDomain = iprot.readString();
                struct.setClientDomainIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // MATCHING_RESOURCE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.matchingResource = iprot.readString();
                struct.setMatchingResourceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // HTTP_VERB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.httpVerb = iprot.readString();
                struct.setHttpVerbIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, validateKey_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.context != null) {
          oprot.writeFieldBegin(CONTEXT_FIELD_DESC);
          oprot.writeString(struct.context);
          oprot.writeFieldEnd();
        }
        if (struct.version != null) {
          oprot.writeFieldBegin(VERSION_FIELD_DESC);
          oprot.writeString(struct.version);
          oprot.writeFieldEnd();
        }
        if (struct.accessToken != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.accessToken);
          oprot.writeFieldEnd();
        }
        if (struct.sessionId != null) {
          oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
          oprot.writeString(struct.sessionId);
          oprot.writeFieldEnd();
        }
        if (struct.requiredAuthenticationLevel != null) {
          oprot.writeFieldBegin(REQUIRED_AUTHENTICATION_LEVEL_FIELD_DESC);
          oprot.writeString(struct.requiredAuthenticationLevel);
          oprot.writeFieldEnd();
        }
        if (struct.clientDomain != null) {
          oprot.writeFieldBegin(CLIENT_DOMAIN_FIELD_DESC);
          oprot.writeString(struct.clientDomain);
          oprot.writeFieldEnd();
        }
        if (struct.matchingResource != null) {
          oprot.writeFieldBegin(MATCHING_RESOURCE_FIELD_DESC);
          oprot.writeString(struct.matchingResource);
          oprot.writeFieldEnd();
        }
        if (struct.httpVerb != null) {
          oprot.writeFieldBegin(HTTP_VERB_FIELD_DESC);
          oprot.writeString(struct.httpVerb);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class validateKey_argsTupleSchemeFactory implements SchemeFactory {
      public validateKey_argsTupleScheme getScheme() {
        return new validateKey_argsTupleScheme();
      }
    }

    private static class validateKey_argsTupleScheme extends TupleScheme<validateKey_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, validateKey_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.context);
        oprot.writeString(struct.version);
        oprot.writeString(struct.accessToken);
        oprot.writeString(struct.sessionId);
        oprot.writeString(struct.requiredAuthenticationLevel);
        oprot.writeString(struct.matchingResource);
        oprot.writeString(struct.httpVerb);
        BitSet optionals = new BitSet();
        if (struct.isSetClientDomain()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetClientDomain()) {
          oprot.writeString(struct.clientDomain);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, validateKey_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.context = iprot.readString();
        struct.setContextIsSet(true);
        struct.version = iprot.readString();
        struct.setVersionIsSet(true);
        struct.accessToken = iprot.readString();
        struct.setAccessTokenIsSet(true);
        struct.sessionId = iprot.readString();
        struct.setSessionIdIsSet(true);
        struct.requiredAuthenticationLevel = iprot.readString();
        struct.setRequiredAuthenticationLevelIsSet(true);
        struct.matchingResource = iprot.readString();
        struct.setMatchingResourceIsSet(true);
        struct.httpVerb = iprot.readString();
        struct.setHttpVerbIsSet(true);
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.clientDomain = iprot.readString();
          struct.setClientDomainIsSet(true);
        }
      }
    }

  }

  public static class validateKey_result implements org.apache.thrift.TBase<validateKey_result, validateKey_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("validateKey_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField API_KEY_MGT_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("apiKeyMgtException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField API_MGT_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("apiMgtException", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new validateKey_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new validateKey_resultTupleSchemeFactory());
    }

    public APIKeyValidationInfoDTO success; // required
    public APIKeyMgtException apiKeyMgtException; // required
    public APIManagementException apiMgtException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      API_KEY_MGT_EXCEPTION((short)1, "apiKeyMgtException"),
      API_MGT_EXCEPTION((short)2, "apiMgtException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // API_KEY_MGT_EXCEPTION
            return API_KEY_MGT_EXCEPTION;
          case 2: // API_MGT_EXCEPTION
            return API_MGT_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, APIKeyValidationInfoDTO.class)));
      tmpMap.put(_Fields.API_KEY_MGT_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("apiKeyMgtException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.API_MGT_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("apiMgtException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(validateKey_result.class, metaDataMap);
    }

    public validateKey_result() {
    }

    public validateKey_result(
      APIKeyValidationInfoDTO success,
      APIKeyMgtException apiKeyMgtException,
      APIManagementException apiMgtException)
    {
      this();
      this.success = success;
      this.apiKeyMgtException = apiKeyMgtException;
      this.apiMgtException = apiMgtException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public validateKey_result(validateKey_result other) {
      if (other.isSetSuccess()) {
        this.success = new APIKeyValidationInfoDTO(other.success);
      }
      if (other.isSetApiKeyMgtException()) {
        this.apiKeyMgtException = new APIKeyMgtException(other.apiKeyMgtException);
      }
      if (other.isSetApiMgtException()) {
        this.apiMgtException = new APIManagementException(other.apiMgtException);
      }
    }

    public validateKey_result deepCopy() {
      return new validateKey_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.apiKeyMgtException = null;
      this.apiMgtException = null;
    }

    public APIKeyValidationInfoDTO getSuccess() {
      return this.success;
    }

    public validateKey_result setSuccess(APIKeyValidationInfoDTO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public APIKeyMgtException getApiKeyMgtException() {
      return this.apiKeyMgtException;
    }

    public validateKey_result setApiKeyMgtException(APIKeyMgtException apiKeyMgtException) {
      this.apiKeyMgtException = apiKeyMgtException;
      return this;
    }

    public void unsetApiKeyMgtException() {
      this.apiKeyMgtException = null;
    }

    /** Returns true if field apiKeyMgtException is set (has been assigned a value) and false otherwise */
    public boolean isSetApiKeyMgtException() {
      return this.apiKeyMgtException != null;
    }

    public void setApiKeyMgtExceptionIsSet(boolean value) {
      if (!value) {
        this.apiKeyMgtException = null;
      }
    }

    public APIManagementException getApiMgtException() {
      return this.apiMgtException;
    }

    public validateKey_result setApiMgtException(APIManagementException apiMgtException) {
      this.apiMgtException = apiMgtException;
      return this;
    }

    public void unsetApiMgtException() {
      this.apiMgtException = null;
    }

    /** Returns true if field apiMgtException is set (has been assigned a value) and false otherwise */
    public boolean isSetApiMgtException() {
      return this.apiMgtException != null;
    }

    public void setApiMgtExceptionIsSet(boolean value) {
      if (!value) {
        this.apiMgtException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((APIKeyValidationInfoDTO)value);
        }
        break;

      case API_KEY_MGT_EXCEPTION:
        if (value == null) {
          unsetApiKeyMgtException();
        } else {
          setApiKeyMgtException((APIKeyMgtException)value);
        }
        break;

      case API_MGT_EXCEPTION:
        if (value == null) {
          unsetApiMgtException();
        } else {
          setApiMgtException((APIManagementException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case API_KEY_MGT_EXCEPTION:
        return getApiKeyMgtException();

      case API_MGT_EXCEPTION:
        return getApiMgtException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case API_KEY_MGT_EXCEPTION:
        return isSetApiKeyMgtException();
      case API_MGT_EXCEPTION:
        return isSetApiMgtException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof validateKey_result)
        return this.equals((validateKey_result)that);
      return false;
    }

    public boolean equals(validateKey_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_apiKeyMgtException = true && this.isSetApiKeyMgtException();
      boolean that_present_apiKeyMgtException = true && that.isSetApiKeyMgtException();
      if (this_present_apiKeyMgtException || that_present_apiKeyMgtException) {
        if (!(this_present_apiKeyMgtException && that_present_apiKeyMgtException))
          return false;
        if (!this.apiKeyMgtException.equals(that.apiKeyMgtException))
          return false;
      }

      boolean this_present_apiMgtException = true && this.isSetApiMgtException();
      boolean that_present_apiMgtException = true && that.isSetApiMgtException();
      if (this_present_apiMgtException || that_present_apiMgtException) {
        if (!(this_present_apiMgtException && that_present_apiMgtException))
          return false;
        if (!this.apiMgtException.equals(that.apiMgtException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(validateKey_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      validateKey_result typedOther = (validateKey_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetApiKeyMgtException()).compareTo(typedOther.isSetApiKeyMgtException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApiKeyMgtException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apiKeyMgtException, typedOther.apiKeyMgtException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetApiMgtException()).compareTo(typedOther.isSetApiMgtException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApiMgtException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apiMgtException, typedOther.apiMgtException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("validateKey_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("apiKeyMgtException:");
      if (this.apiKeyMgtException == null) {
        sb.append("null");
      } else {
        sb.append(this.apiKeyMgtException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("apiMgtException:");
      if (this.apiMgtException == null) {
        sb.append("null");
      } else {
        sb.append(this.apiMgtException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class validateKey_resultStandardSchemeFactory implements SchemeFactory {
      public validateKey_resultStandardScheme getScheme() {
        return new validateKey_resultStandardScheme();
      }
    }

    private static class validateKey_resultStandardScheme extends StandardScheme<validateKey_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, validateKey_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new APIKeyValidationInfoDTO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // API_KEY_MGT_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.apiKeyMgtException = new APIKeyMgtException();
                struct.apiKeyMgtException.read(iprot);
                struct.setApiKeyMgtExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // API_MGT_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.apiMgtException = new APIManagementException();
                struct.apiMgtException.read(iprot);
                struct.setApiMgtExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, validateKey_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.apiKeyMgtException != null) {
          oprot.writeFieldBegin(API_KEY_MGT_EXCEPTION_FIELD_DESC);
          struct.apiKeyMgtException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.apiMgtException != null) {
          oprot.writeFieldBegin(API_MGT_EXCEPTION_FIELD_DESC);
          struct.apiMgtException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class validateKey_resultTupleSchemeFactory implements SchemeFactory {
      public validateKey_resultTupleScheme getScheme() {
        return new validateKey_resultTupleScheme();
      }
    }

    private static class validateKey_resultTupleScheme extends TupleScheme<validateKey_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, validateKey_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetApiKeyMgtException()) {
          optionals.set(1);
        }
        if (struct.isSetApiMgtException()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetApiKeyMgtException()) {
          struct.apiKeyMgtException.write(oprot);
        }
        if (struct.isSetApiMgtException()) {
          struct.apiMgtException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, validateKey_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new APIKeyValidationInfoDTO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.apiKeyMgtException = new APIKeyMgtException();
          struct.apiKeyMgtException.read(iprot);
          struct.setApiKeyMgtExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.apiMgtException = new APIManagementException();
          struct.apiMgtException.read(iprot);
          struct.setApiMgtExceptionIsSet(true);
        }
      }
    }

  }

  public static class getAllURITemplates_args implements org.apache.thrift.TBase<getAllURITemplates_args, getAllURITemplates_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllURITemplates_args");

    private static final org.apache.thrift.protocol.TField CONTEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("context", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField API_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("apiVersion", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllURITemplates_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllURITemplates_argsTupleSchemeFactory());
    }

    public String context; // required
    public String apiVersion; // required
    public String sessionId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONTEXT((short)1, "context"),
      API_VERSION((short)2, "apiVersion"),
      SESSION_ID((short)3, "sessionId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONTEXT
            return CONTEXT;
          case 2: // API_VERSION
            return API_VERSION;
          case 3: // SESSION_ID
            return SESSION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONTEXT, new org.apache.thrift.meta_data.FieldMetaData("context", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.API_VERSION, new org.apache.thrift.meta_data.FieldMetaData("apiVersion", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllURITemplates_args.class, metaDataMap);
    }

    public getAllURITemplates_args() {
    }

    public getAllURITemplates_args(
      String context,
      String apiVersion,
      String sessionId)
    {
      this();
      this.context = context;
      this.apiVersion = apiVersion;
      this.sessionId = sessionId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllURITemplates_args(getAllURITemplates_args other) {
      if (other.isSetContext()) {
        this.context = other.context;
      }
      if (other.isSetApiVersion()) {
        this.apiVersion = other.apiVersion;
      }
      if (other.isSetSessionId()) {
        this.sessionId = other.sessionId;
      }
    }

    public getAllURITemplates_args deepCopy() {
      return new getAllURITemplates_args(this);
    }

    @Override
    public void clear() {
      this.context = null;
      this.apiVersion = null;
      this.sessionId = null;
    }

    public String getContext() {
      return this.context;
    }

    public getAllURITemplates_args setContext(String context) {
      this.context = context;
      return this;
    }

    public void unsetContext() {
      this.context = null;
    }

    /** Returns true if field context is set (has been assigned a value) and false otherwise */
    public boolean isSetContext() {
      return this.context != null;
    }

    public void setContextIsSet(boolean value) {
      if (!value) {
        this.context = null;
      }
    }

    public String getApiVersion() {
      return this.apiVersion;
    }

    public getAllURITemplates_args setApiVersion(String apiVersion) {
      this.apiVersion = apiVersion;
      return this;
    }

    public void unsetApiVersion() {
      this.apiVersion = null;
    }

    /** Returns true if field apiVersion is set (has been assigned a value) and false otherwise */
    public boolean isSetApiVersion() {
      return this.apiVersion != null;
    }

    public void setApiVersionIsSet(boolean value) {
      if (!value) {
        this.apiVersion = null;
      }
    }

    public String getSessionId() {
      return this.sessionId;
    }

    public getAllURITemplates_args setSessionId(String sessionId) {
      this.sessionId = sessionId;
      return this;
    }

    public void unsetSessionId() {
      this.sessionId = null;
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return this.sessionId != null;
    }

    public void setSessionIdIsSet(boolean value) {
      if (!value) {
        this.sessionId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONTEXT:
        if (value == null) {
          unsetContext();
        } else {
          setContext((String)value);
        }
        break;

      case API_VERSION:
        if (value == null) {
          unsetApiVersion();
        } else {
          setApiVersion((String)value);
        }
        break;

      case SESSION_ID:
        if (value == null) {
          unsetSessionId();
        } else {
          setSessionId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONTEXT:
        return getContext();

      case API_VERSION:
        return getApiVersion();

      case SESSION_ID:
        return getSessionId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONTEXT:
        return isSetContext();
      case API_VERSION:
        return isSetApiVersion();
      case SESSION_ID:
        return isSetSessionId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllURITemplates_args)
        return this.equals((getAllURITemplates_args)that);
      return false;
    }

    public boolean equals(getAllURITemplates_args that) {
      if (that == null)
        return false;

      boolean this_present_context = true && this.isSetContext();
      boolean that_present_context = true && that.isSetContext();
      if (this_present_context || that_present_context) {
        if (!(this_present_context && that_present_context))
          return false;
        if (!this.context.equals(that.context))
          return false;
      }

      boolean this_present_apiVersion = true && this.isSetApiVersion();
      boolean that_present_apiVersion = true && that.isSetApiVersion();
      if (this_present_apiVersion || that_present_apiVersion) {
        if (!(this_present_apiVersion && that_present_apiVersion))
          return false;
        if (!this.apiVersion.equals(that.apiVersion))
          return false;
      }

      boolean this_present_sessionId = true && this.isSetSessionId();
      boolean that_present_sessionId = true && that.isSetSessionId();
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (!this.sessionId.equals(that.sessionId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getAllURITemplates_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getAllURITemplates_args typedOther = (getAllURITemplates_args)other;

      lastComparison = Boolean.valueOf(isSetContext()).compareTo(typedOther.isSetContext());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContext()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.context, typedOther.context);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetApiVersion()).compareTo(typedOther.isSetApiVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApiVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apiVersion, typedOther.apiVersion);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSessionId()).compareTo(typedOther.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, typedOther.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllURITemplates_args(");
      boolean first = true;

      sb.append("context:");
      if (this.context == null) {
        sb.append("null");
      } else {
        sb.append(this.context);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("apiVersion:");
      if (this.apiVersion == null) {
        sb.append("null");
      } else {
        sb.append(this.apiVersion);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sessionId:");
      if (this.sessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (context == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'context' was not present! Struct: " + toString());
      }
      if (apiVersion == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'apiVersion' was not present! Struct: " + toString());
      }
      if (sessionId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sessionId' was not present! Struct: " + toString());
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllURITemplates_argsStandardSchemeFactory implements SchemeFactory {
      public getAllURITemplates_argsStandardScheme getScheme() {
        return new getAllURITemplates_argsStandardScheme();
      }
    }

    private static class getAllURITemplates_argsStandardScheme extends StandardScheme<getAllURITemplates_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllURITemplates_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONTEXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.context = iprot.readString();
                struct.setContextIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // API_VERSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.apiVersion = iprot.readString();
                struct.setApiVersionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sessionId = iprot.readString();
                struct.setSessionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllURITemplates_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.context != null) {
          oprot.writeFieldBegin(CONTEXT_FIELD_DESC);
          oprot.writeString(struct.context);
          oprot.writeFieldEnd();
        }
        if (struct.apiVersion != null) {
          oprot.writeFieldBegin(API_VERSION_FIELD_DESC);
          oprot.writeString(struct.apiVersion);
          oprot.writeFieldEnd();
        }
        if (struct.sessionId != null) {
          oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
          oprot.writeString(struct.sessionId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllURITemplates_argsTupleSchemeFactory implements SchemeFactory {
      public getAllURITemplates_argsTupleScheme getScheme() {
        return new getAllURITemplates_argsTupleScheme();
      }
    }

    private static class getAllURITemplates_argsTupleScheme extends TupleScheme<getAllURITemplates_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllURITemplates_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.context);
        oprot.writeString(struct.apiVersion);
        oprot.writeString(struct.sessionId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllURITemplates_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.context = iprot.readString();
        struct.setContextIsSet(true);
        struct.apiVersion = iprot.readString();
        struct.setApiVersionIsSet(true);
        struct.sessionId = iprot.readString();
        struct.setSessionIdIsSet(true);
      }
    }

  }

  public static class getAllURITemplates_result implements org.apache.thrift.TBase<getAllURITemplates_result, getAllURITemplates_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllURITemplates_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField API_KEY_MGT_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("apiKeyMgtException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField API_MGT_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("apiMgtException", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllURITemplates_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllURITemplates_resultTupleSchemeFactory());
    }

    public List<URITemplate> success; // required
    public APIKeyMgtException apiKeyMgtException; // required
    public APIManagementException apiMgtException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      API_KEY_MGT_EXCEPTION((short)1, "apiKeyMgtException"),
      API_MGT_EXCEPTION((short)2, "apiMgtException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // API_KEY_MGT_EXCEPTION
            return API_KEY_MGT_EXCEPTION;
          case 2: // API_MGT_EXCEPTION
            return API_MGT_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, URITemplate.class))));
      tmpMap.put(_Fields.API_KEY_MGT_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("apiKeyMgtException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.API_MGT_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("apiMgtException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllURITemplates_result.class, metaDataMap);
    }

    public getAllURITemplates_result() {
    }

    public getAllURITemplates_result(
      List<URITemplate> success,
      APIKeyMgtException apiKeyMgtException,
      APIManagementException apiMgtException)
    {
      this();
      this.success = success;
      this.apiKeyMgtException = apiKeyMgtException;
      this.apiMgtException = apiMgtException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllURITemplates_result(getAllURITemplates_result other) {
      if (other.isSetSuccess()) {
        List<URITemplate> __this__success = new ArrayList<URITemplate>();
        for (URITemplate other_element : other.success) {
          __this__success.add(new URITemplate(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetApiKeyMgtException()) {
        this.apiKeyMgtException = new APIKeyMgtException(other.apiKeyMgtException);
      }
      if (other.isSetApiMgtException()) {
        this.apiMgtException = new APIManagementException(other.apiMgtException);
      }
    }

    public getAllURITemplates_result deepCopy() {
      return new getAllURITemplates_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.apiKeyMgtException = null;
      this.apiMgtException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<URITemplate> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(URITemplate elem) {
      if (this.success == null) {
        this.success = new ArrayList<URITemplate>();
      }
      this.success.add(elem);
    }

    public List<URITemplate> getSuccess() {
      return this.success;
    }

    public getAllURITemplates_result setSuccess(List<URITemplate> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public APIKeyMgtException getApiKeyMgtException() {
      return this.apiKeyMgtException;
    }

    public getAllURITemplates_result setApiKeyMgtException(APIKeyMgtException apiKeyMgtException) {
      this.apiKeyMgtException = apiKeyMgtException;
      return this;
    }

    public void unsetApiKeyMgtException() {
      this.apiKeyMgtException = null;
    }

    /** Returns true if field apiKeyMgtException is set (has been assigned a value) and false otherwise */
    public boolean isSetApiKeyMgtException() {
      return this.apiKeyMgtException != null;
    }

    public void setApiKeyMgtExceptionIsSet(boolean value) {
      if (!value) {
        this.apiKeyMgtException = null;
      }
    }

    public APIManagementException getApiMgtException() {
      return this.apiMgtException;
    }

    public getAllURITemplates_result setApiMgtException(APIManagementException apiMgtException) {
      this.apiMgtException = apiMgtException;
      return this;
    }

    public void unsetApiMgtException() {
      this.apiMgtException = null;
    }

    /** Returns true if field apiMgtException is set (has been assigned a value) and false otherwise */
    public boolean isSetApiMgtException() {
      return this.apiMgtException != null;
    }

    public void setApiMgtExceptionIsSet(boolean value) {
      if (!value) {
        this.apiMgtException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<URITemplate>)value);
        }
        break;

      case API_KEY_MGT_EXCEPTION:
        if (value == null) {
          unsetApiKeyMgtException();
        } else {
          setApiKeyMgtException((APIKeyMgtException)value);
        }
        break;

      case API_MGT_EXCEPTION:
        if (value == null) {
          unsetApiMgtException();
        } else {
          setApiMgtException((APIManagementException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case API_KEY_MGT_EXCEPTION:
        return getApiKeyMgtException();

      case API_MGT_EXCEPTION:
        return getApiMgtException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case API_KEY_MGT_EXCEPTION:
        return isSetApiKeyMgtException();
      case API_MGT_EXCEPTION:
        return isSetApiMgtException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllURITemplates_result)
        return this.equals((getAllURITemplates_result)that);
      return false;
    }

    public boolean equals(getAllURITemplates_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_apiKeyMgtException = true && this.isSetApiKeyMgtException();
      boolean that_present_apiKeyMgtException = true && that.isSetApiKeyMgtException();
      if (this_present_apiKeyMgtException || that_present_apiKeyMgtException) {
        if (!(this_present_apiKeyMgtException && that_present_apiKeyMgtException))
          return false;
        if (!this.apiKeyMgtException.equals(that.apiKeyMgtException))
          return false;
      }

      boolean this_present_apiMgtException = true && this.isSetApiMgtException();
      boolean that_present_apiMgtException = true && that.isSetApiMgtException();
      if (this_present_apiMgtException || that_present_apiMgtException) {
        if (!(this_present_apiMgtException && that_present_apiMgtException))
          return false;
        if (!this.apiMgtException.equals(that.apiMgtException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getAllURITemplates_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getAllURITemplates_result typedOther = (getAllURITemplates_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetApiKeyMgtException()).compareTo(typedOther.isSetApiKeyMgtException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApiKeyMgtException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apiKeyMgtException, typedOther.apiKeyMgtException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetApiMgtException()).compareTo(typedOther.isSetApiMgtException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApiMgtException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apiMgtException, typedOther.apiMgtException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllURITemplates_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("apiKeyMgtException:");
      if (this.apiKeyMgtException == null) {
        sb.append("null");
      } else {
        sb.append(this.apiKeyMgtException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("apiMgtException:");
      if (this.apiMgtException == null) {
        sb.append("null");
      } else {
        sb.append(this.apiMgtException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllURITemplates_resultStandardSchemeFactory implements SchemeFactory {
      public getAllURITemplates_resultStandardScheme getScheme() {
        return new getAllURITemplates_resultStandardScheme();
      }
    }

    private static class getAllURITemplates_resultStandardScheme extends StandardScheme<getAllURITemplates_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllURITemplates_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new ArrayList<URITemplate>(_list32.size);
                  for (int _i33 = 0; _i33 < _list32.size; ++_i33)
                  {
                    URITemplate _elem34; // required
                    _elem34 = new URITemplate();
                    _elem34.read(iprot);
                    struct.success.add(_elem34);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // API_KEY_MGT_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.apiKeyMgtException = new APIKeyMgtException();
                struct.apiKeyMgtException.read(iprot);
                struct.setApiKeyMgtExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // API_MGT_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.apiMgtException = new APIManagementException();
                struct.apiMgtException.read(iprot);
                struct.setApiMgtExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllURITemplates_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (URITemplate _iter35 : struct.success)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.apiKeyMgtException != null) {
          oprot.writeFieldBegin(API_KEY_MGT_EXCEPTION_FIELD_DESC);
          struct.apiKeyMgtException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.apiMgtException != null) {
          oprot.writeFieldBegin(API_MGT_EXCEPTION_FIELD_DESC);
          struct.apiMgtException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllURITemplates_resultTupleSchemeFactory implements SchemeFactory {
      public getAllURITemplates_resultTupleScheme getScheme() {
        return new getAllURITemplates_resultTupleScheme();
      }
    }

    private static class getAllURITemplates_resultTupleScheme extends TupleScheme<getAllURITemplates_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllURITemplates_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetApiKeyMgtException()) {
          optionals.set(1);
        }
        if (struct.isSetApiMgtException()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (URITemplate _iter36 : struct.success)
            {
              _iter36.write(oprot);
            }
          }
        }
        if (struct.isSetApiKeyMgtException()) {
          struct.apiKeyMgtException.write(oprot);
        }
        if (struct.isSetApiMgtException()) {
          struct.apiMgtException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllURITemplates_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<URITemplate>(_list37.size);
            for (int _i38 = 0; _i38 < _list37.size; ++_i38)
            {
              URITemplate _elem39; // required
              _elem39 = new URITemplate();
              _elem39.read(iprot);
              struct.success.add(_elem39);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.apiKeyMgtException = new APIKeyMgtException();
          struct.apiKeyMgtException.read(iprot);
          struct.setApiKeyMgtExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.apiMgtException = new APIManagementException();
          struct.apiMgtException.read(iprot);
          struct.setApiMgtExceptionIsSet(true);
        }
      }
    }

  }

}
