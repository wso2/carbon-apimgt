###################################  macros  #######################################
##
###generate key
#macro( getKey )##
#if($policy.getUserLevel() == $ACROSS_ALL)
str:concat(resourceKey,'${pipeline}')##
#else
str:concat(resourceKey, '_', userId , '_${pipeline}')##
#end
#end
###generate rule
#macro( getRule $policy)
api_${policy.getPolicyName()}_${pipeline}##
#end

@Plan:name('#getRule($policy)')
@Plan:description('ExecutionPlan for #getRule($policy)')

@Import('org.wso2.throttle.processed.request.stream:1.0.0')
define stream RequestStream (messageID string, appKey string, appTier string, subscriptionKey string, apiKey string, apiTier string, subscriptionTier string, resourceKey string, resourceTier string, userId string, propertiesMap string);

@Export('org.wso2.throttle.globalThrottle.stream:1.0.0')
define stream GlobalThrottleStream (throttleKey string, isThrottled bool);

FROM RequestStream
SELECT messageID, ( resourceTier == '${policy.getPolicyName()}'$condition) AS isEligible, #getKey() AS throttleKey
INSERT INTO EligibilityStream;

#if($quotaPolicy != "")
FROM EligibilityStream[isEligible==true]#window.time($quotaPolicy.getLimit().getUnitTime() $quotaPolicy.getLimit().getTimeUnit())
#if($quotaPolicy.getType() == $REQUEST_COUNT_TYPE)
select throttleKey, (count(messageID) >= $quotaPolicy.getLimit().getRequestCount()) as isThrottled
#else
select throttleKey, (count(messageID) >= 1000) as isThrottled #########change {use $quotaPolicy.getLimit().getStandardDataAmount()}
#end
INSERT ALL EVENTS into ResultStream;
#end

from ResultStream#throttler:emitOnStateChange(throttleKey, isThrottled)
select *
insert into GlobalThrottleStream;
