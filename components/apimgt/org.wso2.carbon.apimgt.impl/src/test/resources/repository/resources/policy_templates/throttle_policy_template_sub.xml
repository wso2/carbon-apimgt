###################################  macros  #######################################
##
###generate key
#macro( getKey )##
#if($policy.getPolicyLevel() == "sub")
#if($policy.isAcrossAllUsers())
######not defined yet#######
#else
str:concat('${policy.getPolicyLevel()}_${policy.getPolicyName()}_',api_key ,app_key ,user_id ,'_key')##
#end
#end
#end
###generate rule
#macro( getRule $policy)
#if($policy.getPolicyLevel() == "sub")
#if($policy.isAcrossAllUsers())
####not defined yet######
#else
${policy.getPolicyLevel()}_${policy.getPolicyName()}_user##
#end
#end
#end
<policy tier="$policy.getPolicyLevel()_$policy.getPolicyName()" level="$policy.getPolicyLevel()" name="#getRule($policy)">
	<eligibilityQuery>
		FROM RequestStream
		SELECT '#getRule($policy)' AS rule, messageID, ( api_tier == '${policy.getPolicyName()}'${condition}) AS isEligible, false as isLocallyThrottled, #getKey() AS throttle_key
		INSERT INTO EligibilityStream;
	</eligibilityQuery>
	<decisionQuery>	
#if($quotaPolicy != "")
		FROM EligibilityStream[isEligible==true AND rule == '#getRule($policy)']#window.time($quotaPolicy.getLimit().getUnitTime() $quotaPolicy.getLimit().getTimeUnit()) 
#if($quotaPolicy.getType() == 'RequestCount')
		select throttle_key, (count(messageID)) >= $quotaPolicy.getLimit().getRequestCount()) as isThrottled 
#else
		select throttle_key, (count(messageID)) >= 1000) as isThrottled #########change {use $quotaPolicy.getLimit().getDataAmount()}
#end
		group by throttle_key 
		INSERT ALL EVENTS into ResultStream;
#end
	</decisionQuery>
</policy>
