swagger: '2.0'
######################################################
# Prolog
######################################################
info:
  version: "v1"
  title: "WSO2 API Manager - Core"
  description: |
    This document specifies a **RESTful API** for WSO2 **API Manager - Core Services**.

    It is written with [swagger 2](http://swagger.io/).

  contact:
    name: "WSO2"
    url: "http://wso2.com/products/api-manager/"
    email: "architecture@wso2.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"

######################################################
# The fixed parts of the URLs of the API
######################################################

# The schemes supported by the API
schemes:
  - https

# The domain of the API.
# This is configured by the customer during deployment.
# The given host is just an example.
host: apis.wso2.com

# The base path of the API.
# Will be prefixed to all paths.
basePath: /api/am/core/v1

# The following media types can be passed as input in message bodies of the API.
# The actual media type must be specified in the Content-Type header field of the request.
# The default is json, i.e. the Content-Type header is not needed to
# be set, but supporting it serves extensibility.
consumes:
  - application/json

# The following media types may be passed as output in message bodies of the API.
# The media type(s) consumable by the requestor is specified in the Accept header field
# of the corresponding request.
# The actual media type returned will be specfied in the Content-Type header field
# of the of the response.
# The default of the Accept header is json, i.e. there is not needed to
# set the value, but supporting it serves extensibility.
produces:
  - application/json

x-wso2-security:
  apim:
    x-wso2-scopes:
      - description: "admin"
        roles: admin
        name: apim:admin
        key: apim:admin

######################################################
# The "Subscription Collection" resource APIs
######################################################
paths:
  /subscriptions:

#-----------------------------------------------------
# Retrieve all subscriptions of a certain API
#-----------------------------------------------------
    get:
      x-wso2-curl: "curl -k https://localhost:9292/api/am/core/v1/subscriptions"
      x-wso2-request: |
        GET https://localhost:9292/api/am/core/v1/subscriptions
      x-wso2-response: "HTTP/1.1 200 OK\nContent-Type:application/json"
      summary: |
        Return the list of subscriptions of an API
      description: |
        Return the list of subscriptions of an API, by proving API context and version. Response consist of API Context,
        API version, Consumer Key and Subscription Policy
      parameters:
        - $ref : '#/parameters/apiContext'
        - $ref : '#/parameters/apiVersion'
        - $ref : '#/parameters/limit'
        - $ref : '#/parameters/Accept'
      tags:
        - Subscriptions of API
      responses:
        200:
          description: |
            OK.
            The list of Subscriptions.
          schema:
            $ref: '#/definitions/SubscriptionList'
          headers:
            Content-Type:
              description: The content type of the body.
              type: string
        400:
          description: |
            Bad Request.
            Invalid request or validation error
          schema:
            $ref: '#/definitions/Error'
        404:
          description: |
            Not Found.
            The resource to be updated does not exist.
          schema:
            $ref: '#/definitions/Error'
        406:
          description: |
            Not Acceptable.
            The requested media type is not supported
          schema:
            $ref: '#/definitions/Error'

  /applications:

#-----------------------------------------------------
# Retrieve all applications
#-----------------------------------------------------
    get:
      x-wso2-curl: "curl -k https://localhost:9292/api/am/core/v1/applications"
      x-wso2-request: |
        GET https://localhost:9292/api/am/core/v1/applications
      x-wso2-response: "HTTP/1.1 200 OK\nContent-Type:application/json"
      summary: |
        Return the list of applications of an API
      description: |
        Return the list of applications
      parameters:
        - $ref : '#/parameters/Accept'
      tags:
        - Applications of API
      responses:
        200:
          description: |
            OK.
            The list of Applications.
          schema:
            $ref: '#/definitions/ApplicationList'
          headers:
            Content-Type:
              description: The content type of the body.
              type: string
        400:
          description: |
            Bad Request.
            Invalid request or validation error
          schema:
            $ref: '#/definitions/Error'
        404:
          description: |
            Not Found.
            The resource to be updated does not exist.
          schema:
            $ref: '#/definitions/Error'
        406:
          description: |
            Not Acceptable.
            The requested media type is not supported
          schema:
            $ref: '#/definitions/Error'

  /resources:

#-----------------------------------------------------
# Retrieve all subscriptions of a certain API
#-----------------------------------------------------
    get:
      x-wso2-curl: "curl -k https://localhost:9292/api/am/core/v1/resources"
      x-wso2-request: |
        GET https://localhost:9292/api/am/core/v1/subscriptions
      x-wso2-response: "HTTP/1.1 200 OK\nContent-Type:application/json"
      summary: |
        Return the list of resources of an API
      description: |
        Return the list of subscriptions of an API, by proving API context and version. Response consist of API Context,
        API version, Consumer Key and Subscription Policy
      parameters:
        - $ref : '#/parameters/apiContext'
        - $ref : '#/parameters/apiVersion'
        - $ref : '#/parameters/Accept'
      tags:
        - Subscriptions of API
      responses:
        200:
          description: |
            OK.
            The list of Subscriptions.
          schema:
            $ref: '#/definitions/ResourcesList'
          headers:
            Content-Type:
              description: The content type of the body.
              type: string
        400:
          description: |
            Bad Request.
            Invalid request or validation error
          schema:
            $ref: '#/definitions/Error'
        404:
          description: |
            Not Found.
            The resource to be updated does not exist.
          schema:
            $ref: '#/definitions/Error'
        406:
          description: |
            Not Acceptable.
            The requested media type is not supported
          schema:
            $ref: '#/definitions/Error'



#-----------------------------------------------------
#  Register a Gateway
#-----------------------------------------------------

  /gateways/register:
    post:
      x-wso2-curl: "curl -k -H \"Content-Type: application/json\" -X POST -d @data.json \"https://localhost:9292/api/am/core/v1/gateway/register\""
      x-wso2-request: |
        GET https://localhost:9292/api/am/core/v1/gateway/register
        {\r\n\"labelInfo\":{\r\n  \"overwriteLabels\":false,\r\n  \"labelList\":[\r\n     {\r\n        \"name\":\"Private\",\r\n        \"accessUrls\":[\r\n           \"https:\/\/local.privatfdsafe\"\r\n        ]\r\n     },\r\n     {\r\n        \"name\":\"Public\",\r\n        \"accessUrls\":[\r\n           \"http:\/\/local.private\",\r\n           \"https:\/\/local.public\"\r\n        ]\r\n     }\r\n  ]\r\n}}
      x-wso2-response: ""
      summary: Register a Gateway
      description: |
        This operation can be used to register a gateway.
      parameters:
        - in: body
          name: body
          description: |
            Register object that needs to be added
          required: true
          schema:
            $ref: '#/definitions/Registration'
        - $ref: '#/parameters/Content-Type'
      tags:
        - Register Gateway
      responses:
        201:
          description: |
            Created.
            Successful response with Registration Summary details in the body.
          schema:
            $ref: '#/definitions/RegistrationSummary'
          headers:
            Content-Type:
              description: |
                The content type of the body.
              type: string
        400:
          description: |
            Bad Request.
            Invalid request or validation error.
          schema:
            $ref: '#/definitions/Error'
        415:
          description: |
            Unsupported Media Type.
            The entity of the request was in a not supported format.
          schema:
            $ref: '#/definitions/Error'


################################################################
# The gateway config resource of "Individual API" resource APIs
################################################################

  /apis/{apiId}/gateway-config:
#-----------------------------------------------------
# Retrieve the API gateway configuration
#-----------------------------------------------------
    get:
      x-wso2-curl: curl -k "https://localhost:9292/api/am/core/v1/apis/1461f570-1765-4467-aeb8-bc912833afaf/gateway-config"
      x-wso2-request: |
        GET https://localhost:9292/api/am/core/v1/apis/1461f570-1765-4467-aeb8-bc912833afaf/gateway-config
      x-wso2-response: "HTTP/1.1 200 OK\nContent-Type: text/plain\nContent-Length: 329\npackage deployment.org.wso2.apim;\r\nimport ballerina.net.http;\r\n\r\n@http:BasePath{value:\"/myYahoo\"}\r\nservice myYahoo_1493196161220 {\r\n\r\n\t    @http:POST{}\r\n        \t@http:Path{value:\"/*\"}\r\n    resource post_star_ (message m) {\r\n        http:ClientConnector productionEndpoint = create http:ClientConnector(getUrlFromKey(\"endpoint_myYahoo_v1\"));\r\n        http:ClientConnector sandboxEndpoint = create http:ClientConnector(getUrlFromKey(\"endpoint_myYahoo_v1\"));\r\n        message response;\r\n        string endpointType;\r\n        string productionType;\r\n\r\n\r\n        endpointType = \"production\";\r\n        productionType = \"production\";\r\n\r\n        if (endpointType == productionType) {\r\n            response = http:ClientConnector.execute(productionEndpoint, \"post\", \"\", m);\r\n        } else {\r\n            response = http:ClientConnector.execute(sandboxEndpoint, \"post\", \"\", m);\r\n        }\r\n\r\n        reply response;\r\n    }\r\n\t\t\t\t\t    @http:GET{}\r\n        \t@http:Path{value:\"/*\"}\r\n    resource get_star_ (message m) {\r\n        http:ClientConnector productionEndpoint = create http:ClientConnector(getUrlFromKey(\"endpoint_myYahoo_v1\"));\r\n        http:ClientConnector sandboxEndpoint = create http:ClientConnector(getUrlFromKey(\"endpoint_myYahoo_v1\"));\r\n        message response;\r\n        string endpointType;\r\n        string productionType;\r\n\r\n\r\n        endpointType = \"production\";\r\n        productionType = \"production\";\r\n\r\n        if (endpointType == productionType) {\r\n            response = http:ClientConnector.execute(productionEndpoint, \"get\", \"\", m);\r\n        } else {\r\n            response = http:ClientConnector.execute(sandboxEndpoint, \"get\", \"\", m);\r\n        }\r\n\r\n        reply response;\r\n    }\r\n}"
      summary: Get gateway definition
      produces:
        - text/plain
        - application/json
      description: |
        This operation can be used to retrieve the gateway configuration of an API.
      parameters:
        - $ref: '#/parameters/apiId'
        - $ref: '#/parameters/Accept'
      tags:
        - API (Individual)
      responses:
        200:
          description: |
            OK.
            Requested gateway configuration of the API is returned
          headers:
            Content-Type:
              description: |
                The content type of the body.
              type: string
            ETag:
              description: |
                Entity Tag of the response resource. Used by caches, or in conditional requests (Will be supported in future).
              type: string
            Last-Modified:
              description: |
                Date and time the resource has been modifed the last time.
                Used by caches, or in conditional requests (Will be supported in future).
              type: string
        304:
          description: |
            Not Modified.
            Empty body because the client has already the latest version of the requested resource (Will be supported in future).
        404:
          description: |
            Not Found.
            Requested API does not exist.
          schema:
            $ref: '#/definitions/Error'
        406:
          description: |
            Not Acceptable.
            The requested media type is not supported
          schema:
            $ref: '#/definitions/Error'

################################################################
# The gateway config resource of "Individual Endpoint" resource Endpoints
################################################################

  /endpoints/{endpointId}/gateway-config:
#-----------------------------------------------------
# Retrieve the API gateway configuration
#-----------------------------------------------------
    get:
      x-wso2-curl: curl -k "https://localhost:9292/api/am/core/v1/endpoints/1461f570-1765-4467-aeb8-bc912833afaf/gateway-config"
      x-wso2-request: |
        GET https://localhost:9292/api/am/core/v1/apis/1461f570-1765-4467-aeb8-bc912833afaf/gateway-config
      x-wso2-response: "HTTP/1.1 200 OK\nContent-Type: text/plain\nContent-Length: 329\npackage deployment.org.wso2.apim;\r\nimport ballerina.net.http;\r\n\r\n@http:BasePath{value:\"/myYahoo\"}\r\nservice myYahoo_1493196161220 {\r\n\r\n\t    @http:POST{}\r\n        \t@http:Path{value:\"/*\"}\r\n    resource post_star_ (message m) {\r\n        http:ClientConnector productionEndpoint = create http:ClientConnector(getUrlFromKey(\"endpoint_myYahoo_v1\"));\r\n        http:ClientConnector sandboxEndpoint = create http:ClientConnector(getUrlFromKey(\"endpoint_myYahoo_v1\"));\r\n        message response;\r\n        string endpointType;\r\n        string productionType;\r\n\r\n\r\n        endpointType = \"production\";\r\n        productionType = \"production\";\r\n\r\n        if (endpointType == productionType) {\r\n            response = http:ClientConnector.execute(productionEndpoint, \"post\", \"\", m);\r\n        } else {\r\n            response = http:ClientConnector.execute(sandboxEndpoint, \"post\", \"\", m);\r\n        }\r\n\r\n        reply response;\r\n    }\r\n\t\t\t\t\t    @http:GET{}\r\n        \t@http:Path{value:\"/*\"}\r\n    resource get_star_ (message m) {\r\n        http:ClientConnector productionEndpoint = create http:ClientConnector(getUrlFromKey(\"endpoint_myYahoo_v1\"));\r\n        http:ClientConnector sandboxEndpoint = create http:ClientConnector(getUrlFromKey(\"endpoint_myYahoo_v1\"));\r\n        message response;\r\n        string endpointType;\r\n        string productionType;\r\n\r\n\r\n        endpointType = \"production\";\r\n        productionType = \"production\";\r\n\r\n        if (endpointType == productionType) {\r\n            response = http:ClientConnector.execute(productionEndpoint, \"get\", \"\", m);\r\n        } else {\r\n            response = http:ClientConnector.execute(sandboxEndpoint, \"get\", \"\", m);\r\n        }\r\n\r\n        reply response;\r\n    }\r\n}"
      summary: Get gateway definition
      produces:
        - text/plain
        - application/json
      description: |
        This operation can be used to retrieve the gateway configuration of an Endpoint.
      parameters:
        - $ref: '#/parameters/endpointId'
        - $ref: '#/parameters/Accept'
      tags:
        - Endpoints (Individual)
      responses:
        200:
          description: |
            OK.
            Requested gateway configuration of the Endpoint is returned
          headers:
            Content-Type:
              description: |
                The content type of the body.
              type: string
            ETag:
              description: |
                Entity Tag of the response resource. Used by caches, or in conditional requests (Will be supported in future).
              type: string
            Last-Modified:
              description: |
                Date and time the resource has been modifed the last time.
                Used by caches, or in conditional requests (Will be supported in future).
              type: string
        304:
          description: |
            Not Modified.
            Empty body because the client has already the latest version of the requested resource (Will be supported in future).
        404:
          description: |
            Not Found.
            Requested API does not exist.
          schema:
            $ref: '#/definitions/Error'
        406:
          description: |
            Not Acceptable.
            The requested media type is not supported
          schema:
            $ref: '#/definitions/Error'

#-----------------------------------------------------
#  Retrieve API list
#-----------------------------------------------------

  /apis:
    get:
      summary: Retrieve API list
      description: Retrieve available apis
      parameters:
        - $ref : '#/parameters/labels'
        - $ref : '#/parameters/status'
      responses:
        200:
          description: |
            OK.
            List of APIs.
          schema:
            $ref: '#/definitions/APIList'
          headers:
            Content-Type:
              description: The content type of the body.
              type: string
        400:
          description: |
            Bad Request.
            Invalid request or validation error
          schema:
            $ref: '#/definitions/Error'
#-----------------------------------------------------
#  Retrieve Endpoint list
#-----------------------------------------------------

  /endpoints:
    get:
      summary: Retrieve Endpoint list
      description: Retrieve available Endpoint
      parameters:
        - $ref : '#/parameters/limit'
        - $ref : '#/parameters/Accept'
      responses:
        200:
          description: |
            OK.
            List of Endpoints.
          schema:
            $ref: '#/definitions/EndpointList'
          headers:
            Content-Type:
              description: The content type of the body.
              type: string
        400:
          description: |
            Bad Request.
            Invalid request or validation error
          schema:
            $ref: '#/definitions/Error'

######################################################
# Parameters - required by some of the APIs above
######################################################
parameters:

# API Identifier
  apiId:
    name: apiId
    in: path
    description: |
      The UUID of an API
    required: true
    type: string

# Endpoint Identifier
  endpointId:
    name: endpointId
    in: path
    description: |
      The UUID of an Endpoint
    required: true
    type: string

# API Context
  apiContext:
    name: apiContext
    in: query
    description: |
      Context of the API.
    required: false
    type: string

# API Version
  apiVersion:
    name: apiVersion
    in: query
    description: |
      Version of the API.
    required: false
    type: string

# Subscription Limit
  limit:
    name: limit
    in: query
    description: |
      Number of entities that should be retrieved.
    required: false
    type: integer
    format: int32

# The HTTP Content-Type header
  Content-Type:
    name: Content-Type
    in: header
    description: |
      Media type of the entity in the body. Default is JSON.
    default: JSON
    required: true
    type : string

# The HTTP Accept header
  Accept:
    name: Accept
    in: header
    description: |
      Media types acceptable for the response. Default is application/json.
    default: application/json
    type: string

# Lifecycle status
  status:
    name: status
    in: query
    description: |
      Lifecycle status
    required: false
    type: string

# Gateway Labels
  labels:
    name: labels
    in: query
    description: |
      Comma seperated gateway labels
    required: false
    type: string


######################################################
# The resources used by some of the APIs above within the message body
######################################################
definitions:

#-----------------------------------------------------
# The Subscription List resource
#-----------------------------------------------------
  SubscriptionList:
    title: Subscription List
    properties:
      list:
        type: array
        items:
          $ref: '#/definitions/Subscription'

#-----------------------------------------------------
# The Subscription resource
#-----------------------------------------------------
  Subscription:
    title: Subscription
    required:
      - apiName
      - apiContext
      - apiVersion
      - apiProvider
      - consumerKey
      - subscriptionPolicy
      - keyEnvType
    properties:
      apiName:
        type: string
        description: |
          Name of API.
      apiContext:
        type: string
        description: |
          Context of API.
      apiVersion:
        type: string
        description: |
          Version of API.
      apiProvider:
        type: string
        description: |
          Provider of API.
      consumerKey:
        type: string
        description: |
          Consumer Key of Application.
      subscriptionPolicy:
        type: string
        description: |
          Name of Subscription Policy.
      keyEnvType:
        type: string
        description: |
          Key type (Production or Sandbox).
      applicationId:
        type: string
        description: |
          UUID of Application
      status:
        type: string
        description: |
          Subscription Status

#-----------------------------------------------------
# API Summary Info resource
#-----------------------------------------------------
  UriTemplate:
    title: Uri template Information
    properties:
      uriTemplate:
        type: string
        description: |
          uri template of api.
      httpVerb:
        type: string
        description: |
          http verb of the uri template.
      authType:
        type: string
        description: |
          auth type of uri tamplate.
      policy:
        type: string
        description: |
          policy of uri template.
      scope:
        type: string
        description: |
          scope for uri template.
  APISummary:
    title: APIs Summary Information
    properties:
      id:
        type: string
        description: |
          uuid of the api.
      name:
        type: string
        description: |
          api name.
      context:
        type: string
        description: |
          api context.
      version:
        type: string
        description: |
          api version.
      uriTemplates:
        type: array
        "items":
          "$ref": "#/definitions/UriTemplate"
        description: |
          List of uriTemplates.
  APISummaryList:
    title: Response of  a object list
    properties:
      list:
        type: array
        items:
          $ref: '#/definitions/APISummary'
        description: |
          List of apis summery.

#-----------------------------------------------------
# The Resources List
#-----------------------------------------------------
  ResourcesList:
    title: Resources List
    properties:
      list:
        type: array
        items:
          $ref: '#/definitions/UriTemplate'

#-----------------------------------------------------
# The Error resource
#-----------------------------------------------------
  Error:
    title: Error object returned with 4XX HTTP lifeCycleStatus
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int64
      message:
        type: string
        description: Error message.
      description:
        type: string
        description: |
          A detail description about the error message.
      moreInfo:
        type: string
        description: |
          Preferably an url with more details about the error.
      error:
        type: array
        description: |
          If there are more than one error list them out.
          For example, list out validation errors by each field.
        items:
          $ref: '#/definitions/ErrorListItem'

#-----------------------------------------------------
# The Error List Item resource
#-----------------------------------------------------
  ErrorListItem:
    title: Description of individual errors that may have occurred during a request.
    required:
      - code
      - message
    properties:
      code:
        type: string
      message:
        type: string
        description: |
          Description about individual errors occurred

#-----------------------------------------------------
# The Registration resource
#-----------------------------------------------------
  Registration:
    title: Registration related details
    required:
      - labelInfo
    properties:
      labelInfo:
        $ref: '#/definitions/LabelInfo'

#-----------------------------------------------------
# The Label resource
#-----------------------------------------------------
  Label:
    title: Label
    required:
      - name
      - access_urls
    properties:
      name:
        type: string
      access_urls:
        type: array
        items:
          type: string

#-----------------------------------------------------
# The Label List resource
#-----------------------------------------------------
  LabelInfo:
    title: Label Info
    required:
      - labelList
    properties:
      overwriteLabels:
        type: string
        description: |
          Yes or No to overwrite label values
      labelList:
        type: array
        items:
          $ref: '#/definitions/Label'

#-----------------------------------------------------
# The RegistrationSummary resource
#-----------------------------------------------------
  RegistrationSummary:
    title: Registration Summary Information
    properties:
      KeyManagerInfo:
        $ref: '#/definitions/KeyManagerInfo'
      JWTInfo:
        $ref: '#/definitions/JWTInfo'
      AnalyticsInfo:
        $ref: '#/definitions/AnalyticsInfo'
      ThrottlingInfo:
        $ref: '#/definitions/ThrottlingInfo'

#-----------------------------------------------------
# The API List resource
#-----------------------------------------------------
  APIList:
    title: API List
    properties:
      count:
        type: integer
        description: |
          Number of APIs returned.
        example: 1
      list:
        type: array
        items:
          $ref: '#/definitions/APIInfo'

#-----------------------------------------------------
# The Endpoint List resource
#-----------------------------------------------------
  EndpointList:
    title: Endpoint List
    properties:
      list:
        type: array
        items:
          type: string

#-----------------------------------------------------
# The API Info resource
#-----------------------------------------------------
  APIInfo:
    title: API Info object with basic API details.
    properties:
      id:
        type: string
        example: 01234567-0123-0123-0123-012345678901
      name:
        type: string
        example: CalculatorAPI
      context:
        type: string
        example: CalculatorAPI
      version:
        type: string
        example: 1.0.0
      lifeCycleStatus:
        type: string
        example: 'CREATED'

#-----------------------------------------------------
# The Application resource
#-----------------------------------------------------
  Application:
    title: Application
    required:
      - name
      - throttlingTier
    properties:
      applicationId:
        type: string
        example: 01234567-0123-0123-0123-012345678901
      name:
        type: string
        example: CalculatorApp
      subscriber:
        type: string
        example: admin
      throttlingTier:
        type: string
        example: Unlimited

#-----------------------------------------------------
# The Application List resource
#-----------------------------------------------------
  ApplicationList:
    title: Application List
    properties:
      list:
        type: array
        items:
          $ref: '#/definitions/Application'


#-----------------------------------------------------
# Key Manager information
#-----------------------------------------------------
  KeyManagerInfo:
    title: Key manager information
    properties:
      dcrEndpoint:
        type: string
        example: http://localhost:9763/identity/connect/register
      tokenEndpoint:
        type: string
        example: https://localhost:9443/oauth2/token
      revokeEndpoint:
        type: string
        example: https://localhost:9443/oauth2/revoke
      introspectEndpoint:
        type: string
        example: http://localhost:9763/oauth2/introspect
      defaultTokenValidityPeriod:
        type: long
        example: 3600
      credentials:
        $ref: '#/definitions/Credentials'

#-----------------------------------------------------
# JWT information
#-----------------------------------------------------
  JWTInfo:
    title: JWT information
    properties:
      enableJWTGeneration:
        type: boolean
        example: false
      jwtHeader:
        type: string
        example: X-JWT-Assertion

#-----------------------------------------------------
# Analytics information
#-----------------------------------------------------
  AnalyticsInfo:
    title: Analytics information
    properties:
      enabled:
        type: boolean
        example: true
      serverURL:
        type: string
        example: tcp://localhost:7612
      credentials:
        $ref: '#/definitions/Credentials'
#-----------------------------------------------------
# Throttling information
#-----------------------------------------------------
  ThrottlingInfo:
    title: Throttling information
    properties:
      serverURL:
        type: string
        example:
      credentials:
        $ref: '#/definitions/Credentials'
#-----------------------------------------------------
# Credential information
#-----------------------------------------------------
  Credentials:
    title: Credential information
    properties:
      username:
        type: string
        example: admin
      password:
        type: string
        example: admin
#-----------------------------------------------------
# END-OF-FILE
#-----------------------------------------------------
