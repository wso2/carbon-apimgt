<%
log = new Log(),
apiProvider = jagg.module("manager").getAPIProviderObj(),
user = jagg.getUser();

//methods for usage monitoring
function getProviderAPIVersionUsage(providerName, apiName, server) {
    var usage = [];

    try {

        usage = apiProvider.getProviderAPIVersionUsage(providerName, apiName, server);
        if (log.isDebugEnabled()) {
            log.debug("getProviderAPIVersionUsage for : " + server);
        }

        return {
            error:false,
            usage:usage
        };
    } catch (e) {
        log.error(e.message);
        return {
            error:e,
            usage:null

        };
    }

}

function getSubscriberCountByAPIVersions(providerName, apiName) {
    var usage = [];

    try {
        usage = apiProvider.getSubscriberCountByAPIVersions(providerName, apiName);
        if (log.isDebugEnabled()) {
            log.debug("getSubscriberCountByAPIVersions for : " +apiName);
        }
        return {
            error:false,
            usage:usage
        };
    } catch (e) {
        log.error(e.message);
        return {
            error:e,
            usage:null

        };
    }
}

function getProviderAPIUsage(providerName,from,to, server) {
    var usage = [];
    var usageout = [];
    try {
        usage = apiProvider.getProviderAPIUsage(providerName,from,to, server);
        if (log.isDebugEnabled()) {
            log.debug("getProviderAPIUsage for : " + server);
        }
        if (usage == null) {
            return {
                error:true
            };

        } else {

            return {
                error:false,
                usage:usage
            };
        }
    } catch (e) {
        log.error(e.message);
        return {
            error:e,
            usage:null

        };
    }
}

function getProviderAPIUserUsage(providerName, apiName, server) {
    var usage = [];
    var usageout = [];
    try {
        usage = apiProvider.getProviderAPIUserUsage(providerName, apiName, server);
        if (log.isDebugEnabled()) {
            log.debug("getProviderAPIUserUsage for : " + server);
        }
        if (usage == null) {
            return {
                error:true
            };

        } else {

            return {
                error:false,
                usage:usage
            };
        }
    } catch (e) {
        log.error(e.message);
        return {
            error:e,
            usage:null

        };
    }
}

function getAPIUsageByResourcePath(providerName,from,to) {
    var usage = [];
    var usageout = [];
    try {
        usage = apiProvider.getAPIUsageByResourcePath(providerName,from,to);
        if (log.isDebugEnabled()) {
            log.debug("getAPIUsageByResourcePath for : " + providerName);
        }
        if (usage == null) {
            return {
                error:true
            };

        } else {

            return {
                error:false,
                usage:usage
            };
        }
    } catch (e) {
        log.error(e.message);
        return {
            error:e,
            usage:null

        };
    }
}

function getAPIUsageByDestination(providerName,from,to) {
    var usage = [];
    var usageout = [];
    try {
        usage = apiProvider.getAPIUsageByDestination(providerName,from,to);
        if (log.isDebugEnabled()) {
            log.debug("getAPIUsageByDestination for : " + providerName);
        }
        if (usage == null) {
            return {
                error:true
            };

        } else {

            return {
                error:false,
                usage:usage
            };
        }
    } catch (e) {
        log.error(e.message);
        return {
            error:e,
            usage:null

        };
    }
}

function getAPIUsageByUser(providerName,from,to) {
    var usage = [];
    var usageout = [];
    try {
        usage = apiProvider.getAPIUsageByUser(providerName,from,to);
        if (log.isDebugEnabled()) {
            log.debug("getAPIUsageByUser for : " + providerName);
        }
        if (usage == null) {
            return {
                error:true
            };

        } else {

            return {
                error:false,
                usage:usage
            };
        }
    } catch (e) {
        log.error(e.message);
        return {
            error:e,
            usage:null

        };
    }
}

function getProviderAPIVersionUserLastAccess(providerName,from,to, server) {
    var usage = [];
    try {
        usage = apiProvider.getProviderAPIVersionUserLastAccess(providerName,from,to, server);
        if (log.isDebugEnabled()) {
            log.debug("getProviderAPIVersionUserLastAccess for : " + server);
        }
        if (usage == null) {
            return {
                error:true
            };

        } else {
            return {
                error:false,
                usage:usage
            };
        }
    } catch (e) {
        log.error(e.message);
        return {
            error:e,
            usage:null

        };
    }
}

function getProviderAPIServiceTime(providerName,from,to, server) {
    var usage = [];
    var usageout = [];
    try {
        usage = apiProvider.getProviderAPIServiceTime(providerName,from,to, server);
        if (log.isDebugEnabled()) {
            log.debug("getProviderAPIServiceTime for : " + server);
        }
        if (usage == null) {
            return {
                error:true
            };

        } else {

            return {
                error:false,
                usage:usage
            };
        }
    } catch (e) {
        log.error(e.message);
        return {
            error:e,
            usage:null

        };
    }
}

function getSubscriberCountByAPIs(providerName) {
    var usage = [];
    var usageout = [];
    try {
        usage = apiProvider.getSubscriberCountByAPIs(providerName);
        if (log.isDebugEnabled()) {
            log.debug("getSubscriberCountByAPIs for : " + providerName);
        }
        if (usage == null) {
            return {
                error:true
            };

        } else {
            return {
                error:false,
                usage:usage
            };
        }
    } catch (e) {
        log.error(e.message);
        return {
            error:e,
            usage:null

        };
    }
}

function getProviderAPIVersionUserUsage(providerName,apiName,version,serverUrl) {
    var usage = [];
    var usageout = [];
    try {
        usage = apiProvider.getProviderAPIVersionUserUsage(providerName,apiName,version,serverUrl);
        if (log.isDebugEnabled()) {
            log.debug("getProviderAPIVersionUserUsage for : " + providerName);
        }
        if (usage == null) {
            return {
                error:true
            };

        } else {
            return {
                error:false,
                usage:usage
            };
        }
    } catch (e) {
        log.error(e.message);
        return {
            error:e,
            usage:null

        };
    }
}

function getAPIResponseFaultCount(providerName,from,to) {
     var usage = [];
     var usageout = [];
     try {
         usage = apiProvider.getAPIResponseFaultCount(providerName,from,to);
         if (log.isDebugEnabled()) {
             log.debug("getAPIResponseFaultCount for : " + providerName);
         }
         if (usage == null) {
             return {
                 error:true
             };

         } else {
             return {
                 error:false,
                 usage:usage
             };
         }
     } catch (e) {
         log.error(e.message);
         return {
             error:e,
             usage:null

         };
     }
 }

function getAPIFaultyAnalyzeByTime(providerName) {
     var usage = [];
     var usageout = [];
     try {
         usage = apiProvider.getAPIFaultyAnalyzeByTime(providerName);
         if (log.isDebugEnabled()) {
             log.debug("getAPIFaultyAnalyzeByTime for : " + providerName);
         }
         if (usage == null) {
             return {
                 error:true
             };

         } else {
             return {
                 error:false,
                 usage:usage
             };
         }
     } catch (e) {
         log.error(e.message);
         return {
             error:e,
             usage:null

         };
     }
 }

function getFirstAccessTime(providerName, server) {
    var usage = [];
    var usageout = [];
    try {
        usage = apiProvider.getFirstAccessTime(providerName, server);
        if (log.isDebugEnabled()) {
            log.debug("getProviderAPIFirstAccessTime for : " + server);
        }
        if (usage == null) {
            return {
                error:true
            };

        } else {

            return {
                error:false,
                usage:usage
            };
        }
    } catch (e) {
        log.error(e.message);
        return {
            error:e,
            usage:null

        };
    }
}

function isDataPublishingEnabled(providerName, server) {
    var usage = [];
    var usageout = [];
    try {
        usage = apiProvider.isDataPublishingEnabled();
        if (log.isDebugEnabled()) {
            log.debug("isDataPublishingEnabled check");
        }
        if (usage == null) {
            return {
                error:true
            };

        } else {

            return {
                error:false,
                usage:usage
            };
        }
    } catch (e) {
        log.error(e.message);
        return {
            error:e,
            usage:null

        };
    }
}

%>