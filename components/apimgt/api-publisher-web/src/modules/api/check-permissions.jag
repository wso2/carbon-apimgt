<%
var hasCreatePermission = function () {
    var success, log = new Log(),
            provider = jagg.module("manager").getAPIProviderObj();
    try {
        success = provider.hasCreatePermission();
        if (log.isDebugEnabled()) {
            log.debug("hasCreatePermission method ");
        }
        if(success){
        return {
            error:false,
            permitted:success
        };
        }else{
        return {
            error:true,
            permitted:success
        }; }
    } catch (e) {
        log.error(e.message);
        return {
            error:true,
            permitted:false
        };
    }
};

var hasManageTierPermission = function () {
    var success, log = new Log(),
            provider = jagg.module("manager").getAPIProviderObj();
    try {
        success = provider.hasManageTierPermission();
        if (log.isDebugEnabled()) {
            log.debug("hasCreatePermission method ");
        }
        if(success){
        return {
            error:false,
            permitted:success
        };
        }else{
        return {
            error:true,
            permitted:success
        }; }
    } catch (e) {
        log.error(e.message);
        return {
            error:true,
            permitted:false
        };
    }
};

var hasUserPermissions = function (username) {
    var success, log = new Log(),
            provider = jagg.module("manager").getAPIProviderObj();

    try {
        success = provider.hasUserPermissions(username);
        if (log.isDebugEnabled()) {
            log.debug("hasCreatePermission method ");
        }
        if(success){
        return {
            error:false,
            permitted:success
        };
        }else{
        return {
            error:true,
            permitted:success
        }; }
    } catch (e) {
        log.error(e.message);
        return {
            error:true,
            permitted:false
        };
    }
};

var hasPublishPermission = function () {
    var success, log = new Log(),
            provider = jagg.module("manager").getAPIProviderObj();
    try {
        success = provider.hasPublishPermission();
        if (log.isDebugEnabled()) {
            log.debug("hasPublishPermission method " );
        }
        if(success){
        return {
            error:false,
            permitted:success
        };
        }else{
        return {
            error:true,
            permitted:success
        }; }
    } catch (e) {
        log.error(e.message);
        return {
            error:true,
            permitted:false
        };
    }
};


var showStoreURL = function () {
    var success, log = new Log(),
            provider = jagg.module("manager").getAPIProviderObj();
    try {
        success = provider.showAPIStoreURL();
        if (log.isDebugEnabled()) {
            log.debug("showStoreURL method " );
        }
        if(success){
        return {
            error:false,
            permitted:success
        };
        }else{
        return {
            error:true,
            permitted:success
        }; }
    } catch (e) {
        log.error(e.message);
        return {
            error:true,
            permitted:false
        };
    }
};

var showAPIDocVisibility = function () {
    var result, log = new Log(),
            provider = jagg.module("manager").getAPIProviderObj();
    try {
        result = provider.showAPIDocVisibility();
        if (log.isDebugEnabled()) {
            log.debug("showAPIDocVisibility method " );
        }
        if(result){
        return {
            error:false,
            permitted:result
        };
        }else{
        return {
            error:true,
            permitted:result
        }; }
    } catch (e) {
        log.error(e.message);
        return {
            error:true,
            permitted:false
        };
    }
};

var updatePermissionCache = function (username) {
    var success, log = new Log(), provider = jagg.module("manager").getAPIProviderObj();
    try {
        success = provider.updatePermissionCache(username);
        if (log.isDebugEnabled()) {
            log.debug("updatePermissionCache method ");
        }
        if(success){
            return {
                error:false,
                permitted:success
            };
        }else{
            return {
                error:true,
                permitted:success
            };
        }
    } catch (e) {
        log.error(e.message);
        return {
            error:true,
            permitted:false
        };
    }
};
%>