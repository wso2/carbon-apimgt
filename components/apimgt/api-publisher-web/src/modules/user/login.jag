<%
var login = function (username, password,tenantMode) {
    var result, isSuperTenant, message,showStoreURL,
            log = new Log(),
            manager = jagg.module("manager"),
            provider = manager.getAPIProviderObj();
    if(tenantMode != 'null' && tenantMode != '' && tenantMode != null){
	var MultitenantUtils = Packages.org.wso2.carbon.utils.multitenancy.MultitenantUtils;
    var userDomain = MultitenantUtils.getTenantDomain(username);
     if(tenantMode!=userDomain){
     return {
             error:true,
            cookie:null,
            message:"Authentication failed."+MultitenantUtils.getTenantAwareUsername(username)+" is not from the tenant domain " + tenantMode
        };
    }
    }

    result = provider.login(username, password);

    if (result.error) {
        if (log.isDebugEnabled()) {
            log.debug("Error while authenticating user : " + username);
        }
        message = result.detail.split('!')[1];
        if (message == null) {
        	message = result.detail;
        }
        return {
            error:result.error,
            cookie:null,
            message:message
        };
    }else{
    cookie = result.sessionId;
    isSuperTenant = result.isSuperTenant;
    showStoreURL=result.showStoreURL;
    cookie = cookie.split(';')[0];
    jagg.setUser({username:result.user, isSuperTenant:isSuperTenant, cookie:cookie});

    var api = jagg.module("api");
    var isCreatePermitted=api.hasCreatePermission();
    var isManageTierPermitted=api.hasManageTierPermission();
    var isPublishPermitted=api.hasPublishPermission();
    jagg.setCreatePermitted(isCreatePermitted);
    jagg.setPublishPermitted(isPublishPermitted);
    jagg.setManageTierPermitted(isManageTierPermitted);
    jagg.setShowStoreURL(showStoreURL);

    return {
        error:false,
        cookie:cookie
    };
    }
};
var loginWithSAMLToken = function (token) {
    var site = require("/site/conf/site.json");
    var security =require("sso");
    var ssoRelyingParty = new security.SSORelyingParty(site.ssoConfiguration.issuer);

    var result,
            log = new Log(),
            manager = jagg.module("manager");



    var encodedToken = ssoRelyingParty.xmlEncode(token);
    var xhr = new XMLHttpRequest();
    var endPoint = manager.getHTTPsURL() + "/services/SAML2SSOAuthenticationService";
    xhr.open("POST", endPoint);

    var payload = '<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:sso="http://sso.saml2.authenticator.identity.carbon.wso2.org" xmlns:xsd="http://dto.sso.saml2.authenticator.identity.carbon.wso2.org/xsd"><soap:Header/><soap:Body><sso:login><sso:authDto><xsd:response>'+encodedToken+'</xsd:response></sso:authDto></sso:login></soap:Body></soap:Envelope>';

    xhr.setRequestHeader('SOAPAction','urn:login');
    xhr.setRequestHeader('Content-Type','application/soap+xml');
    xhr.send(payload);
    var cookie = (xhr.getAllResponseHeaders());

    var cookieString = cookie.split(";")[0].split(":")[1];
    var userName = ssoRelyingParty.getSAMLResponseNameId(token);
    return {
        error:false,
        username:userName,
        cookie:cookieString
    };
};

var logout = function () {
    //TODO : implement logout
     session.put("createPermitted", null);
     session.put("publishPermitted", null);
    return {
        error:false
    };
};
%>
