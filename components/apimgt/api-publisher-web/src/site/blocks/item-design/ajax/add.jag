<%
include("/jagg/jagg.jag");
var log = new Log();

function generate_swagger_object(swagger){
   swaggerObj = {
        api_doc : parse(swagger),
        resources : []
    };

    for(i = 0 ; i < swaggerObj.api_doc.apis.length ; i++ ){
        swaggerObj.resources.push(swaggerObj.api_doc.apis[i].file);
        delete swaggerObj.api_doc.apis[i].file
    }
    return stringify(swaggerObj);
}

(function () {
    response.contentType = "text/plain; charset=UTF-8";
    response.addHeader('Cache-Control','no-cache, no-store, must-revalidate'); // HTTP 1.1.
    response.addHeader('Pragma','no-cache'); // HTTP 1.0.
    response.addHeader('Expires','0');
    var mod, obj, result, username,
	action = request.getParameter("action"),
    site = require("/site/conf/site.json"),
    msg = require("/site/conf/ui-messages.jag");

    if(jagg.getUser() == null){
        print({
            error:true,
            message:'timeout'
        });
    }else{
        if (request.getMethod() == 'POST' && (action === "design")) {
            mod = jagg.module("api");
            var apiData = {};
            apiData.apiName = request.getParameter("name", "UTF-8");
            apiData.name = request.getParameter("name", "UTF-8");
            apiData.version = request.getParameter("version");
            if (request.getParameter("provider") == null) {
            	apiData.provider = jagg.getUser().username;
            } else {
            	apiData.provider = request.getParameter("provider")
            }
            var apiId = {
                apiName : request.getParameter("name", "UTF-8"),
                version : request.getParameter("version"),
                provider: apiData.provider
            };            
            apiData.context = request.getParameter("context","UTF-8");
            apiData.imageUrl = request.getFile("apiThumb");

            //validate uploaded image
            if(apiData.imageUrl != null &&!jagg.isValiedImage(apiData.imageUrl)){
                obj = {
                    error:true,
                    message:"Please upload a valid image file for the API icon."
                };
                print(obj);
                return;
            }


            //If API not exist create
            result = mod.checkIfResourceExists(apiData);
            if(!result){
                result = mod.createAPI(apiData);
                if (result.error==true) {
                    obj = {
                        error:true,
                        message:result.message
                    };
                    print(obj);
                    return;
                }
            }

            apiData.description = request.getParameter("description","UTF-8");
            apiData.tags = request.getParameter("tags","UTF-8");
            apiData.bizOwner = request.getParameter("bizOwner","UTF-8");
            apiData.bizOwnerEmail = request.getParameter("bizOwnerMail","UTF-8");
            apiData.techOwner = request.getParameter("techOwner","UTF-8");
            apiData.techOwnerEmail = request.getParameter("techOwnerMail","UTF-8");
            apiData.visibility = request.getParameter("visibility");
            apiData.visibleRoles = request.getParameter("roles","UTF-8");

            apiData.swagger = generate_swagger_object(request.getParameter("swagger", "UTF-8"));

            result = mod.updateAPIDesign(apiData);
            if (result.error==true) {
                obj = {
                    error:true,
                    message:result.message
                };
            } else {
                obj = {
                    error:false,
                    data :apiId
                }
            }
            print(obj);

        } else if (request.getMethod() == 'POST' && action === "implement") {
            mod = jagg.module("api");
            var apiData = {};
            apiData.apiName = request.getParameter("name", "UTF-8");
            apiData.version = request.getParameter("version");
            apiData.provider= request.getParameter("provider");
            var apiId = {
                apiName : request.getParameter("name", "UTF-8"),
                version : request.getParameter("version"),
                provider: request.getParameter("provider")
            };
            apiData.context = request.getParameter("context","UTF-8");

            apiData.implementation_type = request.getParameter("implementation_methods");
            apiData.wsdl = request.getParameter("wsdl");
            apiData.wadl = request.getParameter("wadl");
            apiData.endpointSecured = request.getParameter("endpointType");
            apiData.endpointUTUsername = request.getParameter("epUsername");
            apiData.endpointUTPassword = request.getParameter("epPassword");
            apiData.endpoint_config= request.getParameter("endpoint_config","UTF-8");
            apiData.destinationStats= request.getParameter("destinationStats","UTF-8");

            apiData.swagger = generate_swagger_object(request.getParameter("swagger", "UTF-8"));

            result = mod.updateAPIImplementation(apiData);
            if (result.error==true) {
                obj = {
                    error:true,
                    message:result.message,
                    data :apiId,
                };
            } else {
                obj = {
                    error:false,
                    data :apiId,
                }
            }
            print(obj);
        }else if (request.getMethod() == 'POST' && action === "manage") {
            mod = jagg.module("api");
            var apiData = {};
            apiData.apiName = request.getParameter("name", "UTF-8");
            apiData.version = request.getParameter("version");
            apiData.provider= request.getParameter("provider");
            var apiId = {
                apiName : request.getParameter("name", "UTF-8"),
                version : request.getParameter("version"),
                provider: request.getParameter("provider")
            };
            apiData.context = request.getParameter("context","UTF-8");

            apiData.defaultVersion=request.getParameter("default_version_checked");


            apiData.swagger = generate_swagger_object(request.getParameter("swagger", "UTF-8"));
            apiData.tier = request.getParameter("tiersCollection");
            if(request.getParameter("transport_http") == null && request.getParameter("transport_https") == null){
                apiData.transports = null;
            }
            else if(request.getParameter("transport_http") != null && request.getParameter("transport_https") != null) {
                apiData.transports=request.getParameter("transport_http")+","+request.getParameter("transport_https");
            
            }else if(request.getParameter("transport_http") != null){
        	apiData.transports=request.getParameter("transport_http");
            }else{
        	apiData.transports=request.getParameter("transport_https");
            }
            apiData.inSequence = request.getParameter("inSequence");
            apiData.outSequence= request.getParameter("outSequence");
            apiData.responseCache = request.getParameter("responseCache","UTF-8");
            apiData.subscriptionAvailability = request.getParameter("subscriptions");
            apiData.subscriptionTenants = request.getParameter("tenants","UTF-8");
            apiData.bizOwner = request.getParameter("bizOwner");
		apiData.bizOwnerMail = request.getParameter("bizOwnerMail");
		apiData.techOwner = request.getParameter("techOwner");
		apiData.techOwnerMail = request.getParameter("techOwnerMail");
            apiData.faultSequence = request.getParameter("faultSequence");
            apiData.responseCache = request.getParameter("responseCache","UTF-8");
            apiData.cacheTimeout= request.getParameter("cacheTimeout","UTF-8");
            apiData.destinationStats= request.getParameter("destinationStats","UTF-8");


            result = mod.manageAPI(apiData);
            if (result.error==true) {
                obj = {
                    error:true,
                    message:result.message,
                    data :apiId,
                };
            } else {
                obj = {
                    error:false,
                    data :apiId,
                }
            }
            print(obj);
        }else if (action === "swagger") {
            mod = jagg.module("api");
            var apiData = {};
            apiData.apiName = request.getParameter("name", "UTF-8");
            apiData.version = request.getParameter("version");
            if (request.getParameter("provider") == null) {
            	apiData.provider = jagg.getUser().username;
            } else {
            	apiData.provider = request.getParameter("provider")
            }
            var data = mod.getSwagger12Resource(apiData);
            print(data.swagger);
        }
        else {
            print({
                      error:true,
                      message:msg.error.invalidAction(action)
            });
        }
    }
}());
%>
