<%
response.addHeader('Cache-Control','no-cache, no-store, must-revalidate'); // HTTP 1.1.
response.addHeader('Pragma','no-cache'); // HTTP 1.0.
response.addHeader('Expires','0');
include("/jagg/jagg.jag");
store = jagg.module("manager").getAPIStoreObj();

// Jaggery API for retrieving API Definition

var log = new Log();

function generate_swagger_object(swagger){
   swaggerObj = {
        api_doc : parse(swagger),
        resources : []
    };

    for(i = 0 ; i < swaggerObj.api_doc.apis.length ; i++ ){
        swaggerObj.resources.push(swaggerObj.api_doc.apis[i].file);
        delete swaggerObj.api_doc.apis[i].file
    }
    return stringify(swaggerObj);
}

(function () {
    response.contentType = "application/json; charset=UTF-8";
    var mod, obj, result, username,
	action = request.getParameter("action"),
    site = require("/site/conf/site.json"),
    msg = require("/site/conf/ui-messages.jag");

    var carbon = require('carbon');


    var uri = request.getRequestURI();
    var callPath = uri.replace("/store/api-docs", "");
    var url;

    if (uri != null) {
        var uriMatcher = new URIMatcher(callPath);
        var providerVal,apiNameVal,apiVersionVal,subContext;
        providerVal = apiNameVal = apiVersionVal = subContext = "";

        if (uriMatcher.match("/{providerVal}/{apiNameVal}/{apiVersionVal}")) {
            providerVal = uriMatcher.elements().providerVal;
            apiNameVal = uriMatcher.elements().apiNameVal;
            apiVersionVal = uriMatcher.elements().apiVersionVal;
        }else if (uriMatcher.match("/{providerVal}/{apiNameVal}/{apiVersionVal}/{subContext}")) {
            providerVal = uriMatcher.elements().providerVal;
            apiNameVal = uriMatcher.elements().apiNameVal;
            apiVersionVal = uriMatcher.elements().apiVersionVal;
            subContext = uriMatcher.elements().subContext;
        } else {
            print({
                error:true,
                message:msg.error.invalidAction(action)
            });
        }

        var url = request.getRequestURL();
        var host = getLocation(url).host;
        var port = getLocation(url).port;
        var accessProtocol = getLocation(url).protocol;

        var tenantDomain = "";
        var tenantID = -1234;
	var isTenantFlowStarted = false;

        if(providerVal.indexOf("@") > -1){
            tenantDomain = providerVal.split("@")[1];
            providerVal = providerVal.replace("@","-AT-");
            if(tenantDomain){
                tenantID = carbon.server.osgiService('org.wso2.carbon.user.core.service.RealmService').getTenantManager().getTenantId(tenantDomain);
            }
        }
	
        if(providerVal.indexOf("-DOM-") > -1){
             providerVal = providerVal.replace("-DOM-","/");
        }

	try {
		//start tenant flow before fetching swagger resource from the registry
		if (tenantDomain != "" && tenantDomain != 'carbon.super') {
			var PrivilegedCarbonContext = Packages.org.wso2.carbon.context.PrivilegedCarbonContext;
			isTenantFlowStarted = true;
			PrivilegedCarbonContext.startTenantFlow();
		        PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(tenantDomain, true);
		}

		var registry = carbon.server.osgiService('org.wso2.carbon.registry.core.service.RegistryService').getGovernanceUserRegistry("wso2.anonymous.user", tenantID);
		var prefix = "/apimgt/applicationdata/api-docs/"


		    if (subContext === "") {

			url = prefix + apiNameVal + "-" + apiVersionVal + "-" + providerVal +"/1.2/api-doc";

		    }else{
			url = prefix + apiNameVal + "-" + apiVersionVal + "-" + providerVal +"/1.2/" + subContext;
		    }

		var data = registry.get(url);
	 } finally {
		if (isTenantFlowStarted) {
                    PrivilegedCarbonContext.endTenantFlow();
                }

	}
        var output = new Packages.java.lang.String(data.content);
        var jsonObj = JSON.parse(output);
        if(jsonObj.basePath){
            var basePathValue = jsonObj.basePath;
            var username=null;
            result = jagg.module("api").getAPIDescription({
                    name:apiNameVal,
                    version:apiVersionVal,
                    provider:providerVal
                }, username);
                var api = result.api;
            var serverURL = api.serverURL;
            var context = api.context;
            var splitVal = serverURL.split(",");
            var urlArr = new Array();
            var count = 0;
            for(var i=0; i < splitVal.length ; i++){
                if(splitVal[i].trim().indexOf("http") > -1){
                    urlArr[count] = splitVal[i];
                    count++;
                };
            };
            if(urlArr.length===1){
                jsonObj.basePath=urlArr[0]+context+"/"+apiVersionVal;
            }else{
                for(var i=0; i < urlArr.length ; i++){
                    if(urlArr[i].indexOf(accessProtocol) > -1){
                        jsonObj.basePath=urlArr[i]+context+"/"+apiVersionVal;
                    }
                }
            }
        }

        // fix for '*' whild card 
        if(jsonObj.apis){
            for(var i=0;i < jsonObj.apis.length; i++){
		if (jsonObj.apis[i].path.indexOf("/*") > -1) {
		        jsonObj.apis[i].path = jsonObj.apis[i].path.replace("/*", "/");
		        /*if(jsonObj.apis[i].operations){
		            for(var j=0;j < jsonObj.apis[i].operations.length; j++){    
		                jsonObj.apis[i].operations[j].parameters.push({
		                    "dataType": "String",
		                    "description": "Resource",
		                    "name": "resource",
		                    "allowMultiple": false,
		                    "required": false,
		                    "paramType": "path"
		                });
		            }
		        }*/
		}
            }
        }

        print(jsonObj);

    }

}());

function sendReceive (httpMethod,data,url){

    var headers = this.getRequestHeaders(false);
    var type = "json"; // response format
    var response;
    switch (httpMethod){
        case  "GET":
            response = get(url,{},headers,type);
            break;
        case   "POST":
            response = post(url,stringify(data),headers,type);
            break;
        case    "PUT":
            response = put(url,stringify(data),headers,type);
            break;
        case    "DELETE":
            response = del(url,stringify(data),headers,type);
            break;
        default :
            log.error("Error in the programme flow.");
    }
    log.debug("---------------------:" + stringify(response));
    if(response.data.Error) {
        session.put("get-status", response.data.Error.errorMessage);
    } else {
        session.put("get-status", "succeeded");
    }
    return response;
};

function getRequestHeaders (ssoEnabled){
    var requestHeaders;
    if(ssoEnabled){
        var accessToken = this.getAccessTokenFromSession();
        requestHeaders = {
            "Authorization": "Bearer "+accessToken,
            "Content-Type": "application/json"
        };
    }else{
        requestHeaders = {
            "Content-Type": "application/json",
            "Cookie": "JSESSIONID="+session.get("JSESSIONID")
        };
    }
    return requestHeaders;
};

function getLocation(href) {
    var match = href.match(/^(https?\:)\/\/(([^:\/?#]*)(?:\:([0-9]+))?)(\/[^?#]*)(\?[^#]*|)(#.*|)$/);
    return match && {
        protocol: match[1],
        host: match[2],
        hostname: match[3],
        port: match[4],
        pathname: match[5],
        search: match[6],
        hash: match[7]
    }
}
%>
