#   Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#---------------------------------------------------------------------------

openapi: "3.0.0"
info:
  title: Service Catalog APIs
  description: |
    This specifies a **RESTful API** for Service Catalog.
  version: '0.9'
servers:
  - url: 'https://apis.wso2.com/api/service-catalog/v1'
  - url: 'http://apis.wso2.com/api/service-catalog/v1'

paths:
  ######################################################
  # The Service Catalog API operations
  ######################################################
  /services:
  
    #-----------------------------------------------------
    # Retrieve/search services in the service catalog
    #-----------------------------------------------------
    get:
      summary: Retrieve/search services
      description: |
        Retrieve or search services in the service catalog of the user's organization or tenant.
      operationId: searchServices
      security:
        - OAuth2Security:
            - service_catalog:service_view
      tags:
        - Services
      parameters:
        - name: name
          in: query
          description: |
            Filter services by the name of the service
          schema:
            type: string
        - name: version
          in: query
          description: |
            Filter services by version of the service
          schema:
            type: string
        - name: definitionType
          in: query
          description: |
            Filter services by definitionType
          schema:
            type: string
            enum:
              - OAS
              - WSDL1
              - WSDL2
              - GRAPHQL_SDL
              - ASYNC_API
        - name: displayName
          in: query
          description: |
            Filter services by the display name
          schema:
            type: string
        - name: key
          in: query
          description: |
            Comma seperated keys of the services to check
          schema:
            type: string
        - name: shrink
          in: query
          description: |
            If this set to true, a minimal set of fields will be provided for each service including the md5
          schema:
            type: boolean
            default: false
        - $ref: '#/components/parameters/sortBy'
        - $ref: '#/components/parameters/sortOrder'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        200:
          description: |
            Paginated matched list of services returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceList'
        "400":
          description: |
            Bad Request. Due to an invalid search parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    #-----------------------------------------------------
    # Create new service and add to the service catalog 
    #-----------------------------------------------------
    post:
      summary: Create a new service
      description: |
        Create a new service and add it to the service catalog of the user's organization (or tenant) 
        by specifying the details of the service along with its definition. 
      security:
        - OAuth2Security:
            - service_catalog:service_write
      tags:
        - Services
      operationId: createService
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ServiceSchema'
      responses:
        201:
          description: |
            Created.
            Successful response with the newly created service entry as the response payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        400:
          description: |
            Bad Request.
            Invalid request or validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        415:
          description: |
            Unsupported Media Type.
            The entity of the request was in a not supported format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /services/{serviceId}:
    #-----------------------------------------------------
    # Retrieve a specific service in the service catalog
    #-----------------------------------------------------
    get:
      summary: Get details of a service
      description: |
        Get details of a service using the id of the service.
      security:
        - OAuth2Security:
            - service_catalog:service_view
      operationId: getServiceById
      tags:
        - Services
      parameters:
        - $ref: '#/components/parameters/serviceId'
      responses:
        "200":
          description: |
            Requested service in the service catalog is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        "400":
          description: |
            Invalid Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: |
            Not Found.
            Requested service does not exist in the service catalog.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    #-----------------------------------------------------
    # Update a service in the service catalog
    #-----------------------------------------------------
    put:
      summary: Update a service
      description: |
        Update a service's details and definition
      security:
        - OAuth2Security:
            - service_catalog:service_write
      operationId: updateService
      tags:
        - Services
      parameters:
        - $ref: '#/components/parameters/serviceKey'
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ServiceSchema'
      responses:
        "200":
          description: |
            Updated.
            Successful response with the newly updated service as entity in the body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        "400":
          description: |
            Invalid Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: |
            Not Found.
            Requested Service does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    #-----------------------------------------------------
    # Delete a service in the service catalog
    #-----------------------------------------------------
    delete:
      summary: Delete a service
      description: |
        Delete a service by providing the service id
      security:
        - OAuth2Security:
            - service_catalog:service_write
      operationId: deleteService
      tags:
        - Services
      parameters:
        - $ref: '#/components/parameters/serviceKey'
      responses:
        "204":
          description: |
            Successfully deleted the catalog entry.
        "400":
          description: |
            Invalid Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: |
            Not Found.
            Requested Service does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  #-----------------------------------------------------
  # Retrieve definition of a service in the service catalog
  #-----------------------------------------------------
  /services/{serviceKey}/definition:
    get:
      summary: Retrieve a service definition
      description: |
        Retrieve the definition of a service identified by the service id.
      security:
        - OAuth2Security:
            - service_catalog:entry_view
      operationId: getServiceDefinition
      tags:
        - Services
      parameters:
        - $ref: '#/components/parameters/serviceKey'
      responses:
        "200":
          description: |
            Successful response with the definition file as entity in the body.
          content:
            application/json:
              schema:
                type: string
            application/yaml:
              schema:
                type: string
        "400":
          description: |
            Invalid Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: |
            Not Found.
            Requested Service does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


  #-------------------------------------------------------------------
  # Import a service into the service catalog from a zipped archive
  #-------------------------------------------------------------------
  /services/import:
    post:
      summary: Import a service
      description: |
        Import  a service by providing an archived service
      security:
        - OAuth2Security:
            - service_catalog:service_write
      operationId: importService
      tags:
        - Services
      parameters:
        - name: overwrite
          in: query
          description: |
            Whether to overwrite if there is any existing service with the same name and version.
          required: false
          schema:
            type: boolean
            default: false

      requestBody:
        required: false
        content:
          multipart/form-data:
            schema:
              required:
                - file
              properties:
                file:
                  type: string
                  description: |
                    Zip archive consisting of exported Application Configuration.
                  format: binary
                verifier:
                  type: string
              
      responses:
        "200":
          description: |
            Successful response with the imported service metadata.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceInfoList'
          headers:
            ETag:
              $ref: '#/components/headers/ETag'
        "400":
          description: |
            Invalid Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  #----------------------------------------------------------
  # Exporting a service as a zipped archive
  #----------------------------------------------------------
  /services/export:

    #-----------------------------------------
    # Retrieve a service as a zipped archive
    #-----------------------------------------
    get:
      summary: Export a service
      description: |
        Export a service as an archived zip file.
      security:
        - OAuth2Security:
            - service_catalog:service_view
      operationId: exportService
      tags:
        - Services
      parameters:
        - name: name
          in: query
          description: |
            Name of the service to export
          required: true
          schema:
            type: string
        - name: version
          in: query
          description: |
            Version of the service to export
          required: true
          schema:
            type: string
      responses:
        "200":
          description: |
            Successful response as the exported service as a zipped archive.
          content:
            application/zip:
              schema:
                type: string
                format: binary
          headers:
            ETag:
              $ref: '#/components/headers/ETag'
        "404":
          description: |
            Not Found.
            Requested Service does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  ######################################################
  # The Service Catalog API settings
  ######################################################
  /settings:
    #-----------------------------------------------------
    # Retrieve Service Catalog settings
    #-----------------------------------------------------
    get:
      summary: Retrieve service catalog API settings
      description: |
        Retrieve Service Catalog API settings
      operationId: getSettings
      tags:
        - Settings
      responses:
        "200":
          description: |
            OK.
            Settings returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settings'
        "404":
          description: |
            Not Found.
            Requested Settings does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  #-------------------------------------------------------
  # The security schemes of resources used by some of the APIs
  #-------------------------------------------------------
  securitySchemes:
    OAuth2Security:
      type: oauth2
      flows:
        password:
          tokenUrl: https://localhost:9443/oauth2/token
          scopes:
            service_catalog:service_view: view access to services in service catalog
            service_catalog:service_write: write access to services in service catalog

  #-------------------------------------------------------
  # The definitions of resources used by some of the APIs
  #-------------------------------------------------------
  schemas:
    ServiceInfoList:
      title: Services List
      type: object
      properties:
        count:
          type: integer
          description: |
            MD5 hashes of services returned.
          example: 1
        list:
          type: array
          items:
            $ref: '#/components/schemas/ServiceInfo'
          
    ServicesStatusList:
      title: Services List
      type: object
      properties:
        count:
          type: integer
          description: |
            MD5 hashes of services returned.
          example: 1
        list:
          type: array
          items:
            $ref: '#/components/schemas/ServiceCRUDStatus'
        pagination:
          $ref: '#/components/schemas/Pagination'
          
    ServiceListExpanded:
      title: Services List
      type: object
      properties:
        count:
          type: integer
          description: |
            MD5 hashes of services returned.
          example: 1
        list:
          type: array
          items:
            $ref: '#/components/schemas/Service'
        pagination:
          $ref: '#/components/schemas/Pagination'
          
    #-----------------------------------------------------
    # The Service Catalog Entry resource
    #-----------------------------------------------------
    Verifier:
      type: object
      title: Json array of md5 hash values of Service Catalog Entry objects
      required:
        - key
        - md5
      properties:
        key:
          type: string
          pattern: '^[^\*]+$'
          example: petStore-1.0.0
        md5:
          type: string
          example: e27ef979af14c72783b8112dc41c3434c09763ddb230e1a829d5f9134d1abd07

    #-----------------------------------------------------
    # The Paginated Service Entry Array resource
    #-----------------------------------------------------
    ServiceList:
      type: object
      title: Paginated List of Services in Service Catalog
      properties:
        list:
          type: array
          title: List of Services in Service Catalog
          items:
            $ref: '#/components/schemas/Service'
        pagination:
          $ref: '#/components/schemas/Pagination'

    #-----------------------------------------------------
    # The Service resource model
    #-----------------------------------------------------
    Service:
      type: object
      title: The Service Object
      required:
        - name
        - version
        - serviceType
      properties:
        id:
          type: string
          example: 01234567-0123-0123-0123-012345678901
          readOnly: true
        name:
          type: string
          pattern: '^[^\*]+$'
          example: Pizzashack-Endpoint
        displayName:
          type: string
          pattern: '^[^\*]+$'
          example: Pizzashack-Endpoint
        description:
          type: string
          example: A Catalog Entry that exposes a REST endpoint
        version:
          type: string
          example: v1
        serviceUrl:
          type: string
          example: http://localhost/pizzashack
        definitionType:
          type: string
          description: The type of the provided API definition
          example: OAS3
          enum:
            - OAS2
            - OAS3
            - WSDL1
            - WSDL2
            - GRAPHQL_SDL
            - ASYNC_API
        securityType:
          type: string
          description: The security type of the endpoint
          example: BASIC
          enum:
            - BASIC
            - DIGEST
            - OAUTH2
            - NONE
        mutualSSLEnabled:
          type: boolean
          description: Whether Mutual SSL is enabled for the endpoint
          default: false
        usage:
          type: integer
          description: Number of usages of the service in APIs
          readOnly: true
          example: 1
        createdTime:
          type: string
          readOnly: true
          example: '2020-02-20T13:57:16.229'
        lastUpdatedTime:
          type: string
          readOnly: true
          example: '2020-02-20T13:57:16.229'
        md5:
          type: string
          example: 36583a6a249b410e7fc4f892029709cac09763ddb230e1a829d5f9134d1abd07
        definitionUrl:
          type: string
          example: https://petstore.swagger.io/v2/swagger.json

    #-----------------------------------------------------
    # The Service Metadata model
    #-----------------------------------------------------
    ServiceMetadata:
      type: object
      title: The Service Metadata object
      properties:
        key:
          type: string
          example: PizzashackEndpoint-1.0.0
        name:
          type: string
          pattern: '^[^\*]+$'
          example: Pizzashack-Endpoint
        displayName:
          type: string
          pattern: '^[^\*]+$'
          example: Pizzashack-Endpoint
        description:
          type: string
          example: A Service that exposes a REST endpoint
        version:
          type: string
          example: v1
        serviceUrl:
          type: string
          example: http://localhost/pizzashack
        definitionType:
          type: string
          description: The type of the provided API definition
          example: OAS3
          enum:
            - OAS2
            - OAS3
            - WSDL1
            - WSDL2
            - GRAPHQL_SDL
            - ASYNC_API
        securityType:
          type: string
          description: The security type of the endpoint
          example: BASIC
          enum:
            - BASIC
            - DIGEST
            - OAUTH2
            - NONE
        mutualSSLEnabled:
          type: boolean
          description: Whether Mutual SSL is enabled for the endpoint
          default: false
          
    #-----------------------------------------------------
    # Status of CRUD operations of Service model
    #-----------------------------------------------------
    ServiceCRUDStatus:
      type: object
      title: The Service object
      required:
        - entryName
        - version
        - serviceType
      properties:
        id:
          type: string
          example: 01234567-0123-0123-0123-012345678901
          readOnly: true
        name:
          type: string
          pattern: '^[^\*]+$'
          example: Pizzashack-Endpoint
        displayName:
          type: string
          pattern: '^[^\*]+$'
          example: Pizzashack-Endpoint
        version:
          type: string
          example: v1
        serviceUrl:
          type: string
          example: http://localhost/pizzashack
        createdTime:
          type: string
          readOnly: true
          example: '2020-02-20T13:57:16.229'
        lastUpdatedTime:
          type: string
          readOnly: true
          example: '2020-02-20T13:57:16.229'
    
    ServiceInfo:
      type: object
      title: The Service Info object
      properties:
        id:
          type: string
          example: 01234567-0123-0123-0123-012345678901
          readOnly: true
        name:
          type: string
          pattern: '^[^\*]+$'
          example: PizzashackEndpoint
        key:
          type: string
          example: PizzashackEndpoint-1.0.0
        version:
          type: string
          example: v1
        md5:
          type: string
          example: 36583a6a249b410e7fc4f892029709cac09763ddb230e1a829d5f9134d1abd07
          
    #-----------------------------------------------------
    # The Service Schema resource
    #-----------------------------------------------------
    ServiceSchema:
      type: object
      title: The Service Schema object
      required:
        - catalogEntry
        - definitionFile
      properties:
        catalogEntry:
          $ref: '#/components/schemas/Service'
        definitionFile:
          type: string
          format: binary

    #-----------------------------------------------------
    # The settings resource
    #-----------------------------------------------------
    Settings:
      title: SettingsDTO
      properties:
        scopes:
          type: array
          items:
            type: string

    #-----------------------------------------------------
    # The Error resource
    #-----------------------------------------------------
    Error:
      type: object
      title: Error object returned with 4XX HTTP Status
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int64
        message:
          type: string
          description: Error message.
        description:
          type: string
          description: |
            A detail description about the error message.
        moreInfo:
          type: string
          description: |
            Preferably an url with more details about the error.
        error:
          type: array
          description: |
            If there are more than one error list them out.
            For example, list out validation errors by each field.
          items:
            $ref: '#/components/schemas/ErrorListItem'

    #-----------------------------------------------------
    # The Error List Item resource
    #-----------------------------------------------------
    ErrorListItem:
      type: object
      title: Description of individual errors that may have occurred during a request.
      required:
        - code
        - message
      properties:
        code:
          type: string
        message:
          type: string
          description: |
            Description about individual errors occurred
        description:
          type: string
          description: |
            A detail description about the error message.

    #-----------------------------------------------------
    # The pagination resource
    #-----------------------------------------------------
    Pagination:
      title: Pagination
      properties:
        offset:
          type: integer
          example: 0
        limit:
          type: integer
          example: 1
        total:
          type: integer
          example: 10
        next:
          type: string
          description: |
            Link to the next subset of resources qualified.
            Empty if no more resources are to be returned.
        previous:
          type: string
          description: |
            Link to the previous subset of resources qualified.
            Empty if current subset is the first subset returned.

  ######################################################
  # Parameters - required by some of the APIs above
  ######################################################
  parameters:

    #-------------------------------------------------------
    # serviceId - An id which represents a service in the service catalog
    #-------------------------------------------------------
    serviceId:
      name: serviceId
      in: path
      description: uuid of the service
      required: true
      schema:
        type: string
        
    #-------------------------------------------------------
    # serviceKey - A key which represents a service in the service catalog
    #-------------------------------------------------------
    serviceKey:
      name: serviceKey
      in: path
      description: service key of the service
      required: true
      schema:
        type: string

    #-------------------------------------------------------
    # ifMatch - If-Match header value to be used for concurrency control
    #-------------------------------------------------------
    ifMatch:
      name: If-Match
      in: header
      description: ETag of the service resource to update
      required: false
      schema:
        type: string

    #-----------------------------------------------------
    # limit - The maximum number of resources to be returned by a GET
    #-----------------------------------------------------
    limit:
      name: limit
      in: query
      description: |
        Maximum limit of items to return.
      schema:
        type: integer
        default: 25

    #-------------------------------------------------------------------------------
    # offset - The order number of an instance in a qualified set of
    # resources at which to start to return the next batch of qualified resources
    #-------------------------------------------------------------------------------
    offset:
      name: offset
      in: query
      description: |
        Starting point within the complete list of items qualified.
      schema:
        type: integer
        default: 0

    #-------------------------------------------------------------------------------
    # sortBy - sort the returned services list by given field
    #-------------------------------------------------------------------------------
    sortBy:
      name: sortBy
      in: query
      schema:
        type: string
        enum:
          - name
          - definitionType
    
    #-------------------------------------------------------------------------------
    # sortOrder - sort ordering: ascending (asc) or descending (desc)
    #-------------------------------------------------------------------------------
    sortOrder:
      name: sortOrder
      in: query
      schema:
        type: string
        enum:
          - asc
          - desc

  headers:
    #-------------------------------------------------------
    # ETag header representing the current state of the resource
    #-------------------------------------------------------
    ETag:
      schema:
        type: string
      description: A hash-like string value which represents the current state of a resource